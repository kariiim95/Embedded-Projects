
MC2_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000239a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  0000239a  0000242e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080007a  0080007a  00002448  2**0
                  ALLOC
  3 .stab         00002700  00000000  00000000  00002448  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001433  00000000  00000000  00004b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000060bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000622b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a6c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 97 0e 	jmp	0x1d2e	; 0x1d2e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 6a 0e 	jmp	0x1cd4	; 0x1cd4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 78 08 	call	0x10f0	; 0x10f0 <main>
      8a:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b0 11 	jmp	0x2360	; 0x2360 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b0 11 	jmp	0x2360	; 0x2360 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <write_in_memory>:

/*
 * take two pass and check if same, if not return failed, if same save it in EEPROM
 * */
errors write_in_memory( uint8 *pass,uint8 * repass)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	a3 97       	sbiw	r28, 0x23	; 35
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	98 a3       	std	Y+32, r25	; 0x20
     b5c:	8f 8f       	std	Y+31, r24	; 0x1f
     b5e:	7a a3       	std	Y+34, r23	; 0x22
     b60:	69 a3       	std	Y+33, r22	; 0x21
	uint8 i;
	for ( i=0; i<5; i++)
     b62:	1e 8e       	std	Y+30, r1	; 0x1e
     b64:	8c c0       	rjmp	.+280    	; 0xc7e <write_in_memory+0x138>
	{
		if( pass[i]!=  repass[i])
     b66:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b68:	28 2f       	mov	r18, r24
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b6e:	98 a1       	ldd	r25, Y+32	; 0x20
     b70:	fc 01       	movw	r30, r24
     b72:	e2 0f       	add	r30, r18
     b74:	f3 1f       	adc	r31, r19
     b76:	40 81       	ld	r20, Z
     b78:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	89 a1       	ldd	r24, Y+33	; 0x21
     b80:	9a a1       	ldd	r25, Y+34	; 0x22
     b82:	fc 01       	movw	r30, r24
     b84:	e2 0f       	add	r30, r18
     b86:	f3 1f       	adc	r31, r19
     b88:	80 81       	ld	r24, Z
     b8a:	48 17       	cp	r20, r24
     b8c:	09 f4       	brne	.+2      	; 0xb90 <write_in_memory+0x4a>
     b8e:	74 c0       	rjmp	.+232    	; 0xc78 <write_in_memory+0x132>
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	a8 e4       	ldi	r26, 0x48	; 72
     b96:	b2 e4       	ldi	r27, 0x42	; 66
     b98:	89 8f       	std	Y+25, r24	; 0x19
     b9a:	9a 8f       	std	Y+26, r25	; 0x1a
     b9c:	ab 8f       	std	Y+27, r26	; 0x1b
     b9e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ba0:	69 8d       	ldd	r22, Y+25	; 0x19
     ba2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ba4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ba6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	4a e7       	ldi	r20, 0x7A	; 122
     bae:	53 e4       	ldi	r21, 0x43	; 67
     bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bb4:	dc 01       	movw	r26, r24
     bb6:	cb 01       	movw	r24, r22
     bb8:	8d 8b       	std	Y+21, r24	; 0x15
     bba:	9e 8b       	std	Y+22, r25	; 0x16
     bbc:	af 8b       	std	Y+23, r26	; 0x17
     bbe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     bc0:	6d 89       	ldd	r22, Y+21	; 0x15
     bc2:	7e 89       	ldd	r23, Y+22	; 0x16
     bc4:	8f 89       	ldd	r24, Y+23	; 0x17
     bc6:	98 8d       	ldd	r25, Y+24	; 0x18
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	40 e8       	ldi	r20, 0x80	; 128
     bce:	5f e3       	ldi	r21, 0x3F	; 63
     bd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bd4:	88 23       	and	r24, r24
     bd6:	2c f4       	brge	.+10     	; 0xbe2 <write_in_memory+0x9c>
		__ticks = 1;
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	9c 8b       	std	Y+20, r25	; 0x14
     bde:	8b 8b       	std	Y+19, r24	; 0x13
     be0:	3f c0       	rjmp	.+126    	; 0xc60 <write_in_memory+0x11a>
	else if (__tmp > 65535)
     be2:	6d 89       	ldd	r22, Y+21	; 0x15
     be4:	7e 89       	ldd	r23, Y+22	; 0x16
     be6:	8f 89       	ldd	r24, Y+23	; 0x17
     be8:	98 8d       	ldd	r25, Y+24	; 0x18
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	3f ef       	ldi	r19, 0xFF	; 255
     bee:	4f e7       	ldi	r20, 0x7F	; 127
     bf0:	57 e4       	ldi	r21, 0x47	; 71
     bf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bf6:	18 16       	cp	r1, r24
     bf8:	4c f5       	brge	.+82     	; 0xc4c <write_in_memory+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bfa:	69 8d       	ldd	r22, Y+25	; 0x19
     bfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c00:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	40 e2       	ldi	r20, 0x20	; 32
     c08:	51 e4       	ldi	r21, 0x41	; 65
     c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c0e:	dc 01       	movw	r26, r24
     c10:	cb 01       	movw	r24, r22
     c12:	bc 01       	movw	r22, r24
     c14:	cd 01       	movw	r24, r26
     c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c1a:	dc 01       	movw	r26, r24
     c1c:	cb 01       	movw	r24, r22
     c1e:	9c 8b       	std	Y+20, r25	; 0x14
     c20:	8b 8b       	std	Y+19, r24	; 0x13
     c22:	0f c0       	rjmp	.+30     	; 0xc42 <write_in_memory+0xfc>
     c24:	89 e1       	ldi	r24, 0x19	; 25
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	9a 8b       	std	Y+18, r25	; 0x12
     c2a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c2c:	89 89       	ldd	r24, Y+17	; 0x11
     c2e:	9a 89       	ldd	r25, Y+18	; 0x12
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	f1 f7       	brne	.-4      	; 0xc30 <write_in_memory+0xea>
     c34:	9a 8b       	std	Y+18, r25	; 0x12
     c36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c38:	8b 89       	ldd	r24, Y+19	; 0x13
     c3a:	9c 89       	ldd	r25, Y+20	; 0x14
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	9c 8b       	std	Y+20, r25	; 0x14
     c40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c42:	8b 89       	ldd	r24, Y+19	; 0x13
     c44:	9c 89       	ldd	r25, Y+20	; 0x14
     c46:	00 97       	sbiw	r24, 0x00	; 0
     c48:	69 f7       	brne	.-38     	; 0xc24 <write_in_memory+0xde>
     c4a:	14 c0       	rjmp	.+40     	; 0xc74 <write_in_memory+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c4c:	6d 89       	ldd	r22, Y+21	; 0x15
     c4e:	7e 89       	ldd	r23, Y+22	; 0x16
     c50:	8f 89       	ldd	r24, Y+23	; 0x17
     c52:	98 8d       	ldd	r25, Y+24	; 0x18
     c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c58:	dc 01       	movw	r26, r24
     c5a:	cb 01       	movw	r24, r22
     c5c:	9c 8b       	std	Y+20, r25	; 0x14
     c5e:	8b 8b       	std	Y+19, r24	; 0x13
     c60:	8b 89       	ldd	r24, Y+19	; 0x13
     c62:	9c 89       	ldd	r25, Y+20	; 0x14
     c64:	98 8b       	std	Y+16, r25	; 0x10
     c66:	8f 87       	std	Y+15, r24	; 0x0f
     c68:	8f 85       	ldd	r24, Y+15	; 0x0f
     c6a:	98 89       	ldd	r25, Y+16	; 0x10
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	f1 f7       	brne	.-4      	; 0xc6c <write_in_memory+0x126>
     c70:	98 8b       	std	Y+16, r25	; 0x10
     c72:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(50); // this delay is used between each two operations done on the eeprom
			return failed_to_save;
     c74:	1b a2       	std	Y+35, r1	; 0x23
     c76:	94 c0       	rjmp	.+296    	; 0xda0 <write_in_memory+0x25a>
 * take two pass and check if same, if not return failed, if same save it in EEPROM
 * */
errors write_in_memory( uint8 *pass,uint8 * repass)
{
	uint8 i;
	for ( i=0; i<5; i++)
     c78:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c7a:	8f 5f       	subi	r24, 0xFF	; 255
     c7c:	8e 8f       	std	Y+30, r24	; 0x1e
     c7e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c80:	85 30       	cpi	r24, 0x05	; 5
     c82:	08 f4       	brcc	.+2      	; 0xc86 <write_in_memory+0x140>
     c84:	70 cf       	rjmp	.-288    	; 0xb66 <write_in_memory+0x20>
		{
			_delay_ms(50); // this delay is used between each two operations done on the eeprom
			return failed_to_save;
		}
	}
	for(uint8 i =0;i<5;i++)
     c86:	1d 8e       	std	Y+29, r1	; 0x1d
     c88:	85 c0       	rjmp	.+266    	; 0xd94 <write_in_memory+0x24e>
	{
		EEPROM_writeByte(1+i, Pass1_Arry[i]); // 1+i is the address of the location in the eeprom that i'm doing to save in it the 5-byte pass								// each byte is a number
     c8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c8c:	88 2f       	mov	r24, r24
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	01 96       	adiw	r24, 0x01	; 1
     c92:	ac 01       	movw	r20, r24
     c94:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c96:	88 2f       	mov	r24, r24
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	fc 01       	movw	r30, r24
     c9c:	e2 58       	subi	r30, 0x82	; 130
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	20 81       	ld	r18, Z
     ca2:	ca 01       	movw	r24, r20
     ca4:	62 2f       	mov	r22, r18
     ca6:	0e 94 2a 0a 	call	0x1454	; 0x1454 <EEPROM_writeByte>
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	a0 e2       	ldi	r26, 0x20	; 32
     cb0:	b1 e4       	ldi	r27, 0x41	; 65
     cb2:	8b 87       	std	Y+11, r24	; 0x0b
     cb4:	9c 87       	std	Y+12, r25	; 0x0c
     cb6:	ad 87       	std	Y+13, r26	; 0x0d
     cb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cba:	6b 85       	ldd	r22, Y+11	; 0x0b
     cbc:	7c 85       	ldd	r23, Y+12	; 0x0c
     cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	4a e7       	ldi	r20, 0x7A	; 122
     cc8:	53 e4       	ldi	r21, 0x43	; 67
     cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cce:	dc 01       	movw	r26, r24
     cd0:	cb 01       	movw	r24, r22
     cd2:	8f 83       	std	Y+7, r24	; 0x07
     cd4:	98 87       	std	Y+8, r25	; 0x08
     cd6:	a9 87       	std	Y+9, r26	; 0x09
     cd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cda:	6f 81       	ldd	r22, Y+7	; 0x07
     cdc:	78 85       	ldd	r23, Y+8	; 0x08
     cde:	89 85       	ldd	r24, Y+9	; 0x09
     ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	40 e8       	ldi	r20, 0x80	; 128
     ce8:	5f e3       	ldi	r21, 0x3F	; 63
     cea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cee:	88 23       	and	r24, r24
     cf0:	2c f4       	brge	.+10     	; 0xcfc <write_in_memory+0x1b6>
		__ticks = 1;
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	9e 83       	std	Y+6, r25	; 0x06
     cf8:	8d 83       	std	Y+5, r24	; 0x05
     cfa:	3f c0       	rjmp	.+126    	; 0xd7a <write_in_memory+0x234>
	else if (__tmp > 65535)
     cfc:	6f 81       	ldd	r22, Y+7	; 0x07
     cfe:	78 85       	ldd	r23, Y+8	; 0x08
     d00:	89 85       	ldd	r24, Y+9	; 0x09
     d02:	9a 85       	ldd	r25, Y+10	; 0x0a
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	3f ef       	ldi	r19, 0xFF	; 255
     d08:	4f e7       	ldi	r20, 0x7F	; 127
     d0a:	57 e4       	ldi	r21, 0x47	; 71
     d0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d10:	18 16       	cp	r1, r24
     d12:	4c f5       	brge	.+82     	; 0xd66 <write_in_memory+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d14:	6b 85       	ldd	r22, Y+11	; 0x0b
     d16:	7c 85       	ldd	r23, Y+12	; 0x0c
     d18:	8d 85       	ldd	r24, Y+13	; 0x0d
     d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	40 e2       	ldi	r20, 0x20	; 32
     d22:	51 e4       	ldi	r21, 0x41	; 65
     d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d28:	dc 01       	movw	r26, r24
     d2a:	cb 01       	movw	r24, r22
     d2c:	bc 01       	movw	r22, r24
     d2e:	cd 01       	movw	r24, r26
     d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d34:	dc 01       	movw	r26, r24
     d36:	cb 01       	movw	r24, r22
     d38:	9e 83       	std	Y+6, r25	; 0x06
     d3a:	8d 83       	std	Y+5, r24	; 0x05
     d3c:	0f c0       	rjmp	.+30     	; 0xd5c <write_in_memory+0x216>
     d3e:	89 e1       	ldi	r24, 0x19	; 25
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	9c 83       	std	Y+4, r25	; 0x04
     d44:	8b 83       	std	Y+3, r24	; 0x03
     d46:	8b 81       	ldd	r24, Y+3	; 0x03
     d48:	9c 81       	ldd	r25, Y+4	; 0x04
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <write_in_memory+0x204>
     d4e:	9c 83       	std	Y+4, r25	; 0x04
     d50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d52:	8d 81       	ldd	r24, Y+5	; 0x05
     d54:	9e 81       	ldd	r25, Y+6	; 0x06
     d56:	01 97       	sbiw	r24, 0x01	; 1
     d58:	9e 83       	std	Y+6, r25	; 0x06
     d5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d5c:	8d 81       	ldd	r24, Y+5	; 0x05
     d5e:	9e 81       	ldd	r25, Y+6	; 0x06
     d60:	00 97       	sbiw	r24, 0x00	; 0
     d62:	69 f7       	brne	.-38     	; 0xd3e <write_in_memory+0x1f8>
     d64:	14 c0       	rjmp	.+40     	; 0xd8e <write_in_memory+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d66:	6f 81       	ldd	r22, Y+7	; 0x07
     d68:	78 85       	ldd	r23, Y+8	; 0x08
     d6a:	89 85       	ldd	r24, Y+9	; 0x09
     d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	9e 83       	std	Y+6, r25	; 0x06
     d78:	8d 83       	std	Y+5, r24	; 0x05
     d7a:	8d 81       	ldd	r24, Y+5	; 0x05
     d7c:	9e 81       	ldd	r25, Y+6	; 0x06
     d7e:	9a 83       	std	Y+2, r25	; 0x02
     d80:	89 83       	std	Y+1, r24	; 0x01
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	9a 81       	ldd	r25, Y+2	; 0x02
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	f1 f7       	brne	.-4      	; 0xd86 <write_in_memory+0x240>
     d8a:	9a 83       	std	Y+2, r25	; 0x02
     d8c:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(50); // this delay is used between each two operations done on the eeprom
			return failed_to_save;
		}
	}
	for(uint8 i =0;i<5;i++)
     d8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d90:	8f 5f       	subi	r24, 0xFF	; 255
     d92:	8d 8f       	std	Y+29, r24	; 0x1d
     d94:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d96:	85 30       	cpi	r24, 0x05	; 5
     d98:	08 f4       	brcc	.+2      	; 0xd9c <write_in_memory+0x256>
     d9a:	77 cf       	rjmp	.-274    	; 0xc8a <write_in_memory+0x144>
	{
		EEPROM_writeByte(1+i, Pass1_Arry[i]); // 1+i is the address of the location in the eeprom that i'm doing to save in it the 5-byte pass								// each byte is a number
		_delay_ms(10); // this delay is used between each two operations done on the eeprom
	}
		return succeeded_to_save;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	8b a3       	std	Y+35, r24	; 0x23
     da0:	8b a1       	ldd	r24, Y+35	; 0x23
}
     da2:	a3 96       	adiw	r28, 0x23	; 35
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <verfiy_password_from_memory>:
/*
 * CHECH ENTED PASS WITH SAVED PASS IN EEPROM
 * if same return right pass else return wrong
 */
errors verfiy_password_from_memory(uint8 pass[])
{
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	63 97       	sbiw	r28, 0x13	; 19
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	9a 8b       	std	Y+18, r25	; 0x12
     dca:	89 8b       	std	Y+17, r24	; 0x11

	for (uint8 i = 0;i<5;i++)
     dcc:	18 8a       	std	Y+16, r1	; 0x10
     dce:	84 c0       	rjmp	.+264    	; 0xed8 <verfiy_password_from_memory+0x124>
	{
		EEPROM_readByte(1+i, Pass_EEPROM+i);//saving the pass in eeprom in the arr
     dd0:	88 89       	ldd	r24, Y+16	; 0x10
     dd2:	88 2f       	mov	r24, r24
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	ac 01       	movw	r20, r24
     dda:	88 89       	ldd	r24, Y+16	; 0x10
     ddc:	88 2f       	mov	r24, r24
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	9c 01       	movw	r18, r24
     de2:	2d 57       	subi	r18, 0x7D	; 125
     de4:	3f 4f       	sbci	r19, 0xFF	; 255
     de6:	ca 01       	movw	r24, r20
     de8:	b9 01       	movw	r22, r18
     dea:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <EEPROM_readByte>
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	a0 e2       	ldi	r26, 0x20	; 32
     df4:	b1 e4       	ldi	r27, 0x41	; 65
     df6:	8b 87       	std	Y+11, r24	; 0x0b
     df8:	9c 87       	std	Y+12, r25	; 0x0c
     dfa:	ad 87       	std	Y+13, r26	; 0x0d
     dfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dfe:	6b 85       	ldd	r22, Y+11	; 0x0b
     e00:	7c 85       	ldd	r23, Y+12	; 0x0c
     e02:	8d 85       	ldd	r24, Y+13	; 0x0d
     e04:	9e 85       	ldd	r25, Y+14	; 0x0e
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	4a e7       	ldi	r20, 0x7A	; 122
     e0c:	53 e4       	ldi	r21, 0x43	; 67
     e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e12:	dc 01       	movw	r26, r24
     e14:	cb 01       	movw	r24, r22
     e16:	8f 83       	std	Y+7, r24	; 0x07
     e18:	98 87       	std	Y+8, r25	; 0x08
     e1a:	a9 87       	std	Y+9, r26	; 0x09
     e1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e1e:	6f 81       	ldd	r22, Y+7	; 0x07
     e20:	78 85       	ldd	r23, Y+8	; 0x08
     e22:	89 85       	ldd	r24, Y+9	; 0x09
     e24:	9a 85       	ldd	r25, Y+10	; 0x0a
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	40 e8       	ldi	r20, 0x80	; 128
     e2c:	5f e3       	ldi	r21, 0x3F	; 63
     e2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e32:	88 23       	and	r24, r24
     e34:	2c f4       	brge	.+10     	; 0xe40 <verfiy_password_from_memory+0x8c>
		__ticks = 1;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	9e 83       	std	Y+6, r25	; 0x06
     e3c:	8d 83       	std	Y+5, r24	; 0x05
     e3e:	3f c0       	rjmp	.+126    	; 0xebe <verfiy_password_from_memory+0x10a>
	else if (__tmp > 65535)
     e40:	6f 81       	ldd	r22, Y+7	; 0x07
     e42:	78 85       	ldd	r23, Y+8	; 0x08
     e44:	89 85       	ldd	r24, Y+9	; 0x09
     e46:	9a 85       	ldd	r25, Y+10	; 0x0a
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	3f ef       	ldi	r19, 0xFF	; 255
     e4c:	4f e7       	ldi	r20, 0x7F	; 127
     e4e:	57 e4       	ldi	r21, 0x47	; 71
     e50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e54:	18 16       	cp	r1, r24
     e56:	4c f5       	brge	.+82     	; 0xeaa <verfiy_password_from_memory+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e58:	6b 85       	ldd	r22, Y+11	; 0x0b
     e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	40 e2       	ldi	r20, 0x20	; 32
     e66:	51 e4       	ldi	r21, 0x41	; 65
     e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	bc 01       	movw	r22, r24
     e72:	cd 01       	movw	r24, r26
     e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	9e 83       	std	Y+6, r25	; 0x06
     e7e:	8d 83       	std	Y+5, r24	; 0x05
     e80:	0f c0       	rjmp	.+30     	; 0xea0 <verfiy_password_from_memory+0xec>
     e82:	89 e1       	ldi	r24, 0x19	; 25
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	9c 83       	std	Y+4, r25	; 0x04
     e88:	8b 83       	std	Y+3, r24	; 0x03
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	9c 81       	ldd	r25, Y+4	; 0x04
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	f1 f7       	brne	.-4      	; 0xe8e <verfiy_password_from_memory+0xda>
     e92:	9c 83       	std	Y+4, r25	; 0x04
     e94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e96:	8d 81       	ldd	r24, Y+5	; 0x05
     e98:	9e 81       	ldd	r25, Y+6	; 0x06
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	9e 83       	std	Y+6, r25	; 0x06
     e9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ea0:	8d 81       	ldd	r24, Y+5	; 0x05
     ea2:	9e 81       	ldd	r25, Y+6	; 0x06
     ea4:	00 97       	sbiw	r24, 0x00	; 0
     ea6:	69 f7       	brne	.-38     	; 0xe82 <verfiy_password_from_memory+0xce>
     ea8:	14 c0       	rjmp	.+40     	; 0xed2 <verfiy_password_from_memory+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eaa:	6f 81       	ldd	r22, Y+7	; 0x07
     eac:	78 85       	ldd	r23, Y+8	; 0x08
     eae:	89 85       	ldd	r24, Y+9	; 0x09
     eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	9e 83       	std	Y+6, r25	; 0x06
     ebc:	8d 83       	std	Y+5, r24	; 0x05
     ebe:	8d 81       	ldd	r24, Y+5	; 0x05
     ec0:	9e 81       	ldd	r25, Y+6	; 0x06
     ec2:	9a 83       	std	Y+2, r25	; 0x02
     ec4:	89 83       	std	Y+1, r24	; 0x01
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	9a 81       	ldd	r25, Y+2	; 0x02
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	f1 f7       	brne	.-4      	; 0xeca <verfiy_password_from_memory+0x116>
     ece:	9a 83       	std	Y+2, r25	; 0x02
     ed0:	89 83       	std	Y+1, r24	; 0x01
 * if same return right pass else return wrong
 */
errors verfiy_password_from_memory(uint8 pass[])
{

	for (uint8 i = 0;i<5;i++)
     ed2:	88 89       	ldd	r24, Y+16	; 0x10
     ed4:	8f 5f       	subi	r24, 0xFF	; 255
     ed6:	88 8b       	std	Y+16, r24	; 0x10
     ed8:	88 89       	ldd	r24, Y+16	; 0x10
     eda:	85 30       	cpi	r24, 0x05	; 5
     edc:	08 f4       	brcc	.+2      	; 0xee0 <verfiy_password_from_memory+0x12c>
     ede:	78 cf       	rjmp	.-272    	; 0xdd0 <verfiy_password_from_memory+0x1c>
		EEPROM_readByte(1+i, Pass_EEPROM+i);//saving the pass in eeprom in the arr
											  //pass_in_memory is the arr name and +i to increment the ptr as the function takes a ptr
		_delay_ms(10); // this delay is used between each two operations done on the eeprom
	}

	for(uint8 i =0;i<5;i++)
     ee0:	1f 86       	std	Y+15, r1	; 0x0f
     ee2:	18 c0       	rjmp	.+48     	; 0xf14 <verfiy_password_from_memory+0x160>
	{
		if(pass[i]!=Pass_EEPROM[i])
     ee4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	89 89       	ldd	r24, Y+17	; 0x11
     eec:	9a 89       	ldd	r25, Y+18	; 0x12
     eee:	fc 01       	movw	r30, r24
     ef0:	e2 0f       	add	r30, r18
     ef2:	f3 1f       	adc	r31, r19
     ef4:	20 81       	ld	r18, Z
     ef6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ef8:	88 2f       	mov	r24, r24
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	fc 01       	movw	r30, r24
     efe:	ed 57       	subi	r30, 0x7D	; 125
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	80 81       	ld	r24, Z
     f04:	28 17       	cp	r18, r24
     f06:	19 f0       	breq	.+6      	; 0xf0e <verfiy_password_from_memory+0x15a>
			return wrong_password;
     f08:	82 e0       	ldi	r24, 0x02	; 2
     f0a:	8b 8b       	std	Y+19, r24	; 0x13
     f0c:	08 c0       	rjmp	.+16     	; 0xf1e <verfiy_password_from_memory+0x16a>
		EEPROM_readByte(1+i, Pass_EEPROM+i);//saving the pass in eeprom in the arr
											  //pass_in_memory is the arr name and +i to increment the ptr as the function takes a ptr
		_delay_ms(10); // this delay is used between each two operations done on the eeprom
	}

	for(uint8 i =0;i<5;i++)
     f0e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f10:	8f 5f       	subi	r24, 0xFF	; 255
     f12:	8f 87       	std	Y+15, r24	; 0x0f
     f14:	8f 85       	ldd	r24, Y+15	; 0x0f
     f16:	85 30       	cpi	r24, 0x05	; 5
     f18:	28 f3       	brcs	.-54     	; 0xee4 <verfiy_password_from_memory+0x130>
	{
		if(pass[i]!=Pass_EEPROM[i])
			return wrong_password;
	}
	return right_password;
     f1a:	83 e0       	ldi	r24, 0x03	; 3
     f1c:	8b 8b       	std	Y+19, r24	; 0x13
     f1e:	8b 89       	ldd	r24, Y+19	; 0x13
}
     f20:	63 96       	adiw	r28, 0x13	; 19
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <Get_Pass_AND_Check>:

/*
 * receives two pass and check if differ return failed, if same return same
 */
void Get_Pass_AND_Check (void)
{
     f32:	0f 93       	push	r16
     f34:	1f 93       	push	r17
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	61 97       	sbiw	r28, 0x11	; 17
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
     f4a:	2f c0       	rjmp	.+94     	; 0xfaa <Get_Pass_AND_Check+0x78>
	while(status==failed_to_save)
	{

		for (uint8 i=0; i<5;i++)
     f4c:	19 8a       	std	Y+17, r1	; 0x11
     f4e:	0c c0       	rjmp	.+24     	; 0xf68 <Get_Pass_AND_Check+0x36>
	 		{
	 			Pass1_Arry[i]=UART_receive_byte();
     f50:	89 89       	ldd	r24, Y+17	; 0x11
     f52:	08 2f       	mov	r16, r24
     f54:	10 e0       	ldi	r17, 0x00	; 0
     f56:	0e 94 86 10 	call	0x210c	; 0x210c <UART_receive_byte>
     f5a:	f8 01       	movw	r30, r16
     f5c:	e2 58       	subi	r30, 0x82	; 130
     f5e:	ff 4f       	sbci	r31, 0xFF	; 255
     f60:	80 83       	st	Z, r24
void Get_Pass_AND_Check (void)
{
	while(status==failed_to_save)
	{

		for (uint8 i=0; i<5;i++)
     f62:	89 89       	ldd	r24, Y+17	; 0x11
     f64:	8f 5f       	subi	r24, 0xFF	; 255
     f66:	89 8b       	std	Y+17, r24	; 0x11
     f68:	89 89       	ldd	r24, Y+17	; 0x11
     f6a:	85 30       	cpi	r24, 0x05	; 5
     f6c:	88 f3       	brcs	.-30     	; 0xf50 <Get_Pass_AND_Check+0x1e>
	 		{
	 			Pass1_Arry[i]=UART_receive_byte();
	 		}
	 		for (uint8 i=0; i<5;i++)
     f6e:	18 8a       	std	Y+16, r1	; 0x10
     f70:	0c c0       	rjmp	.+24     	; 0xf8a <Get_Pass_AND_Check+0x58>
	 		{
	 			Pass2_Arry[i]=UART_receive_byte();
     f72:	88 89       	ldd	r24, Y+16	; 0x10
     f74:	08 2f       	mov	r16, r24
     f76:	10 e0       	ldi	r17, 0x00	; 0
     f78:	0e 94 86 10 	call	0x210c	; 0x210c <UART_receive_byte>
     f7c:	f8 01       	movw	r30, r16
     f7e:	e8 57       	subi	r30, 0x78	; 120
     f80:	ff 4f       	sbci	r31, 0xFF	; 255
     f82:	80 83       	st	Z, r24

		for (uint8 i=0; i<5;i++)
	 		{
	 			Pass1_Arry[i]=UART_receive_byte();
	 		}
	 		for (uint8 i=0; i<5;i++)
     f84:	88 89       	ldd	r24, Y+16	; 0x10
     f86:	8f 5f       	subi	r24, 0xFF	; 255
     f88:	88 8b       	std	Y+16, r24	; 0x10
     f8a:	88 89       	ldd	r24, Y+16	; 0x10
     f8c:	85 30       	cpi	r24, 0x05	; 5
     f8e:	88 f3       	brcs	.-30     	; 0xf72 <Get_Pass_AND_Check+0x40>
	 		{
	 			Pass2_Arry[i]=UART_receive_byte();
	 		}
	 		status = write_in_memory(Pass1_Arry, Pass2_Arry);
     f90:	8e e7       	ldi	r24, 0x7E	; 126
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	28 e8       	ldi	r18, 0x88	; 136
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	b9 01       	movw	r22, r18
     f9a:	0e 94 a3 05 	call	0xb46	; 0xb46 <write_in_memory>
     f9e:	80 93 8d 00 	sts	0x008D, r24
	 		UART_send_byte(status);
     fa2:	80 91 8d 00 	lds	r24, 0x008D
     fa6:	0e 94 6f 10 	call	0x20de	; 0x20de <UART_send_byte>
/*
 * receives two pass and check if differ return failed, if same return same
 */
void Get_Pass_AND_Check (void)
{
	while(status==failed_to_save)
     faa:	80 91 8d 00 	lds	r24, 0x008D
     fae:	88 23       	and	r24, r24
     fb0:	69 f2       	breq	.-102    	; 0xf4c <Get_Pass_AND_Check+0x1a>
	 			Pass2_Arry[i]=UART_receive_byte();
	 		}
	 		status = write_in_memory(Pass1_Arry, Pass2_Arry);
	 		UART_send_byte(status);
	}
	 if (status == succeeded_to_save)
     fb2:	80 91 8d 00 	lds	r24, 0x008D
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	09 f0       	breq	.+2      	; 0xfbc <Get_Pass_AND_Check+0x8a>
     fba:	8f c0       	rjmp	.+286    	; 0x10da <Get_Pass_AND_Check+0x1a8>
	 {

	 	uint8 i;
		 for( i =0;i<5;i++)
     fbc:	1f 86       	std	Y+15, r1	; 0x0f
     fbe:	87 c0       	rjmp	.+270    	; 0x10ce <Get_Pass_AND_Check+0x19c>
	 	{
			 BUZZER_ONN ();
     fc0:	0e 94 12 0a 	call	0x1424	; 0x1424 <BUZZER_ONN>
	 		EEPROM_writeByte(5+i, Pass1_Arry[i]); // 1+i is the address of the location in the eeprom that i'm doing to save in it the 5-byte pass								// each byte is a number
     fc4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fc6:	88 2f       	mov	r24, r24
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	05 96       	adiw	r24, 0x05	; 5
     fcc:	ac 01       	movw	r20, r24
     fce:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd0:	88 2f       	mov	r24, r24
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	fc 01       	movw	r30, r24
     fd6:	e2 58       	subi	r30, 0x82	; 130
     fd8:	ff 4f       	sbci	r31, 0xFF	; 255
     fda:	20 81       	ld	r18, Z
     fdc:	ca 01       	movw	r24, r20
     fde:	62 2f       	mov	r22, r18
     fe0:	0e 94 2a 0a 	call	0x1454	; 0x1454 <EEPROM_writeByte>
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	a0 ea       	ldi	r26, 0xA0	; 160
     fea:	b1 e4       	ldi	r27, 0x41	; 65
     fec:	8b 87       	std	Y+11, r24	; 0x0b
     fee:	9c 87       	std	Y+12, r25	; 0x0c
     ff0:	ad 87       	std	Y+13, r26	; 0x0d
     ff2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ff6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ff8:	8d 85       	ldd	r24, Y+13	; 0x0d
     ffa:	9e 85       	ldd	r25, Y+14	; 0x0e
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	4a e7       	ldi	r20, 0x7A	; 122
    1002:	53 e4       	ldi	r21, 0x43	; 67
    1004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	8f 83       	std	Y+7, r24	; 0x07
    100e:	98 87       	std	Y+8, r25	; 0x08
    1010:	a9 87       	std	Y+9, r26	; 0x09
    1012:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1014:	6f 81       	ldd	r22, Y+7	; 0x07
    1016:	78 85       	ldd	r23, Y+8	; 0x08
    1018:	89 85       	ldd	r24, Y+9	; 0x09
    101a:	9a 85       	ldd	r25, Y+10	; 0x0a
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	40 e8       	ldi	r20, 0x80	; 128
    1022:	5f e3       	ldi	r21, 0x3F	; 63
    1024:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1028:	88 23       	and	r24, r24
    102a:	2c f4       	brge	.+10     	; 0x1036 <Get_Pass_AND_Check+0x104>
		__ticks = 1;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	9e 83       	std	Y+6, r25	; 0x06
    1032:	8d 83       	std	Y+5, r24	; 0x05
    1034:	3f c0       	rjmp	.+126    	; 0x10b4 <Get_Pass_AND_Check+0x182>
	else if (__tmp > 65535)
    1036:	6f 81       	ldd	r22, Y+7	; 0x07
    1038:	78 85       	ldd	r23, Y+8	; 0x08
    103a:	89 85       	ldd	r24, Y+9	; 0x09
    103c:	9a 85       	ldd	r25, Y+10	; 0x0a
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	3f ef       	ldi	r19, 0xFF	; 255
    1042:	4f e7       	ldi	r20, 0x7F	; 127
    1044:	57 e4       	ldi	r21, 0x47	; 71
    1046:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    104a:	18 16       	cp	r1, r24
    104c:	4c f5       	brge	.+82     	; 0x10a0 <Get_Pass_AND_Check+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    104e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1050:	7c 85       	ldd	r23, Y+12	; 0x0c
    1052:	8d 85       	ldd	r24, Y+13	; 0x0d
    1054:	9e 85       	ldd	r25, Y+14	; 0x0e
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	40 e2       	ldi	r20, 0x20	; 32
    105c:	51 e4       	ldi	r21, 0x41	; 65
    105e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	bc 01       	movw	r22, r24
    1068:	cd 01       	movw	r24, r26
    106a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	9e 83       	std	Y+6, r25	; 0x06
    1074:	8d 83       	std	Y+5, r24	; 0x05
    1076:	0f c0       	rjmp	.+30     	; 0x1096 <Get_Pass_AND_Check+0x164>
    1078:	89 e1       	ldi	r24, 0x19	; 25
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	9c 83       	std	Y+4, r25	; 0x04
    107e:	8b 83       	std	Y+3, r24	; 0x03
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	9c 81       	ldd	r25, Y+4	; 0x04
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	f1 f7       	brne	.-4      	; 0x1084 <Get_Pass_AND_Check+0x152>
    1088:	9c 83       	std	Y+4, r25	; 0x04
    108a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    108c:	8d 81       	ldd	r24, Y+5	; 0x05
    108e:	9e 81       	ldd	r25, Y+6	; 0x06
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	9e 83       	std	Y+6, r25	; 0x06
    1094:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1096:	8d 81       	ldd	r24, Y+5	; 0x05
    1098:	9e 81       	ldd	r25, Y+6	; 0x06
    109a:	00 97       	sbiw	r24, 0x00	; 0
    109c:	69 f7       	brne	.-38     	; 0x1078 <Get_Pass_AND_Check+0x146>
    109e:	14 c0       	rjmp	.+40     	; 0x10c8 <Get_Pass_AND_Check+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a0:	6f 81       	ldd	r22, Y+7	; 0x07
    10a2:	78 85       	ldd	r23, Y+8	; 0x08
    10a4:	89 85       	ldd	r24, Y+9	; 0x09
    10a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	9e 83       	std	Y+6, r25	; 0x06
    10b2:	8d 83       	std	Y+5, r24	; 0x05
    10b4:	8d 81       	ldd	r24, Y+5	; 0x05
    10b6:	9e 81       	ldd	r25, Y+6	; 0x06
    10b8:	9a 83       	std	Y+2, r25	; 0x02
    10ba:	89 83       	std	Y+1, r24	; 0x01
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	9a 81       	ldd	r25, Y+2	; 0x02
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	f1 f7       	brne	.-4      	; 0x10c0 <Get_Pass_AND_Check+0x18e>
    10c4:	9a 83       	std	Y+2, r25	; 0x02
    10c6:	89 83       	std	Y+1, r24	; 0x01
	}
	 if (status == succeeded_to_save)
	 {

	 	uint8 i;
		 for( i =0;i<5;i++)
    10c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ca:	8f 5f       	subi	r24, 0xFF	; 255
    10cc:	8f 87       	std	Y+15, r24	; 0x0f
    10ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    10d0:	85 30       	cpi	r24, 0x05	; 5
    10d2:	08 f4       	brcc	.+2      	; 0x10d6 <Get_Pass_AND_Check+0x1a4>
    10d4:	75 cf       	rjmp	.-278    	; 0xfc0 <Get_Pass_AND_Check+0x8e>
	 	{
			 BUZZER_ONN ();
	 		EEPROM_writeByte(5+i, Pass1_Arry[i]); // 1+i is the address of the location in the eeprom that i'm doing to save in it the 5-byte pass								// each byte is a number
	 		_delay_ms(20); // this delay is used between each two operations done on the eeprom
	 	}
	 		BUZZER_OFF();
    10d6:	0e 94 1e 0a 	call	0x143c	; 0x143c <BUZZER_OFF>
	 }

}
    10da:	61 96       	adiw	r28, 0x11	; 17
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	08 95       	ret

000010f0 <main>:


void main (void)
{
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	6c 97       	sbiw	r28, 0x1c	; 28
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61

	uint8 choice;

	UART_config config_uart ={eight,disabled,one_bit,9600};
    1108:	9e 01       	movw	r18, r28
    110a:	2b 5f       	subi	r18, 0xFB	; 251
    110c:	3f 4f       	sbci	r19, 0xFF	; 255
    110e:	3c 8b       	std	Y+20, r19	; 0x14
    1110:	2b 8b       	std	Y+19, r18	; 0x13
    1112:	83 e7       	ldi	r24, 0x73	; 115
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	9e 8b       	std	Y+22, r25	; 0x16
    1118:	8d 8b       	std	Y+21, r24	; 0x15
    111a:	97 e0       	ldi	r25, 0x07	; 7
    111c:	9f 8b       	std	Y+23, r25	; 0x17
    111e:	ed 89       	ldd	r30, Y+21	; 0x15
    1120:	fe 89       	ldd	r31, Y+22	; 0x16
    1122:	00 80       	ld	r0, Z
    1124:	2d 89       	ldd	r18, Y+21	; 0x15
    1126:	3e 89       	ldd	r19, Y+22	; 0x16
    1128:	2f 5f       	subi	r18, 0xFF	; 255
    112a:	3f 4f       	sbci	r19, 0xFF	; 255
    112c:	3e 8b       	std	Y+22, r19	; 0x16
    112e:	2d 8b       	std	Y+21, r18	; 0x15
    1130:	eb 89       	ldd	r30, Y+19	; 0x13
    1132:	fc 89       	ldd	r31, Y+20	; 0x14
    1134:	00 82       	st	Z, r0
    1136:	2b 89       	ldd	r18, Y+19	; 0x13
    1138:	3c 89       	ldd	r19, Y+20	; 0x14
    113a:	2f 5f       	subi	r18, 0xFF	; 255
    113c:	3f 4f       	sbci	r19, 0xFF	; 255
    113e:	3c 8b       	std	Y+20, r19	; 0x14
    1140:	2b 8b       	std	Y+19, r18	; 0x13
    1142:	3f 89       	ldd	r19, Y+23	; 0x17
    1144:	31 50       	subi	r19, 0x01	; 1
    1146:	3f 8b       	std	Y+23, r19	; 0x17
    1148:	8f 89       	ldd	r24, Y+23	; 0x17
    114a:	88 23       	and	r24, r24
    114c:	41 f7       	brne	.-48     	; 0x111e <main+0x2e>
	UART_init(& config_uart);
    114e:	ce 01       	movw	r24, r28
    1150:	05 96       	adiw	r24, 0x05	; 5
    1152:	0e 94 06 10 	call	0x200c	; 0x200c <UART_init>

	TWI_ConfigType config_twi ={0b00000010,400000}; // this is address 1 since address is represented in 7 bits and lsb is for r/w
    1156:	fe 01       	movw	r30, r28
    1158:	3c 96       	adiw	r30, 0x0c	; 12
    115a:	f9 8f       	std	Y+25, r31	; 0x19
    115c:	e8 8f       	std	Y+24, r30	; 0x18
    115e:	2e e6       	ldi	r18, 0x6E	; 110
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	3b 8f       	std	Y+27, r19	; 0x1b
    1164:	2a 8f       	std	Y+26, r18	; 0x1a
    1166:	35 e0       	ldi	r19, 0x05	; 5
    1168:	3c 8f       	std	Y+28, r19	; 0x1c
    116a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    116c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    116e:	00 80       	ld	r0, Z
    1170:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1172:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1174:	2f 5f       	subi	r18, 0xFF	; 255
    1176:	3f 4f       	sbci	r19, 0xFF	; 255
    1178:	3b 8f       	std	Y+27, r19	; 0x1b
    117a:	2a 8f       	std	Y+26, r18	; 0x1a
    117c:	e8 8d       	ldd	r30, Y+24	; 0x18
    117e:	f9 8d       	ldd	r31, Y+25	; 0x19
    1180:	00 82       	st	Z, r0
    1182:	28 8d       	ldd	r18, Y+24	; 0x18
    1184:	39 8d       	ldd	r19, Y+25	; 0x19
    1186:	2f 5f       	subi	r18, 0xFF	; 255
    1188:	3f 4f       	sbci	r19, 0xFF	; 255
    118a:	39 8f       	std	Y+25, r19	; 0x19
    118c:	28 8f       	std	Y+24, r18	; 0x18
    118e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1190:	31 50       	subi	r19, 0x01	; 1
    1192:	3c 8f       	std	Y+28, r19	; 0x1c
    1194:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1196:	88 23       	and	r24, r24
    1198:	41 f7       	brne	.-48     	; 0x116a <main+0x7a>
	TWI_init( & config_twi); // config of twi (i2c) to communicate with eeprom
    119a:	ce 01       	movw	r24, r28
    119c:	0c 96       	adiw	r24, 0x0c	; 12
    119e:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <TWI_init>

	MOTOR_init();
    11a2:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <MOTOR_init>
	BUZZER_init();
    11a6:	0e 94 01 0a 	call	0x1402	; 0x1402 <BUZZER_init>

	SREG |= (1<<7);
    11aa:	af e5       	ldi	r26, 0x5F	; 95
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	ef e5       	ldi	r30, 0x5F	; 95
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	80 68       	ori	r24, 0x80	; 128
    11b6:	8c 93       	st	X, r24

	Get_Pass_AND_Check();  // receives two pass and check if differ keep asking for same pass,
    11b8:	0e 94 99 07 	call	0xf32	; 0xf32 <Get_Pass_AND_Check>


	while(1)
	{
		//RECEIVE FROM MC1 - ALWAYS READY -RECEIVING
		choice = UART_receive_byte();
    11bc:	0e 94 86 10 	call	0x210c	; 0x210c <UART_receive_byte>
    11c0:	8c 83       	std	Y+4, r24	; 0x04

		switch(choice)
    11c2:	8c 81       	ldd	r24, Y+4	; 0x04
    11c4:	e8 2f       	mov	r30, r24
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	fa 8b       	std	Y+18, r31	; 0x12
    11ca:	e9 8b       	std	Y+17, r30	; 0x11
    11cc:	29 89       	ldd	r18, Y+17	; 0x11
    11ce:	3a 89       	ldd	r19, Y+18	; 0x12
    11d0:	23 30       	cpi	r18, 0x03	; 3
    11d2:	31 05       	cpc	r19, r1
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <main+0xe8>
    11d6:	91 c0       	rjmp	.+290    	; 0x12fa <main+0x20a>
    11d8:	89 89       	ldd	r24, Y+17	; 0x11
    11da:	9a 89       	ldd	r25, Y+18	; 0x12
    11dc:	84 30       	cpi	r24, 0x04	; 4
    11de:	91 05       	cpc	r25, r1
    11e0:	84 f4       	brge	.+32     	; 0x1202 <main+0x112>
    11e2:	e9 89       	ldd	r30, Y+17	; 0x11
    11e4:	fa 89       	ldd	r31, Y+18	; 0x12
    11e6:	e1 30       	cpi	r30, 0x01	; 1
    11e8:	f1 05       	cpc	r31, r1
    11ea:	d1 f1       	breq	.+116    	; 0x1260 <main+0x170>
    11ec:	29 89       	ldd	r18, Y+17	; 0x11
    11ee:	3a 89       	ldd	r19, Y+18	; 0x12
    11f0:	22 30       	cpi	r18, 0x02	; 2
    11f2:	31 05       	cpc	r19, r1
    11f4:	0c f0       	brlt	.+2      	; 0x11f8 <main+0x108>
    11f6:	68 c0       	rjmp	.+208    	; 0x12c8 <main+0x1d8>
    11f8:	89 89       	ldd	r24, Y+17	; 0x11
    11fa:	9a 89       	ldd	r25, Y+18	; 0x12
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	a1 f0       	breq	.+40     	; 0x1228 <main+0x138>
    1200:	dd cf       	rjmp	.-70     	; 0x11bc <main+0xcc>
    1202:	e9 89       	ldd	r30, Y+17	; 0x11
    1204:	fa 89       	ldd	r31, Y+18	; 0x12
    1206:	e5 30       	cpi	r30, 0x05	; 5
    1208:	f1 05       	cpc	r31, r1
    120a:	09 f4       	brne	.+2      	; 0x120e <main+0x11e>
    120c:	62 c0       	rjmp	.+196    	; 0x12d2 <main+0x1e2>
    120e:	29 89       	ldd	r18, Y+17	; 0x11
    1210:	3a 89       	ldd	r19, Y+18	; 0x12
    1212:	25 30       	cpi	r18, 0x05	; 5
    1214:	31 05       	cpc	r19, r1
    1216:	0c f4       	brge	.+2      	; 0x121a <main+0x12a>
    1218:	73 c0       	rjmp	.+230    	; 0x1300 <main+0x210>
    121a:	89 89       	ldd	r24, Y+17	; 0x11
    121c:	9a 89       	ldd	r25, Y+18	; 0x12
    121e:	86 30       	cpi	r24, 0x06	; 6
    1220:	91 05       	cpc	r25, r1
    1222:	09 f4       	brne	.+2      	; 0x1226 <main+0x136>
    1224:	5b c0       	rjmp	.+182    	; 0x12dc <main+0x1ec>
    1226:	ca cf       	rjmp	.-108    	; 0x11bc <main+0xcc>
		{
		case Check_this_password: //INCASE CHECK PASS WITH MEMOMRY

			for(uint8 i=0;i<5;i++)
    1228:	1b 82       	std	Y+3, r1	; 0x03
    122a:	0c c0       	rjmp	.+24     	; 0x1244 <main+0x154>
			{
				Pass1_Arry[i]= UART_receive_byte();
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	08 2f       	mov	r16, r24
    1230:	10 e0       	ldi	r17, 0x00	; 0
    1232:	0e 94 86 10 	call	0x210c	; 0x210c <UART_receive_byte>
    1236:	f8 01       	movw	r30, r16
    1238:	e2 58       	subi	r30, 0x82	; 130
    123a:	ff 4f       	sbci	r31, 0xFF	; 255
    123c:	80 83       	st	Z, r24

		switch(choice)
		{
		case Check_this_password: //INCASE CHECK PASS WITH MEMOMRY

			for(uint8 i=0;i<5;i++)
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	8f 5f       	subi	r24, 0xFF	; 255
    1242:	8b 83       	std	Y+3, r24	; 0x03
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	85 30       	cpi	r24, 0x05	; 5
    1248:	88 f3       	brcs	.-30     	; 0x122c <main+0x13c>
			{
				Pass1_Arry[i]= UART_receive_byte();
			}

			status = verfiy_password_from_memory(Pass1_Arry); //SEND GLOBAL PASS TO EPROM
    124a:	8e e7       	ldi	r24, 0x7E	; 126
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <verfiy_password_from_memory>
    1252:	80 93 8d 00 	sts	0x008D, r24
			UART_send_byte(status);
    1256:	80 91 8d 00 	lds	r24, 0x008D
    125a:	0e 94 6f 10 	call	0x20de	; 0x20de <UART_send_byte>
    125e:	ae cf       	rjmp	.-164    	; 0x11bc <main+0xcc>
			break;

		case save_new_pass: //when choose to change pass then begin to send two passwords. the same bulk at the beginning of the main
			do{
				for (uint8 i=0; i<5;i++)
    1260:	1a 82       	std	Y+2, r1	; 0x02
    1262:	0c c0       	rjmp	.+24     	; 0x127c <main+0x18c>
					Pass1_Arry[i]=UART_receive_byte();
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	08 2f       	mov	r16, r24
    1268:	10 e0       	ldi	r17, 0x00	; 0
    126a:	0e 94 86 10 	call	0x210c	; 0x210c <UART_receive_byte>
    126e:	f8 01       	movw	r30, r16
    1270:	e2 58       	subi	r30, 0x82	; 130
    1272:	ff 4f       	sbci	r31, 0xFF	; 255
    1274:	80 83       	st	Z, r24
			UART_send_byte(status);
			break;

		case save_new_pass: //when choose to change pass then begin to send two passwords. the same bulk at the beginning of the main
			do{
				for (uint8 i=0; i<5;i++)
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	8f 5f       	subi	r24, 0xFF	; 255
    127a:	8a 83       	std	Y+2, r24	; 0x02
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	85 30       	cpi	r24, 0x05	; 5
    1280:	88 f3       	brcs	.-30     	; 0x1264 <main+0x174>
					Pass1_Arry[i]=UART_receive_byte();
				for (uint8 i=0; i<5;i++)
    1282:	19 82       	std	Y+1, r1	; 0x01
    1284:	0c c0       	rjmp	.+24     	; 0x129e <main+0x1ae>
					Pass2_Arry[i]=UART_receive_byte();
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	08 2f       	mov	r16, r24
    128a:	10 e0       	ldi	r17, 0x00	; 0
    128c:	0e 94 86 10 	call	0x210c	; 0x210c <UART_receive_byte>
    1290:	f8 01       	movw	r30, r16
    1292:	e8 57       	subi	r30, 0x78	; 120
    1294:	ff 4f       	sbci	r31, 0xFF	; 255
    1296:	80 83       	st	Z, r24

		case save_new_pass: //when choose to change pass then begin to send two passwords. the same bulk at the beginning of the main
			do{
				for (uint8 i=0; i<5;i++)
					Pass1_Arry[i]=UART_receive_byte();
				for (uint8 i=0; i<5;i++)
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	8f 5f       	subi	r24, 0xFF	; 255
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	85 30       	cpi	r24, 0x05	; 5
    12a2:	88 f3       	brcs	.-30     	; 0x1286 <main+0x196>
					Pass2_Arry[i]=UART_receive_byte();
				status = write_in_memory(Pass1_Arry, Pass2_Arry); //RETURN FAILED OR SECCUSE
    12a4:	8e e7       	ldi	r24, 0x7E	; 126
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	28 e8       	ldi	r18, 0x88	; 136
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	b9 01       	movw	r22, r18
    12ae:	0e 94 a3 05 	call	0xb46	; 0xb46 <write_in_memory>
    12b2:	80 93 8d 00 	sts	0x008D, r24
				UART_send_byte(status);
    12b6:	80 91 8d 00 	lds	r24, 0x008D
    12ba:	0e 94 6f 10 	call	0x20de	; 0x20de <UART_send_byte>
			 }while(status == failed_to_save);
    12be:	80 91 8d 00 	lds	r24, 0x008D
    12c2:	88 23       	and	r24, r24
    12c4:	69 f2       	breq	.-102    	; 0x1260 <main+0x170>
    12c6:	7a cf       	rjmp	.-268    	; 0x11bc <main+0xcc>
				break;

		case Open:  ///RECIVED TO OPEN DOOR
			Motor_Rotate(Clockwise, 100);
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	64 e6       	ldi	r22, 0x64	; 100
    12cc:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <Motor_Rotate>
    12d0:	75 cf       	rjmp	.-278    	; 0x11bc <main+0xcc>
			break;

		case Holding:	//RECIEVE TO HOLD DOOR
			Motor_Rotate(Stop, 0);
    12d2:	82 e0       	ldi	r24, 0x02	; 2
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <Motor_Rotate>
    12da:	70 cf       	rjmp	.-288    	; 0x11bc <main+0xcc>
			break;

		case Close:	//RECIEVE TO CLOSE DOOR
			Motor_Rotate(Anti_Clockwise, 100);
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	64 e6       	ldi	r22, 0x64	; 100
    12e0:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <Motor_Rotate>
			Timer_1_delay(2);
    12e4:	62 e0       	ldi	r22, 0x02	; 2
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	0e 94 83 09 	call	0x1306	; 0x1306 <Timer_1_delay>
			Motor_Rotate(Stop, 0);
    12f0:	82 e0       	ldi	r24, 0x02	; 2
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <Motor_Rotate>
    12f8:	61 cf       	rjmp	.-318    	; 0x11bc <main+0xcc>
			break;


		case Buzzer_ONN:  //TURN BUZZER ONN
			BUZZER_ONN();
    12fa:	0e 94 12 0a 	call	0x1424	; 0x1424 <BUZZER_ONN>
    12fe:	5e cf       	rjmp	.-324    	; 0x11bc <main+0xcc>
			break;

		case Buzzer_OFF: //TURN OFF
			BUZZER_OFF();
    1300:	0e 94 1e 0a 	call	0x143c	; 0x143c <BUZZER_OFF>
    1304:	5b cf       	rjmp	.-330    	; 0x11bc <main+0xcc>

00001306 <Timer_1_delay>:

/*
 * SAME AS MC1
 */
void Timer_1_delay(uint32 delay)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	00 d0       	rcall	.+0      	; 0x130c <Timer_1_delay+0x6>
    130c:	00 d0       	rcall	.+0      	; 0x130e <Timer_1_delay+0x8>
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	69 83       	std	Y+1, r22	; 0x01
    1314:	7a 83       	std	Y+2, r23	; 0x02
    1316:	8b 83       	std	Y+3, r24	; 0x03
    1318:	9c 83       	std	Y+4, r25	; 0x04

	//Initialize timer1 with the configuration structure
	Timer_1_init(&Timer1_ConfigStruct);
    131a:	88 e6       	ldi	r24, 0x68	; 104
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <Timer_1_init>

	//Set the callback function for timer1
	Timer_1_setCallBack(&Timer_1_CallBack);
    1322:	8f ea       	ldi	r24, 0xAF	; 175
    1324:	99 e0       	ldi	r25, 0x09	; 9
    1326:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <Timer_1_setCallBack>

	//Stay in the loop as long as the required number of delay seconds hasn't elapsed
	while(seconds != delay);
    132a:	80 91 7b 00 	lds	r24, 0x007B
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	40 e0       	ldi	r20, 0x00	; 0
    1334:	50 e0       	ldi	r21, 0x00	; 0
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	9a 81       	ldd	r25, Y+2	; 0x02
    133a:	ab 81       	ldd	r26, Y+3	; 0x03
    133c:	bc 81       	ldd	r27, Y+4	; 0x04
    133e:	28 17       	cp	r18, r24
    1340:	39 07       	cpc	r19, r25
    1342:	4a 07       	cpc	r20, r26
    1344:	5b 07       	cpc	r21, r27
    1346:	89 f7       	brne	.-30     	; 0x132a <Timer_1_delay+0x24>

	//Deinitialize timer1
	Timer_1_deInit();
    1348:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <Timer_1_deInit>

	//Reset the seconds variable
	seconds = 0;
    134c:	10 92 7b 00 	sts	0x007B, r1
}
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	08 95       	ret

0000135e <Timer_1_CallBack>:

/*
 * Description: increment the seconds variable each time the function is called
 */
void Timer_1_CallBack(void)
{
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
	seconds++;
    1366:	80 91 7b 00 	lds	r24, 0x007B
    136a:	8f 5f       	subi	r24, 0xFF	; 255
    136c:	80 93 7b 00 	sts	0x007B, r24
}
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <PWM_Timer0_init>:
#include "std_types.h"
#include "Timer0.h"


void PWM_Timer0_init(void)
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
	OCR0=0;
    137e:	ec e5       	ldi	r30, 0x5C	; 92
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	10 82       	st	Z, r1
	DDRB  = DDRB | (1<<PB3);
    1384:	a7 e3       	ldi	r26, 0x37	; 55
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e7 e3       	ldi	r30, 0x37	; 55
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	88 60       	ori	r24, 0x08	; 8
    1390:	8c 93       	st	X, r24
	TCCR0=(1<<WGM00)|(1<<WGM01)|(1<<CS01)|(1<<COM01);
    1392:	e3 e5       	ldi	r30, 0x53	; 83
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	8a e6       	ldi	r24, 0x6A	; 106
    1398:	80 83       	st	Z, r24
}
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <PWM_Timer0_Start>:

void PWM_Timer0_Start(uint8 duty_cycle)
{
    13a0:	0f 93       	push	r16
    13a2:	1f 93       	push	r17
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	0f 92       	push	r0
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = (uint8)(((uint32)(duty_cycle*255))/100);
    13b0:	0c e5       	ldi	r16, 0x5C	; 92
    13b2:	10 e0       	ldi	r17, 0x00	; 0
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	48 2f       	mov	r20, r24
    13b8:	50 e0       	ldi	r21, 0x00	; 0
    13ba:	ca 01       	movw	r24, r20
    13bc:	9c 01       	movw	r18, r24
    13be:	22 0f       	add	r18, r18
    13c0:	33 1f       	adc	r19, r19
    13c2:	c9 01       	movw	r24, r18
    13c4:	96 95       	lsr	r25
    13c6:	98 2f       	mov	r25, r24
    13c8:	88 27       	eor	r24, r24
    13ca:	97 95       	ror	r25
    13cc:	87 95       	ror	r24
    13ce:	82 1b       	sub	r24, r18
    13d0:	93 0b       	sbc	r25, r19
    13d2:	84 0f       	add	r24, r20
    13d4:	95 1f       	adc	r25, r21
    13d6:	aa 27       	eor	r26, r26
    13d8:	97 fd       	sbrc	r25, 7
    13da:	a0 95       	com	r26
    13dc:	ba 2f       	mov	r27, r26
    13de:	24 e6       	ldi	r18, 0x64	; 100
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	40 e0       	ldi	r20, 0x00	; 0
    13e4:	50 e0       	ldi	r21, 0x00	; 0
    13e6:	bc 01       	movw	r22, r24
    13e8:	cd 01       	movw	r24, r26
    13ea:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__udivmodsi4>
    13ee:	da 01       	movw	r26, r20
    13f0:	c9 01       	movw	r24, r18
    13f2:	f8 01       	movw	r30, r16
    13f4:	80 83       	st	Z, r24
}
    13f6:	0f 90       	pop	r0
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	1f 91       	pop	r17
    13fe:	0f 91       	pop	r16
    1400:	08 95       	ret

00001402 <BUZZER_init>:

#include"buzzer.h"
#include "gpio.h"

void BUZZER_init(void)
{
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID , PIN_OUTPUT);
    140a:	83 e0       	ldi	r24, 0x03	; 3
    140c:	64 e0       	ldi	r22, 0x04	; 4
    140e:	41 e0       	ldi	r20, 0x01	; 1
    1410:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_setupPinDirection>

	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    1414:	83 e0       	ldi	r24, 0x03	; 3
    1416:	64 e0       	ldi	r22, 0x04	; 4
    1418:	40 e0       	ldi	r20, 0x00	; 0
    141a:	0e 94 b6 0b 	call	0x176c	; 0x176c <GPIO_writePin>

}
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <BUZZER_ONN>:


void BUZZER_ONN (void)
{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    142c:	83 e0       	ldi	r24, 0x03	; 3
    142e:	64 e0       	ldi	r22, 0x04	; 4
    1430:	41 e0       	ldi	r20, 0x01	; 1
    1432:	0e 94 b6 0b 	call	0x176c	; 0x176c <GPIO_writePin>
}
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <BUZZER_OFF>:


void BUZZER_OFF (void)
{
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    1444:	83 e0       	ldi	r24, 0x03	; 3
    1446:	64 e0       	ldi	r22, 0x04	; 4
    1448:	40 e0       	ldi	r20, 0x00	; 0
    144a:	0e 94 b6 0b 	call	0x176c	; 0x176c <GPIO_writePin>
}
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "TWI.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	00 d0       	rcall	.+0      	; 0x145a <EEPROM_writeByte+0x6>
    145a:	00 d0       	rcall	.+0      	; 0x145c <EEPROM_writeByte+0x8>
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	9a 83       	std	Y+2, r25	; 0x02
    1462:	89 83       	std	Y+1, r24	; 0x01
    1464:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1466:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    146a:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <TWI_getStatus>
    146e:	88 30       	cpi	r24, 0x08	; 8
    1470:	11 f0       	breq	.+4      	; 0x1476 <EEPROM_writeByte+0x22>
        return ERROR;
    1472:	1c 82       	std	Y+4, r1	; 0x04
    1474:	28 c0       	rjmp	.+80     	; 0x14c6 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	9a 81       	ldd	r25, Y+2	; 0x02
    147a:	80 70       	andi	r24, 0x00	; 0
    147c:	97 70       	andi	r25, 0x07	; 7
    147e:	88 0f       	add	r24, r24
    1480:	89 2f       	mov	r24, r25
    1482:	88 1f       	adc	r24, r24
    1484:	99 0b       	sbc	r25, r25
    1486:	91 95       	neg	r25
    1488:	80 6a       	ori	r24, 0xA0	; 160
    148a:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    148e:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <TWI_getStatus>
    1492:	88 31       	cpi	r24, 0x18	; 24
    1494:	11 f0       	breq	.+4      	; 0x149a <EEPROM_writeByte+0x46>
        return ERROR; 
    1496:	1c 82       	std	Y+4, r1	; 0x04
    1498:	16 c0       	rjmp	.+44     	; 0x14c6 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    14a0:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <TWI_getStatus>
    14a4:	88 32       	cpi	r24, 0x28	; 40
    14a6:	11 f0       	breq	.+4      	; 0x14ac <EEPROM_writeByte+0x58>
        return ERROR;
    14a8:	1c 82       	std	Y+4, r1	; 0x04
    14aa:	0d c0       	rjmp	.+26     	; 0x14c6 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    14b2:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <TWI_getStatus>
    14b6:	88 32       	cpi	r24, 0x28	; 40
    14b8:	11 f0       	breq	.+4      	; 0x14be <EEPROM_writeByte+0x6a>
        return ERROR;
    14ba:	1c 82       	std	Y+4, r1	; 0x04
    14bc:	04 c0       	rjmp	.+8      	; 0x14c6 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    14be:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <TWI_stop>
	
    return SUCCESS;
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	8c 83       	std	Y+4, r24	; 0x04
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	00 d0       	rcall	.+0      	; 0x14dc <EEPROM_readByte+0x6>
    14dc:	00 d0       	rcall	.+0      	; 0x14de <EEPROM_readByte+0x8>
    14de:	0f 92       	push	r0
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	9a 83       	std	Y+2, r25	; 0x02
    14e6:	89 83       	std	Y+1, r24	; 0x01
    14e8:	7c 83       	std	Y+4, r23	; 0x04
    14ea:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    14ec:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    14f0:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <TWI_getStatus>
    14f4:	88 30       	cpi	r24, 0x08	; 8
    14f6:	11 f0       	breq	.+4      	; 0x14fc <EEPROM_readByte+0x26>
        return ERROR;
    14f8:	1d 82       	std	Y+5, r1	; 0x05
    14fa:	44 c0       	rjmp	.+136    	; 0x1584 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1500:	80 70       	andi	r24, 0x00	; 0
    1502:	97 70       	andi	r25, 0x07	; 7
    1504:	88 0f       	add	r24, r24
    1506:	89 2f       	mov	r24, r25
    1508:	88 1f       	adc	r24, r24
    150a:	99 0b       	sbc	r25, r25
    150c:	91 95       	neg	r25
    150e:	80 6a       	ori	r24, 0xA0	; 160
    1510:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1514:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <TWI_getStatus>
    1518:	88 31       	cpi	r24, 0x18	; 24
    151a:	11 f0       	breq	.+4      	; 0x1520 <EEPROM_readByte+0x4a>
        return ERROR;
    151c:	1d 82       	std	Y+5, r1	; 0x05
    151e:	32 c0       	rjmp	.+100    	; 0x1584 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1526:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <TWI_getStatus>
    152a:	88 32       	cpi	r24, 0x28	; 40
    152c:	11 f0       	breq	.+4      	; 0x1532 <EEPROM_readByte+0x5c>
        return ERROR;
    152e:	1d 82       	std	Y+5, r1	; 0x05
    1530:	29 c0       	rjmp	.+82     	; 0x1584 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1532:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1536:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <TWI_getStatus>
    153a:	80 31       	cpi	r24, 0x10	; 16
    153c:	11 f0       	breq	.+4      	; 0x1542 <EEPROM_readByte+0x6c>
        return ERROR;
    153e:	1d 82       	std	Y+5, r1	; 0x05
    1540:	21 c0       	rjmp	.+66     	; 0x1584 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA1) | ((u16addr & 0x0700)>>7)));
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	9a 81       	ldd	r25, Y+2	; 0x02
    1546:	80 70       	andi	r24, 0x00	; 0
    1548:	97 70       	andi	r25, 0x07	; 7
    154a:	88 0f       	add	r24, r24
    154c:	89 2f       	mov	r24, r25
    154e:	88 1f       	adc	r24, r24
    1550:	99 0b       	sbc	r25, r25
    1552:	91 95       	neg	r25
    1554:	81 6a       	ori	r24, 0xA1	; 161
    1556:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    155a:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <TWI_getStatus>
    155e:	80 34       	cpi	r24, 0x40	; 64
    1560:	11 f0       	breq	.+4      	; 0x1566 <EEPROM_readByte+0x90>
        return ERROR;
    1562:	1d 82       	std	Y+5, r1	; 0x05
    1564:	0f c0       	rjmp	.+30     	; 0x1584 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1566:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <TWI_readByteWithNACK>
    156a:	eb 81       	ldd	r30, Y+3	; 0x03
    156c:	fc 81       	ldd	r31, Y+4	; 0x04
    156e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1570:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <TWI_getStatus>
    1574:	88 35       	cpi	r24, 0x58	; 88
    1576:	11 f0       	breq	.+4      	; 0x157c <EEPROM_readByte+0xa6>
        return ERROR;
    1578:	1d 82       	std	Y+5, r1	; 0x05
    157a:	04 c0       	rjmp	.+8      	; 0x1584 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    157c:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <TWI_stop>

    return SUCCESS;
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	8d 83       	std	Y+5, r24	; 0x05
    1584:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	00 d0       	rcall	.+0      	; 0x159c <GPIO_setupPinDirection+0x6>
    159c:	00 d0       	rcall	.+0      	; 0x159e <GPIO_setupPinDirection+0x8>
    159e:	0f 92       	push	r0
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	89 83       	std	Y+1, r24	; 0x01
    15a6:	6a 83       	std	Y+2, r22	; 0x02
    15a8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	88 30       	cpi	r24, 0x08	; 8
    15ae:	08 f0       	brcs	.+2      	; 0x15b2 <GPIO_setupPinDirection+0x1c>
    15b0:	d5 c0       	rjmp	.+426    	; 0x175c <GPIO_setupPinDirection+0x1c6>
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	84 30       	cpi	r24, 0x04	; 4
    15b6:	08 f0       	brcs	.+2      	; 0x15ba <GPIO_setupPinDirection+0x24>
    15b8:	d1 c0       	rjmp	.+418    	; 0x175c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	3d 83       	std	Y+5, r19	; 0x05
    15c2:	2c 83       	std	Y+4, r18	; 0x04
    15c4:	8c 81       	ldd	r24, Y+4	; 0x04
    15c6:	9d 81       	ldd	r25, Y+5	; 0x05
    15c8:	81 30       	cpi	r24, 0x01	; 1
    15ca:	91 05       	cpc	r25, r1
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <GPIO_setupPinDirection+0x3a>
    15ce:	43 c0       	rjmp	.+134    	; 0x1656 <GPIO_setupPinDirection+0xc0>
    15d0:	2c 81       	ldd	r18, Y+4	; 0x04
    15d2:	3d 81       	ldd	r19, Y+5	; 0x05
    15d4:	22 30       	cpi	r18, 0x02	; 2
    15d6:	31 05       	cpc	r19, r1
    15d8:	2c f4       	brge	.+10     	; 0x15e4 <GPIO_setupPinDirection+0x4e>
    15da:	8c 81       	ldd	r24, Y+4	; 0x04
    15dc:	9d 81       	ldd	r25, Y+5	; 0x05
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	71 f0       	breq	.+28     	; 0x15fe <GPIO_setupPinDirection+0x68>
    15e2:	bc c0       	rjmp	.+376    	; 0x175c <GPIO_setupPinDirection+0x1c6>
    15e4:	2c 81       	ldd	r18, Y+4	; 0x04
    15e6:	3d 81       	ldd	r19, Y+5	; 0x05
    15e8:	22 30       	cpi	r18, 0x02	; 2
    15ea:	31 05       	cpc	r19, r1
    15ec:	09 f4       	brne	.+2      	; 0x15f0 <GPIO_setupPinDirection+0x5a>
    15ee:	5f c0       	rjmp	.+190    	; 0x16ae <GPIO_setupPinDirection+0x118>
    15f0:	8c 81       	ldd	r24, Y+4	; 0x04
    15f2:	9d 81       	ldd	r25, Y+5	; 0x05
    15f4:	83 30       	cpi	r24, 0x03	; 3
    15f6:	91 05       	cpc	r25, r1
    15f8:	09 f4       	brne	.+2      	; 0x15fc <GPIO_setupPinDirection+0x66>
    15fa:	85 c0       	rjmp	.+266    	; 0x1706 <GPIO_setupPinDirection+0x170>
    15fc:	af c0       	rjmp	.+350    	; 0x175c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	a1 f4       	brne	.+40     	; 0x162c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1604:	aa e3       	ldi	r26, 0x3A	; 58
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	ea e3       	ldi	r30, 0x3A	; 58
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	48 2f       	mov	r20, r24
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	02 2e       	mov	r0, r18
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <GPIO_setupPinDirection+0x8c>
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	0a 94       	dec	r0
    1624:	e2 f7       	brpl	.-8      	; 0x161e <GPIO_setupPinDirection+0x88>
    1626:	84 2b       	or	r24, r20
    1628:	8c 93       	st	X, r24
    162a:	98 c0       	rjmp	.+304    	; 0x175c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    162c:	aa e3       	ldi	r26, 0x3A	; 58
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	ea e3       	ldi	r30, 0x3A	; 58
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	48 2f       	mov	r20, r24
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	02 2e       	mov	r0, r18
    1644:	02 c0       	rjmp	.+4      	; 0x164a <GPIO_setupPinDirection+0xb4>
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	0a 94       	dec	r0
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <GPIO_setupPinDirection+0xb0>
    164e:	80 95       	com	r24
    1650:	84 23       	and	r24, r20
    1652:	8c 93       	st	X, r24
    1654:	83 c0       	rjmp	.+262    	; 0x175c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	a1 f4       	brne	.+40     	; 0x1684 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    165c:	a7 e3       	ldi	r26, 0x37	; 55
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e7 e3       	ldi	r30, 0x37	; 55
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	48 2f       	mov	r20, r24
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	02 2e       	mov	r0, r18
    1674:	02 c0       	rjmp	.+4      	; 0x167a <GPIO_setupPinDirection+0xe4>
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	0a 94       	dec	r0
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <GPIO_setupPinDirection+0xe0>
    167e:	84 2b       	or	r24, r20
    1680:	8c 93       	st	X, r24
    1682:	6c c0       	rjmp	.+216    	; 0x175c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1684:	a7 e3       	ldi	r26, 0x37	; 55
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e7 e3       	ldi	r30, 0x37	; 55
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	48 2f       	mov	r20, r24
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	02 2e       	mov	r0, r18
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <GPIO_setupPinDirection+0x10c>
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	0a 94       	dec	r0
    16a4:	e2 f7       	brpl	.-8      	; 0x169e <GPIO_setupPinDirection+0x108>
    16a6:	80 95       	com	r24
    16a8:	84 23       	and	r24, r20
    16aa:	8c 93       	st	X, r24
    16ac:	57 c0       	rjmp	.+174    	; 0x175c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	81 30       	cpi	r24, 0x01	; 1
    16b2:	a1 f4       	brne	.+40     	; 0x16dc <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    16b4:	a4 e3       	ldi	r26, 0x34	; 52
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e4 e3       	ldi	r30, 0x34	; 52
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	48 2f       	mov	r20, r24
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	02 2e       	mov	r0, r18
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <GPIO_setupPinDirection+0x13c>
    16ce:	88 0f       	add	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	0a 94       	dec	r0
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <GPIO_setupPinDirection+0x138>
    16d6:	84 2b       	or	r24, r20
    16d8:	8c 93       	st	X, r24
    16da:	40 c0       	rjmp	.+128    	; 0x175c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    16dc:	a4 e3       	ldi	r26, 0x34	; 52
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e4 e3       	ldi	r30, 0x34	; 52
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	48 2f       	mov	r20, r24
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	02 2e       	mov	r0, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <GPIO_setupPinDirection+0x164>
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	0a 94       	dec	r0
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <GPIO_setupPinDirection+0x160>
    16fe:	80 95       	com	r24
    1700:	84 23       	and	r24, r20
    1702:	8c 93       	st	X, r24
    1704:	2b c0       	rjmp	.+86     	; 0x175c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	81 30       	cpi	r24, 0x01	; 1
    170a:	a1 f4       	brne	.+40     	; 0x1734 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    170c:	a1 e3       	ldi	r26, 0x31	; 49
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e1 e3       	ldi	r30, 0x31	; 49
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	48 2f       	mov	r20, r24
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 2e       	mov	r0, r18
    1724:	02 c0       	rjmp	.+4      	; 0x172a <GPIO_setupPinDirection+0x194>
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	0a 94       	dec	r0
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <GPIO_setupPinDirection+0x190>
    172e:	84 2b       	or	r24, r20
    1730:	8c 93       	st	X, r24
    1732:	14 c0       	rjmp	.+40     	; 0x175c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1734:	a1 e3       	ldi	r26, 0x31	; 49
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e1 e3       	ldi	r30, 0x31	; 49
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	48 2f       	mov	r20, r24
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	02 2e       	mov	r0, r18
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <GPIO_setupPinDirection+0x1bc>
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	0a 94       	dec	r0
    1754:	e2 f7       	brpl	.-8      	; 0x174e <GPIO_setupPinDirection+0x1b8>
    1756:	80 95       	com	r24
    1758:	84 23       	and	r24, r20
    175a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	00 d0       	rcall	.+0      	; 0x1772 <GPIO_writePin+0x6>
    1772:	00 d0       	rcall	.+0      	; 0x1774 <GPIO_writePin+0x8>
    1774:	0f 92       	push	r0
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	89 83       	std	Y+1, r24	; 0x01
    177c:	6a 83       	std	Y+2, r22	; 0x02
    177e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	88 30       	cpi	r24, 0x08	; 8
    1784:	08 f0       	brcs	.+2      	; 0x1788 <GPIO_writePin+0x1c>
    1786:	d5 c0       	rjmp	.+426    	; 0x1932 <GPIO_writePin+0x1c6>
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	84 30       	cpi	r24, 0x04	; 4
    178c:	08 f0       	brcs	.+2      	; 0x1790 <GPIO_writePin+0x24>
    178e:	d1 c0       	rjmp	.+418    	; 0x1932 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	3d 83       	std	Y+5, r19	; 0x05
    1798:	2c 83       	std	Y+4, r18	; 0x04
    179a:	8c 81       	ldd	r24, Y+4	; 0x04
    179c:	9d 81       	ldd	r25, Y+5	; 0x05
    179e:	81 30       	cpi	r24, 0x01	; 1
    17a0:	91 05       	cpc	r25, r1
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <GPIO_writePin+0x3a>
    17a4:	43 c0       	rjmp	.+134    	; 0x182c <GPIO_writePin+0xc0>
    17a6:	2c 81       	ldd	r18, Y+4	; 0x04
    17a8:	3d 81       	ldd	r19, Y+5	; 0x05
    17aa:	22 30       	cpi	r18, 0x02	; 2
    17ac:	31 05       	cpc	r19, r1
    17ae:	2c f4       	brge	.+10     	; 0x17ba <GPIO_writePin+0x4e>
    17b0:	8c 81       	ldd	r24, Y+4	; 0x04
    17b2:	9d 81       	ldd	r25, Y+5	; 0x05
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	71 f0       	breq	.+28     	; 0x17d4 <GPIO_writePin+0x68>
    17b8:	bc c0       	rjmp	.+376    	; 0x1932 <GPIO_writePin+0x1c6>
    17ba:	2c 81       	ldd	r18, Y+4	; 0x04
    17bc:	3d 81       	ldd	r19, Y+5	; 0x05
    17be:	22 30       	cpi	r18, 0x02	; 2
    17c0:	31 05       	cpc	r19, r1
    17c2:	09 f4       	brne	.+2      	; 0x17c6 <GPIO_writePin+0x5a>
    17c4:	5f c0       	rjmp	.+190    	; 0x1884 <GPIO_writePin+0x118>
    17c6:	8c 81       	ldd	r24, Y+4	; 0x04
    17c8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ca:	83 30       	cpi	r24, 0x03	; 3
    17cc:	91 05       	cpc	r25, r1
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <GPIO_writePin+0x66>
    17d0:	85 c0       	rjmp	.+266    	; 0x18dc <GPIO_writePin+0x170>
    17d2:	af c0       	rjmp	.+350    	; 0x1932 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	81 30       	cpi	r24, 0x01	; 1
    17d8:	a1 f4       	brne	.+40     	; 0x1802 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    17da:	ab e3       	ldi	r26, 0x3B	; 59
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	eb e3       	ldi	r30, 0x3B	; 59
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	48 2f       	mov	r20, r24
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	02 2e       	mov	r0, r18
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <GPIO_writePin+0x8c>
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	0a 94       	dec	r0
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <GPIO_writePin+0x88>
    17fc:	84 2b       	or	r24, r20
    17fe:	8c 93       	st	X, r24
    1800:	98 c0       	rjmp	.+304    	; 0x1932 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1802:	ab e3       	ldi	r26, 0x3B	; 59
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	eb e3       	ldi	r30, 0x3B	; 59
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	48 2f       	mov	r20, r24
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	02 2e       	mov	r0, r18
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <GPIO_writePin+0xb4>
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	0a 94       	dec	r0
    1822:	e2 f7       	brpl	.-8      	; 0x181c <GPIO_writePin+0xb0>
    1824:	80 95       	com	r24
    1826:	84 23       	and	r24, r20
    1828:	8c 93       	st	X, r24
    182a:	83 c0       	rjmp	.+262    	; 0x1932 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	81 30       	cpi	r24, 0x01	; 1
    1830:	a1 f4       	brne	.+40     	; 0x185a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1832:	a8 e3       	ldi	r26, 0x38	; 56
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e8 e3       	ldi	r30, 0x38	; 56
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	48 2f       	mov	r20, r24
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	02 2e       	mov	r0, r18
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <GPIO_writePin+0xe4>
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	0a 94       	dec	r0
    1852:	e2 f7       	brpl	.-8      	; 0x184c <GPIO_writePin+0xe0>
    1854:	84 2b       	or	r24, r20
    1856:	8c 93       	st	X, r24
    1858:	6c c0       	rjmp	.+216    	; 0x1932 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    185a:	a8 e3       	ldi	r26, 0x38	; 56
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e8 e3       	ldi	r30, 0x38	; 56
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	48 2f       	mov	r20, r24
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	02 2e       	mov	r0, r18
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <GPIO_writePin+0x10c>
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	0a 94       	dec	r0
    187a:	e2 f7       	brpl	.-8      	; 0x1874 <GPIO_writePin+0x108>
    187c:	80 95       	com	r24
    187e:	84 23       	and	r24, r20
    1880:	8c 93       	st	X, r24
    1882:	57 c0       	rjmp	.+174    	; 0x1932 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	81 30       	cpi	r24, 0x01	; 1
    1888:	a1 f4       	brne	.+40     	; 0x18b2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    188a:	a5 e3       	ldi	r26, 0x35	; 53
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e5 e3       	ldi	r30, 0x35	; 53
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	48 2f       	mov	r20, r24
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	02 2e       	mov	r0, r18
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <GPIO_writePin+0x13c>
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	0a 94       	dec	r0
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <GPIO_writePin+0x138>
    18ac:	84 2b       	or	r24, r20
    18ae:	8c 93       	st	X, r24
    18b0:	40 c0       	rjmp	.+128    	; 0x1932 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    18b2:	a5 e3       	ldi	r26, 0x35	; 53
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e5 e3       	ldi	r30, 0x35	; 53
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	48 2f       	mov	r20, r24
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	02 2e       	mov	r0, r18
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <GPIO_writePin+0x164>
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	0a 94       	dec	r0
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <GPIO_writePin+0x160>
    18d4:	80 95       	com	r24
    18d6:	84 23       	and	r24, r20
    18d8:	8c 93       	st	X, r24
    18da:	2b c0       	rjmp	.+86     	; 0x1932 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	81 30       	cpi	r24, 0x01	; 1
    18e0:	a1 f4       	brne	.+40     	; 0x190a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    18e2:	a2 e3       	ldi	r26, 0x32	; 50
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e2 e3       	ldi	r30, 0x32	; 50
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	48 2f       	mov	r20, r24
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	02 2e       	mov	r0, r18
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <GPIO_writePin+0x194>
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	0a 94       	dec	r0
    1902:	e2 f7       	brpl	.-8      	; 0x18fc <GPIO_writePin+0x190>
    1904:	84 2b       	or	r24, r20
    1906:	8c 93       	st	X, r24
    1908:	14 c0       	rjmp	.+40     	; 0x1932 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    190a:	a2 e3       	ldi	r26, 0x32	; 50
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e2 e3       	ldi	r30, 0x32	; 50
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	48 2f       	mov	r20, r24
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	02 2e       	mov	r0, r18
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <GPIO_writePin+0x1bc>
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	0a 94       	dec	r0
    192a:	e2 f7       	brpl	.-8      	; 0x1924 <GPIO_writePin+0x1b8>
    192c:	80 95       	com	r24
    192e:	84 23       	and	r24, r20
    1930:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	00 d0       	rcall	.+0      	; 0x1948 <GPIO_readPin+0x6>
    1948:	00 d0       	rcall	.+0      	; 0x194a <GPIO_readPin+0x8>
    194a:	0f 92       	push	r0
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	8a 83       	std	Y+2, r24	; 0x02
    1952:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1954:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	88 30       	cpi	r24, 0x08	; 8
    195a:	08 f0       	brcs	.+2      	; 0x195e <GPIO_readPin+0x1c>
    195c:	84 c0       	rjmp	.+264    	; 0x1a66 <GPIO_readPin+0x124>
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	84 30       	cpi	r24, 0x04	; 4
    1962:	08 f0       	brcs	.+2      	; 0x1966 <GPIO_readPin+0x24>
    1964:	80 c0       	rjmp	.+256    	; 0x1a66 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	3d 83       	std	Y+5, r19	; 0x05
    196e:	2c 83       	std	Y+4, r18	; 0x04
    1970:	4c 81       	ldd	r20, Y+4	; 0x04
    1972:	5d 81       	ldd	r21, Y+5	; 0x05
    1974:	41 30       	cpi	r20, 0x01	; 1
    1976:	51 05       	cpc	r21, r1
    1978:	79 f1       	breq	.+94     	; 0x19d8 <GPIO_readPin+0x96>
    197a:	8c 81       	ldd	r24, Y+4	; 0x04
    197c:	9d 81       	ldd	r25, Y+5	; 0x05
    197e:	82 30       	cpi	r24, 0x02	; 2
    1980:	91 05       	cpc	r25, r1
    1982:	34 f4       	brge	.+12     	; 0x1990 <GPIO_readPin+0x4e>
    1984:	2c 81       	ldd	r18, Y+4	; 0x04
    1986:	3d 81       	ldd	r19, Y+5	; 0x05
    1988:	21 15       	cp	r18, r1
    198a:	31 05       	cpc	r19, r1
    198c:	69 f0       	breq	.+26     	; 0x19a8 <GPIO_readPin+0x66>
    198e:	6b c0       	rjmp	.+214    	; 0x1a66 <GPIO_readPin+0x124>
    1990:	4c 81       	ldd	r20, Y+4	; 0x04
    1992:	5d 81       	ldd	r21, Y+5	; 0x05
    1994:	42 30       	cpi	r20, 0x02	; 2
    1996:	51 05       	cpc	r21, r1
    1998:	b9 f1       	breq	.+110    	; 0x1a08 <GPIO_readPin+0xc6>
    199a:	8c 81       	ldd	r24, Y+4	; 0x04
    199c:	9d 81       	ldd	r25, Y+5	; 0x05
    199e:	83 30       	cpi	r24, 0x03	; 3
    19a0:	91 05       	cpc	r25, r1
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <GPIO_readPin+0x64>
    19a4:	49 c0       	rjmp	.+146    	; 0x1a38 <GPIO_readPin+0xf6>
    19a6:	5f c0       	rjmp	.+190    	; 0x1a66 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    19a8:	e9 e3       	ldi	r30, 0x39	; 57
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	88 2f       	mov	r24, r24
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	a9 01       	movw	r20, r18
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <GPIO_readPin+0x7e>
    19bc:	55 95       	asr	r21
    19be:	47 95       	ror	r20
    19c0:	8a 95       	dec	r24
    19c2:	e2 f7       	brpl	.-8      	; 0x19bc <GPIO_readPin+0x7a>
    19c4:	ca 01       	movw	r24, r20
    19c6:	81 70       	andi	r24, 0x01	; 1
    19c8:	90 70       	andi	r25, 0x00	; 0
    19ca:	88 23       	and	r24, r24
    19cc:	19 f0       	breq	.+6      	; 0x19d4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	49 c0       	rjmp	.+146    	; 0x1a66 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19d4:	19 82       	std	Y+1, r1	; 0x01
    19d6:	47 c0       	rjmp	.+142    	; 0x1a66 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    19d8:	e6 e3       	ldi	r30, 0x36	; 54
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	88 2f       	mov	r24, r24
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	a9 01       	movw	r20, r18
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <GPIO_readPin+0xae>
    19ec:	55 95       	asr	r21
    19ee:	47 95       	ror	r20
    19f0:	8a 95       	dec	r24
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <GPIO_readPin+0xaa>
    19f4:	ca 01       	movw	r24, r20
    19f6:	81 70       	andi	r24, 0x01	; 1
    19f8:	90 70       	andi	r25, 0x00	; 0
    19fa:	88 23       	and	r24, r24
    19fc:	19 f0       	breq	.+6      	; 0x1a04 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	89 83       	std	Y+1, r24	; 0x01
    1a02:	31 c0       	rjmp	.+98     	; 0x1a66 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a04:	19 82       	std	Y+1, r1	; 0x01
    1a06:	2f c0       	rjmp	.+94     	; 0x1a66 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1a08:	e3 e3       	ldi	r30, 0x33	; 51
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	88 2f       	mov	r24, r24
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	a9 01       	movw	r20, r18
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <GPIO_readPin+0xde>
    1a1c:	55 95       	asr	r21
    1a1e:	47 95       	ror	r20
    1a20:	8a 95       	dec	r24
    1a22:	e2 f7       	brpl	.-8      	; 0x1a1c <GPIO_readPin+0xda>
    1a24:	ca 01       	movw	r24, r20
    1a26:	81 70       	andi	r24, 0x01	; 1
    1a28:	90 70       	andi	r25, 0x00	; 0
    1a2a:	88 23       	and	r24, r24
    1a2c:	19 f0       	breq	.+6      	; 0x1a34 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	89 83       	std	Y+1, r24	; 0x01
    1a32:	19 c0       	rjmp	.+50     	; 0x1a66 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a34:	19 82       	std	Y+1, r1	; 0x01
    1a36:	17 c0       	rjmp	.+46     	; 0x1a66 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a38:	e0 e3       	ldi	r30, 0x30	; 48
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	88 2f       	mov	r24, r24
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	a9 01       	movw	r20, r18
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <GPIO_readPin+0x10e>
    1a4c:	55 95       	asr	r21
    1a4e:	47 95       	ror	r20
    1a50:	8a 95       	dec	r24
    1a52:	e2 f7       	brpl	.-8      	; 0x1a4c <GPIO_readPin+0x10a>
    1a54:	ca 01       	movw	r24, r20
    1a56:	81 70       	andi	r24, 0x01	; 1
    1a58:	90 70       	andi	r25, 0x00	; 0
    1a5a:	88 23       	and	r24, r24
    1a5c:	19 f0       	breq	.+6      	; 0x1a64 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	89 83       	std	Y+1, r24	; 0x01
    1a62:	01 c0       	rjmp	.+2      	; 0x1a66 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a64:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	08 95       	ret

00001a78 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <GPIO_setupPortDirection+0x6>
    1a7e:	00 d0       	rcall	.+0      	; 0x1a80 <GPIO_setupPortDirection+0x8>
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
    1a84:	89 83       	std	Y+1, r24	; 0x01
    1a86:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	84 30       	cpi	r24, 0x04	; 4
    1a8c:	90 f5       	brcc	.+100    	; 0x1af2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	3c 83       	std	Y+4, r19	; 0x04
    1a96:	2b 83       	std	Y+3, r18	; 0x03
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9c:	81 30       	cpi	r24, 0x01	; 1
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	d1 f0       	breq	.+52     	; 0x1ad6 <GPIO_setupPortDirection+0x5e>
    1aa2:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa4:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa6:	22 30       	cpi	r18, 0x02	; 2
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	2c f4       	brge	.+10     	; 0x1ab6 <GPIO_setupPortDirection+0x3e>
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	61 f0       	breq	.+24     	; 0x1acc <GPIO_setupPortDirection+0x54>
    1ab4:	1e c0       	rjmp	.+60     	; 0x1af2 <GPIO_setupPortDirection+0x7a>
    1ab6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aba:	22 30       	cpi	r18, 0x02	; 2
    1abc:	31 05       	cpc	r19, r1
    1abe:	81 f0       	breq	.+32     	; 0x1ae0 <GPIO_setupPortDirection+0x68>
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac4:	83 30       	cpi	r24, 0x03	; 3
    1ac6:	91 05       	cpc	r25, r1
    1ac8:	81 f0       	breq	.+32     	; 0x1aea <GPIO_setupPortDirection+0x72>
    1aca:	13 c0       	rjmp	.+38     	; 0x1af2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1acc:	ea e3       	ldi	r30, 0x3A	; 58
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	80 83       	st	Z, r24
    1ad4:	0e c0       	rjmp	.+28     	; 0x1af2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ad6:	e7 e3       	ldi	r30, 0x37	; 55
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	80 83       	st	Z, r24
    1ade:	09 c0       	rjmp	.+18     	; 0x1af2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1ae0:	e4 e3       	ldi	r30, 0x34	; 52
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	80 83       	st	Z, r24
    1ae8:	04 c0       	rjmp	.+8      	; 0x1af2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1aea:	e1 e3       	ldi	r30, 0x31	; 49
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	80 83       	st	Z, r24
			break;
		}
	}
}
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	08 95       	ret

00001b00 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	00 d0       	rcall	.+0      	; 0x1b06 <GPIO_writePort+0x6>
    1b06:	00 d0       	rcall	.+0      	; 0x1b08 <GPIO_writePort+0x8>
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    1b0e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	84 30       	cpi	r24, 0x04	; 4
    1b14:	90 f5       	brcc	.+100    	; 0x1b7a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	3c 83       	std	Y+4, r19	; 0x04
    1b1e:	2b 83       	std	Y+3, r18	; 0x03
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	9c 81       	ldd	r25, Y+4	; 0x04
    1b24:	81 30       	cpi	r24, 0x01	; 1
    1b26:	91 05       	cpc	r25, r1
    1b28:	d1 f0       	breq	.+52     	; 0x1b5e <GPIO_writePort+0x5e>
    1b2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b2e:	22 30       	cpi	r18, 0x02	; 2
    1b30:	31 05       	cpc	r19, r1
    1b32:	2c f4       	brge	.+10     	; 0x1b3e <GPIO_writePort+0x3e>
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	9c 81       	ldd	r25, Y+4	; 0x04
    1b38:	00 97       	sbiw	r24, 0x00	; 0
    1b3a:	61 f0       	breq	.+24     	; 0x1b54 <GPIO_writePort+0x54>
    1b3c:	1e c0       	rjmp	.+60     	; 0x1b7a <GPIO_writePort+0x7a>
    1b3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b40:	3c 81       	ldd	r19, Y+4	; 0x04
    1b42:	22 30       	cpi	r18, 0x02	; 2
    1b44:	31 05       	cpc	r19, r1
    1b46:	81 f0       	breq	.+32     	; 0x1b68 <GPIO_writePort+0x68>
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4c:	83 30       	cpi	r24, 0x03	; 3
    1b4e:	91 05       	cpc	r25, r1
    1b50:	81 f0       	breq	.+32     	; 0x1b72 <GPIO_writePort+0x72>
    1b52:	13 c0       	rjmp	.+38     	; 0x1b7a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1b54:	eb e3       	ldi	r30, 0x3B	; 59
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	80 83       	st	Z, r24
    1b5c:	0e c0       	rjmp	.+28     	; 0x1b7a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1b5e:	e8 e3       	ldi	r30, 0x38	; 56
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	80 83       	st	Z, r24
    1b66:	09 c0       	rjmp	.+18     	; 0x1b7a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1b68:	e5 e3       	ldi	r30, 0x35	; 53
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	80 83       	st	Z, r24
    1b70:	04 c0       	rjmp	.+8      	; 0x1b7a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1b72:	e2 e3       	ldi	r30, 0x32	; 50
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	08 95       	ret

00001b88 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	00 d0       	rcall	.+0      	; 0x1b8e <GPIO_readPort+0x6>
    1b8e:	00 d0       	rcall	.+0      	; 0x1b90 <GPIO_readPort+0x8>
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1b96:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	84 30       	cpi	r24, 0x04	; 4
    1b9c:	90 f5       	brcc	.+100    	; 0x1c02 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	3c 83       	std	Y+4, r19	; 0x04
    1ba6:	2b 83       	std	Y+3, r18	; 0x03
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	81 30       	cpi	r24, 0x01	; 1
    1bae:	91 05       	cpc	r25, r1
    1bb0:	d1 f0       	breq	.+52     	; 0x1be6 <GPIO_readPort+0x5e>
    1bb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb6:	22 30       	cpi	r18, 0x02	; 2
    1bb8:	31 05       	cpc	r19, r1
    1bba:	2c f4       	brge	.+10     	; 0x1bc6 <GPIO_readPort+0x3e>
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc0:	00 97       	sbiw	r24, 0x00	; 0
    1bc2:	61 f0       	breq	.+24     	; 0x1bdc <GPIO_readPort+0x54>
    1bc4:	1e c0       	rjmp	.+60     	; 0x1c02 <GPIO_readPort+0x7a>
    1bc6:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bca:	22 30       	cpi	r18, 0x02	; 2
    1bcc:	31 05       	cpc	r19, r1
    1bce:	81 f0       	breq	.+32     	; 0x1bf0 <GPIO_readPort+0x68>
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd4:	83 30       	cpi	r24, 0x03	; 3
    1bd6:	91 05       	cpc	r25, r1
    1bd8:	81 f0       	breq	.+32     	; 0x1bfa <GPIO_readPort+0x72>
    1bda:	13 c0       	rjmp	.+38     	; 0x1c02 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1bdc:	e9 e3       	ldi	r30, 0x39	; 57
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	0e c0       	rjmp	.+28     	; 0x1c02 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1be6:	e6 e3       	ldi	r30, 0x36	; 54
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	89 83       	std	Y+1, r24	; 0x01
    1bee:	09 c0       	rjmp	.+18     	; 0x1c02 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1bf0:	e3 e3       	ldi	r30, 0x33	; 51
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    1bf8:	04 c0       	rjmp	.+8      	; 0x1c02 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1bfa:	e0 e3       	ldi	r30, 0x30	; 48
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <MOTOR_init>:
#include"std_types.h"
#include "Timer0.h"


void MOTOR_init(void)
{
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_IN1_PIN_ID, PIN_OUTPUT);
    1c1a:	82 e0       	ldi	r24, 0x02	; 2
    1c1c:	62 e0       	ldi	r22, 0x02	; 2
    1c1e:	41 e0       	ldi	r20, 0x01	; 1
    1c20:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_IN2_PIN_ID, PIN_OUTPUT);
    1c24:	82 e0       	ldi	r24, 0x02	; 2
    1c26:	63 e0       	ldi	r22, 0x03	; 3
    1c28:	41 e0       	ldi	r20, 0x01	; 1
    1c2a:	0e 94 cb 0a 	call	0x1596	; 0x1596 <GPIO_setupPinDirection>

	GPIO_writePin(MOTOR_PORT_ID,MOTOR_IN1_PIN_ID , LOGIC_LOW);
    1c2e:	82 e0       	ldi	r24, 0x02	; 2
    1c30:	62 e0       	ldi	r22, 0x02	; 2
    1c32:	40 e0       	ldi	r20, 0x00	; 0
    1c34:	0e 94 b6 0b 	call	0x176c	; 0x176c <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT_ID,MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1c38:	82 e0       	ldi	r24, 0x02	; 2
    1c3a:	63 e0       	ldi	r22, 0x03	; 3
    1c3c:	40 e0       	ldi	r20, 0x00	; 0
    1c3e:	0e 94 b6 0b 	call	0x176c	; 0x176c <GPIO_writePin>
}
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <Motor_Rotate>:

void Motor_Rotate(Motor_State state,uint8 speed)  //speed from 0 to 100

{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <Motor_Rotate+0x6>
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <Motor_Rotate+0x8>
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	6a 83       	std	Y+2, r22	; 0x02
switch(state)
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	3c 83       	std	Y+4, r19	; 0x04
    1c60:	2b 83       	std	Y+3, r18	; 0x03
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	9c 81       	ldd	r25, Y+4	; 0x04
    1c66:	81 30       	cpi	r24, 0x01	; 1
    1c68:	91 05       	cpc	r25, r1
    1c6a:	51 f0       	breq	.+20     	; 0x1c80 <Motor_Rotate+0x38>
    1c6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c70:	22 30       	cpi	r18, 0x02	; 2
    1c72:	31 05       	cpc	r19, r1
    1c74:	d9 f0       	breq	.+54     	; 0x1cac <Motor_Rotate+0x64>
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7a:	00 97       	sbiw	r24, 0x00	; 0
    1c7c:	61 f0       	breq	.+24     	; 0x1c96 <Motor_Rotate+0x4e>
    1c7e:	20 c0       	rjmp	.+64     	; 0x1cc0 <Motor_Rotate+0x78>
	{
	case Anti_Clockwise:

		GPIO_writePin(MOTOR_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1c80:	82 e0       	ldi	r24, 0x02	; 2
    1c82:	63 e0       	ldi	r22, 0x03	; 3
    1c84:	40 e0       	ldi	r20, 0x00	; 0
    1c86:	0e 94 b6 0b 	call	0x176c	; 0x176c <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_HIGH);
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	62 e0       	ldi	r22, 0x02	; 2
    1c8e:	41 e0       	ldi	r20, 0x01	; 1
    1c90:	0e 94 b6 0b 	call	0x176c	; 0x176c <GPIO_writePin>
    1c94:	15 c0       	rjmp	.+42     	; 0x1cc0 <Motor_Rotate+0x78>
		break;
	case Clockwise:
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1c96:	82 e0       	ldi	r24, 0x02	; 2
    1c98:	62 e0       	ldi	r22, 0x02	; 2
    1c9a:	40 e0       	ldi	r20, 0x00	; 0
    1c9c:	0e 94 b6 0b 	call	0x176c	; 0x176c <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_HIGH);
    1ca0:	82 e0       	ldi	r24, 0x02	; 2
    1ca2:	63 e0       	ldi	r22, 0x03	; 3
    1ca4:	41 e0       	ldi	r20, 0x01	; 1
    1ca6:	0e 94 b6 0b 	call	0x176c	; 0x176c <GPIO_writePin>
    1caa:	0a c0       	rjmp	.+20     	; 0x1cc0 <Motor_Rotate+0x78>
		break;
	case Stop:
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1cac:	82 e0       	ldi	r24, 0x02	; 2
    1cae:	63 e0       	ldi	r22, 0x03	; 3
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	0e 94 b6 0b 	call	0x176c	; 0x176c <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1cb6:	82 e0       	ldi	r24, 0x02	; 2
    1cb8:	62 e0       	ldi	r22, 0x02	; 2
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	0e 94 b6 0b 	call	0x176c	; 0x176c <GPIO_writePin>
		break;
	}

	PWM_Timer0_Start(speed);
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <PWM_Timer0_Start>

}
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	08 95       	ret

00001cd4 <__vector_9>:


static volatile void (*g_CallBackPtr)(void) = NULL_PTR;	//global pointer to function to be used for the cb


ISR(TIMER1_OVF_vect){
    1cd4:	1f 92       	push	r1
    1cd6:	0f 92       	push	r0
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	0f 92       	push	r0
    1cdc:	11 24       	eor	r1, r1
    1cde:	2f 93       	push	r18
    1ce0:	3f 93       	push	r19
    1ce2:	4f 93       	push	r20
    1ce4:	5f 93       	push	r21
    1ce6:	6f 93       	push	r22
    1ce8:	7f 93       	push	r23
    1cea:	8f 93       	push	r24
    1cec:	9f 93       	push	r25
    1cee:	af 93       	push	r26
    1cf0:	bf 93       	push	r27
    1cf2:	ef 93       	push	r30
    1cf4:	ff 93       	push	r31
    1cf6:	df 93       	push	r29
    1cf8:	cf 93       	push	r28
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
	g_CallBackPtr();
    1cfe:	e0 91 7c 00 	lds	r30, 0x007C
    1d02:	f0 91 7d 00 	lds	r31, 0x007D
    1d06:	09 95       	icall
}
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	ff 91       	pop	r31
    1d0e:	ef 91       	pop	r30
    1d10:	bf 91       	pop	r27
    1d12:	af 91       	pop	r26
    1d14:	9f 91       	pop	r25
    1d16:	8f 91       	pop	r24
    1d18:	7f 91       	pop	r23
    1d1a:	6f 91       	pop	r22
    1d1c:	5f 91       	pop	r21
    1d1e:	4f 91       	pop	r20
    1d20:	3f 91       	pop	r19
    1d22:	2f 91       	pop	r18
    1d24:	0f 90       	pop	r0
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	0f 90       	pop	r0
    1d2a:	1f 90       	pop	r1
    1d2c:	18 95       	reti

00001d2e <__vector_7>:

ISR(TIMER1_COMPA_vect){
    1d2e:	1f 92       	push	r1
    1d30:	0f 92       	push	r0
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	0f 92       	push	r0
    1d36:	11 24       	eor	r1, r1
    1d38:	2f 93       	push	r18
    1d3a:	3f 93       	push	r19
    1d3c:	4f 93       	push	r20
    1d3e:	5f 93       	push	r21
    1d40:	6f 93       	push	r22
    1d42:	7f 93       	push	r23
    1d44:	8f 93       	push	r24
    1d46:	9f 93       	push	r25
    1d48:	af 93       	push	r26
    1d4a:	bf 93       	push	r27
    1d4c:	ef 93       	push	r30
    1d4e:	ff 93       	push	r31
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
	g_CallBackPtr();
    1d58:	e0 91 7c 00 	lds	r30, 0x007C
    1d5c:	f0 91 7d 00 	lds	r31, 0x007D
    1d60:	09 95       	icall
}
    1d62:	cf 91       	pop	r28
    1d64:	df 91       	pop	r29
    1d66:	ff 91       	pop	r31
    1d68:	ef 91       	pop	r30
    1d6a:	bf 91       	pop	r27
    1d6c:	af 91       	pop	r26
    1d6e:	9f 91       	pop	r25
    1d70:	8f 91       	pop	r24
    1d72:	7f 91       	pop	r23
    1d74:	6f 91       	pop	r22
    1d76:	5f 91       	pop	r21
    1d78:	4f 91       	pop	r20
    1d7a:	3f 91       	pop	r19
    1d7c:	2f 91       	pop	r18
    1d7e:	0f 90       	pop	r0
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	0f 90       	pop	r0
    1d84:	1f 90       	pop	r1
    1d86:	18 95       	reti

00001d88 <Timer_1_init>:

/*
 * Description : Initialize timer1 based on a given config structure
 *
 */
void Timer_1_init(const Timer1_ConfigType * Config_Ptr){
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <Timer_1_init+0x6>
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	9a 83       	std	Y+2, r25	; 0x02
    1d94:	89 83       	std	Y+1, r24	; 0x01

	//in normal mode WGM10 WGM11 WGM12 WGM13 are all 0 so we can set them all to 0 by default
	CLEAR_BIT(TCCR1A,WGM10);
    1d96:	af e4       	ldi	r26, 0x4F	; 79
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	ef e4       	ldi	r30, 0x4F	; 79
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	8e 7f       	andi	r24, 0xFE	; 254
    1da2:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    1da4:	af e4       	ldi	r26, 0x4F	; 79
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	ef e4       	ldi	r30, 0x4F	; 79
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	8d 7f       	andi	r24, 0xFD	; 253
    1db0:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM12);
    1db2:	ae e4       	ldi	r26, 0x4E	; 78
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	ee e4       	ldi	r30, 0x4E	; 78
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	87 7f       	andi	r24, 0xF7	; 247
    1dbe:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM13);
    1dc0:	ae e4       	ldi	r26, 0x4E	; 78
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	ee e4       	ldi	r30, 0x4E	; 78
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	8f 7e       	andi	r24, 0xEF	; 239
    1dcc:	8c 93       	st	X, r24


	if(Config_Ptr->mode == CTC_OCR){		//CTC mode was selected
    1dce:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd2:	85 81       	ldd	r24, Z+5	; 0x05
    1dd4:	84 30       	cpi	r24, 0x04	; 4
    1dd6:	c1 f4       	brne	.+48     	; 0x1e08 <Timer_1_init+0x80>

		//in CTC mode only WGM12 is 1
		SET_BIT(TCCR1B,WGM12);
    1dd8:	ae e4       	ldi	r26, 0x4E	; 78
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	ee e4       	ldi	r30, 0x4E	; 78
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	88 60       	ori	r24, 0x08	; 8
    1de4:	8c 93       	st	X, r24

		//assign the compare value to OCR1A
		OCR1A = Config_Ptr->compare_value;
    1de6:	aa e4       	ldi	r26, 0x4A	; 74
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e9 81       	ldd	r30, Y+1	; 0x01
    1dec:	fa 81       	ldd	r31, Y+2	; 0x02
    1dee:	82 81       	ldd	r24, Z+2	; 0x02
    1df0:	93 81       	ldd	r25, Z+3	; 0x03
    1df2:	11 96       	adiw	r26, 0x01	; 1
    1df4:	9c 93       	st	X, r25
    1df6:	8e 93       	st	-X, r24

		//enable interrupt for OCIE1A
		SET_BIT(TIMSK,OCIE1A);
    1df8:	a9 e5       	ldi	r26, 0x59	; 89
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e9 e5       	ldi	r30, 0x59	; 89
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	80 61       	ori	r24, 0x10	; 16
    1e04:	8c 93       	st	X, r24
    1e06:	0c c0       	rjmp	.+24     	; 0x1e20 <Timer_1_init+0x98>

	}else if(Config_Ptr->mode == NORMAL){	//Normal mode was selected
    1e08:	e9 81       	ldd	r30, Y+1	; 0x01
    1e0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e0c:	85 81       	ldd	r24, Z+5	; 0x05
    1e0e:	88 23       	and	r24, r24
    1e10:	39 f4       	brne	.+14     	; 0x1e20 <Timer_1_init+0x98>

		//enable interrupt for TOIE1
		SET_BIT(TIMSK,TOIE1);
    1e12:	a9 e5       	ldi	r26, 0x59	; 89
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e9 e5       	ldi	r30, 0x59	; 89
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	84 60       	ori	r24, 0x04	; 4
    1e1e:	8c 93       	st	X, r24

	}

	//only active when using non-PWM mode
	SET_BIT(TCCR1A,FOC1A);
    1e20:	af e4       	ldi	r26, 0x4F	; 79
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	ef e4       	ldi	r30, 0x4F	; 79
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	88 60       	ori	r24, 0x08	; 8
    1e2c:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1B);
    1e2e:	af e4       	ldi	r26, 0x4F	; 79
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	ef e4       	ldi	r30, 0x4F	; 79
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	84 60       	ori	r24, 0x04	; 4
    1e3a:	8c 93       	st	X, r24

	//assign initial value
	TCNT1 = Config_Ptr->initial_value;
    1e3c:	ac e4       	ldi	r26, 0x4C	; 76
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	e9 81       	ldd	r30, Y+1	; 0x01
    1e42:	fa 81       	ldd	r31, Y+2	; 0x02
    1e44:	80 81       	ld	r24, Z
    1e46:	91 81       	ldd	r25, Z+1	; 0x01
    1e48:	11 96       	adiw	r26, 0x01	; 1
    1e4a:	9c 93       	st	X, r25
    1e4c:	8e 93       	st	-X, r24


//	TCCR1B 0 to 2 clock select
//	clock bits are 0 1 2    0000 0111 = f7
//							1111 1000 = ~f7
	TCCR1B = (TCCR1B & ~0xf7) | ( ( (Config_Ptr->prescaler) <<0) & 0xf7 );
    1e4e:	ae e4       	ldi	r26, 0x4E	; 78
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	ee e4       	ldi	r30, 0x4E	; 78
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	98 2f       	mov	r25, r24
    1e5a:	98 70       	andi	r25, 0x08	; 8
    1e5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e60:	84 81       	ldd	r24, Z+4	; 0x04
    1e62:	87 7f       	andi	r24, 0xF7	; 247
    1e64:	89 2b       	or	r24, r25
    1e66:	8c 93       	st	X, r24


}
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <Timer_1_deInit>:

/*
 * Description : Deinitialize timer1
 *
 */
void Timer_1_deInit(void){
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
	g_CallBackPtr = NULL_PTR;
    1e7a:	10 92 7d 00 	sts	0x007D, r1
    1e7e:	10 92 7c 00 	sts	0x007C, r1
	TCCR1A = 0;
    1e82:	ef e4       	ldi	r30, 0x4F	; 79
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	10 82       	st	Z, r1
	TCCR1B = 0;
    1e88:	ee e4       	ldi	r30, 0x4E	; 78
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	10 82       	st	Z, r1
	TCNT1 = 0;
    1e8e:	ec e4       	ldi	r30, 0x4C	; 76
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	11 82       	std	Z+1, r1	; 0x01
    1e94:	10 82       	st	Z, r1
	OCR1A = 0;
    1e96:	ea e4       	ldi	r30, 0x4A	; 74
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	11 82       	std	Z+1, r1	; 0x01
    1e9c:	10 82       	st	Z, r1
	TIMSK &= 0x3c;
    1e9e:	a9 e5       	ldi	r26, 0x59	; 89
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e9 e5       	ldi	r30, 0x59	; 89
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	8c 73       	andi	r24, 0x3C	; 60
    1eaa:	8c 93       	st	X, r24
}
    1eac:	cf 91       	pop	r28
    1eae:	df 91       	pop	r29
    1eb0:	08 95       	ret

00001eb2 <Timer_1_setCallBack>:

/*
 * Description : Set the callback function for timer1
 *
 */
void Timer_1_setCallBack(void(*a_ptr)(void)){
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	00 d0       	rcall	.+0      	; 0x1eb8 <Timer_1_setCallBack+0x6>
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	9a 83       	std	Y+2, r25	; 0x02
    1ebe:	89 83       	std	Y+1, r24	; 0x01
	g_CallBackPtr=a_ptr;
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec4:	90 93 7d 00 	sts	0x007D, r25
    1ec8:	80 93 7c 00 	sts	0x007C, r24
}
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <TWI_init>:
#include "avr/io.h"
#include "common_macros.h"


void TWI_init(TWI_ConfigType * config)
{
    1ed6:	0f 93       	push	r16
    1ed8:	1f 93       	push	r17
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <TWI_init+0xa>
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
    1ee4:	9a 83       	std	Y+2, r25	; 0x02
    1ee6:	89 83       	std	Y+1, r24	; 0x01

	TWAR= config->address;
    1ee8:	a2 e2       	ldi	r26, 0x22	; 34
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	e9 81       	ldd	r30, Y+1	; 0x01
    1eee:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef0:	80 81       	ld	r24, Z
    1ef2:	8c 93       	st	X, r24
	TWBR = ((F_CPU/config->bit_rate)-16)/2;
    1ef4:	00 e2       	ldi	r16, 0x20	; 32
    1ef6:	10 e0       	ldi	r17, 0x00	; 0
    1ef8:	e9 81       	ldd	r30, Y+1	; 0x01
    1efa:	fa 81       	ldd	r31, Y+2	; 0x02
    1efc:	21 81       	ldd	r18, Z+1	; 0x01
    1efe:	32 81       	ldd	r19, Z+2	; 0x02
    1f00:	43 81       	ldd	r20, Z+3	; 0x03
    1f02:	54 81       	ldd	r21, Z+4	; 0x04
    1f04:	80 e4       	ldi	r24, 0x40	; 64
    1f06:	92 e4       	ldi	r25, 0x42	; 66
    1f08:	af e0       	ldi	r26, 0x0F	; 15
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	bc 01       	movw	r22, r24
    1f0e:	cd 01       	movw	r24, r26
    1f10:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__udivmodsi4>
    1f14:	da 01       	movw	r26, r20
    1f16:	c9 01       	movw	r24, r18
    1f18:	40 97       	sbiw	r24, 0x10	; 16
    1f1a:	a1 09       	sbc	r26, r1
    1f1c:	b1 09       	sbc	r27, r1
    1f1e:	b6 95       	lsr	r27
    1f20:	a7 95       	ror	r26
    1f22:	97 95       	ror	r25
    1f24:	87 95       	ror	r24
    1f26:	f8 01       	movw	r30, r16
    1f28:	80 83       	st	Z, r24
	TWSR = 0x00;
    1f2a:	e1 e2       	ldi	r30, 0x21	; 33
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	10 82       	st	Z, r1
	TWCR =(1<<TWEN);
    1f30:	e6 e5       	ldi	r30, 0x56	; 86
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	84 e0       	ldi	r24, 0x04	; 4
    1f36:	80 83       	st	Z, r24

}
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	1f 91       	pop	r17
    1f42:	0f 91       	pop	r16
    1f44:	08 95       	ret

00001f46 <TWI_start>:

void TWI_start(void){
    1f46:	df 93       	push	r29
    1f48:	cf 93       	push	r28
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62

	TWCR =(1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1f4e:	e6 e5       	ldi	r30, 0x56	; 86
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	84 ea       	ldi	r24, 0xA4	; 164
    1f54:	80 83       	st	Z, r24

	while(BIT_IS_CLEAR(TWCR,TWINT));
    1f56:	e6 e5       	ldi	r30, 0x56	; 86
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	88 23       	and	r24, r24
    1f5e:	dc f7       	brge	.-10     	; 0x1f56 <TWI_start+0x10>

}
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	08 95       	ret

00001f66 <TWI_stop>:


void TWI_stop(void){
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62

	TWCR =(1<<TWEN)|(1<<TWSTO)|(1<<TWINT);
    1f6e:	e6 e5       	ldi	r30, 0x56	; 86
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	84 e9       	ldi	r24, 0x94	; 148
    1f74:	80 83       	st	Z, r24

	//while(BIT_IS_CLEAR(TWCR,TWINT)); i don't have to put it

}
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <TWI_writeByte>:

void TWI_writeByte(uint8 data){
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	0f 92       	push	r0
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
    1f86:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;
    1f88:	e3 e2       	ldi	r30, 0x23	; 35
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	80 83       	st	Z, r24
	TWCR =(1<<TWEN)|(1<<TWINT);
    1f90:	e6 e5       	ldi	r30, 0x56	; 86
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	84 e8       	ldi	r24, 0x84	; 132
    1f96:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1f98:	e6 e5       	ldi	r30, 0x56	; 86
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	88 23       	and	r24, r24
    1fa0:	dc f7       	brge	.-10     	; 0x1f98 <TWI_writeByte+0x1c>
}
    1fa2:	0f 90       	pop	r0
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void){
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62

	TWCR =(1<<TWEN)|(1<<TWEA)|(1<<TWINT);
    1fb2:	e6 e5       	ldi	r30, 0x56	; 86
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	84 ec       	ldi	r24, 0xC4	; 196
    1fb8:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1fba:	e6 e5       	ldi	r30, 0x56	; 86
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	88 23       	and	r24, r24
    1fc2:	dc f7       	brge	.-10     	; 0x1fba <TWI_readByteWithACK+0x10>
	return TWDR;
    1fc4:	e3 e2       	ldi	r30, 0x23	; 35
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
}
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	08 95       	ret

00001fd0 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void){
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
	TWCR =(1<<TWEN)|(1<<TWINT);
    1fd8:	e6 e5       	ldi	r30, 0x56	; 86
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	84 e8       	ldi	r24, 0x84	; 132
    1fde:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1fe0:	e6 e5       	ldi	r30, 0x56	; 86
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	88 23       	and	r24, r24
    1fe8:	dc f7       	brge	.-10     	; 0x1fe0 <TWI_readByteWithNACK+0x10>
	return TWDR;
    1fea:	e3 e2       	ldi	r30, 0x23	; 35
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
}
    1ff0:	cf 91       	pop	r28
    1ff2:	df 91       	pop	r29
    1ff4:	08 95       	ret

00001ff6 <TWI_getStatus>:

uint8 TWI_getStatus(void){
    1ff6:	df 93       	push	r29
    1ff8:	cf 93       	push	r28
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62

	return TWSR & 0XF8;
    1ffe:	e1 e2       	ldi	r30, 0x21	; 33
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	88 7f       	andi	r24, 0xF8	; 248
}
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	08 95       	ret

0000200c <UART_init>:
#include "uart.h"
#include "std_types.h"
#include "common_macros.h"
#include "avr/io.h"

void UART_init(UART_config * config){
    200c:	df 93       	push	r29
    200e:	cf 93       	push	r28
    2010:	00 d0       	rcall	.+0      	; 0x2012 <UART_init+0x6>
    2012:	00 d0       	rcall	.+0      	; 0x2014 <UART_init+0x8>
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	9c 83       	std	Y+4, r25	; 0x04
    201a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    201c:	1a 82       	std	Y+2, r1	; 0x02
    201e:	19 82       	std	Y+1, r1	; 0x01
	ubrr_value = (uint16)(((F_CPU / (config->baud_rate * 8UL))) - 1);
    2020:	eb 81       	ldd	r30, Y+3	; 0x03
    2022:	fc 81       	ldd	r31, Y+4	; 0x04
    2024:	83 81       	ldd	r24, Z+3	; 0x03
    2026:	94 81       	ldd	r25, Z+4	; 0x04
    2028:	a5 81       	ldd	r26, Z+5	; 0x05
    202a:	b6 81       	ldd	r27, Z+6	; 0x06
    202c:	88 0f       	add	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	aa 1f       	adc	r26, r26
    2032:	bb 1f       	adc	r27, r27
    2034:	88 0f       	add	r24, r24
    2036:	99 1f       	adc	r25, r25
    2038:	aa 1f       	adc	r26, r26
    203a:	bb 1f       	adc	r27, r27
    203c:	88 0f       	add	r24, r24
    203e:	99 1f       	adc	r25, r25
    2040:	aa 1f       	adc	r26, r26
    2042:	bb 1f       	adc	r27, r27
    2044:	9c 01       	movw	r18, r24
    2046:	ad 01       	movw	r20, r26
    2048:	80 e4       	ldi	r24, 0x40	; 64
    204a:	92 e4       	ldi	r25, 0x42	; 66
    204c:	af e0       	ldi	r26, 0x0F	; 15
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	bc 01       	movw	r22, r24
    2052:	cd 01       	movw	r24, r26
    2054:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__udivmodsi4>
    2058:	da 01       	movw	r26, r20
    205a:	c9 01       	movw	r24, r18
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	9a 83       	std	Y+2, r25	; 0x02
    2060:	89 83       	std	Y+1, r24	; 0x01
	UCSRA =(1<<U2X);
    2062:	eb e2       	ldi	r30, 0x2B	; 43
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	82 e0       	ldi	r24, 0x02	; 2
    2068:	80 83       	st	Z, r24
	UCSRB=(1<<TXEN)|(1<<RXEN);
    206a:	ea e2       	ldi	r30, 0x2A	; 42
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	88 e1       	ldi	r24, 0x18	; 24
    2070:	80 83       	st	Z, r24
	UCSRC=(1<<URSEL)|((config->no_of_bit_data)<<1)|((config->stopbit)<<3)|((config->parity)<<4);
    2072:	a0 e4       	ldi	r26, 0x40	; 64
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	eb 81       	ldd	r30, Y+3	; 0x03
    2078:	fc 81       	ldd	r31, Y+4	; 0x04
    207a:	80 81       	ld	r24, Z
    207c:	88 2f       	mov	r24, r24
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	88 0f       	add	r24, r24
    2082:	99 1f       	adc	r25, r25
    2084:	28 2f       	mov	r18, r24
    2086:	20 68       	ori	r18, 0x80	; 128
    2088:	eb 81       	ldd	r30, Y+3	; 0x03
    208a:	fc 81       	ldd	r31, Y+4	; 0x04
    208c:	82 81       	ldd	r24, Z+2	; 0x02
    208e:	88 2f       	mov	r24, r24
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	88 0f       	add	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	28 2b       	or	r18, r24
    20a0:	eb 81       	ldd	r30, Y+3	; 0x03
    20a2:	fc 81       	ldd	r31, Y+4	; 0x04
    20a4:	81 81       	ldd	r24, Z+1	; 0x01
    20a6:	88 2f       	mov	r24, r24
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	82 95       	swap	r24
    20ac:	92 95       	swap	r25
    20ae:	90 7f       	andi	r25, 0xF0	; 240
    20b0:	98 27       	eor	r25, r24
    20b2:	80 7f       	andi	r24, 0xF0	; 240
    20b4:	98 27       	eor	r25, r24
    20b6:	82 2b       	or	r24, r18
    20b8:	8c 93       	st	X, r24
	UBRRH=(ubrr_value>>8);
    20ba:	e0 e4       	ldi	r30, 0x40	; 64
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	9a 81       	ldd	r25, Y+2	; 0x02
    20c2:	89 2f       	mov	r24, r25
    20c4:	99 27       	eor	r25, r25
    20c6:	80 83       	st	Z, r24
	UBRRL=(ubrr_value);
    20c8:	e9 e2       	ldi	r30, 0x29	; 41
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
    20ce:	80 83       	st	Z, r24

}
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	08 95       	ret

000020de <UART_send_byte>:


void UART_send_byte(uint8 byte){
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	0f 92       	push	r0
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
    20e8:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    20ea:	eb e2       	ldi	r30, 0x2B	; 43
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	88 2f       	mov	r24, r24
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	80 72       	andi	r24, 0x20	; 32
    20f6:	90 70       	andi	r25, 0x00	; 0
    20f8:	00 97       	sbiw	r24, 0x00	; 0
    20fa:	b9 f3       	breq	.-18     	; 0x20ea <UART_send_byte+0xc>
	UDR=byte;
    20fc:	ec e2       	ldi	r30, 0x2C	; 44
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	80 83       	st	Z, r24
}
    2104:	0f 90       	pop	r0
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <UART_receive_byte>:

uint8 UART_receive_byte(){
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2114:	eb e2       	ldi	r30, 0x2B	; 43
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	88 23       	and	r24, r24
    211c:	dc f7       	brge	.-10     	; 0x2114 <UART_receive_byte+0x8>
	return UDR;
    211e:	ec e2       	ldi	r30, 0x2C	; 44
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
}
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <UART_send_string>:

void UART_send_string(uint8 *str)
{
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	00 d0       	rcall	.+0      	; 0x2130 <UART_send_string+0x6>
    2130:	00 d0       	rcall	.+0      	; 0x2132 <UART_send_string+0x8>
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    2136:	9c 83       	std	Y+4, r25	; 0x04
    2138:	8b 83       	std	Y+3, r24	; 0x03

	for(int i=0;str[i]!='*';i++)
    213a:	1a 82       	std	Y+2, r1	; 0x02
    213c:	19 82       	std	Y+1, r1	; 0x01
    213e:	0f c0       	rjmp	.+30     	; 0x215e <UART_send_string+0x34>
	{
		UART_send_byte(str[i]);
    2140:	29 81       	ldd	r18, Y+1	; 0x01
    2142:	3a 81       	ldd	r19, Y+2	; 0x02
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	9c 81       	ldd	r25, Y+4	; 0x04
    2148:	fc 01       	movw	r30, r24
    214a:	e2 0f       	add	r30, r18
    214c:	f3 1f       	adc	r31, r19
    214e:	80 81       	ld	r24, Z
    2150:	0e 94 6f 10 	call	0x20de	; 0x20de <UART_send_byte>
}

void UART_send_string(uint8 *str)
{

	for(int i=0;str[i]!='*';i++)
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	9a 81       	ldd	r25, Y+2	; 0x02
    2158:	01 96       	adiw	r24, 0x01	; 1
    215a:	9a 83       	std	Y+2, r25	; 0x02
    215c:	89 83       	std	Y+1, r24	; 0x01
    215e:	29 81       	ldd	r18, Y+1	; 0x01
    2160:	3a 81       	ldd	r19, Y+2	; 0x02
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	9c 81       	ldd	r25, Y+4	; 0x04
    2166:	fc 01       	movw	r30, r24
    2168:	e2 0f       	add	r30, r18
    216a:	f3 1f       	adc	r31, r19
    216c:	80 81       	ld	r24, Z
    216e:	8a 32       	cpi	r24, 0x2A	; 42
    2170:	39 f7       	brne	.-50     	; 0x2140 <UART_send_string+0x16>
	{
		UART_send_byte(str[i]);
	}

}
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <UART_send_array>:

void UART_send_array(uint8 *arr)
{
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	00 d0       	rcall	.+0      	; 0x2186 <UART_send_array+0x6>
    2186:	00 d0       	rcall	.+0      	; 0x2188 <UART_send_array+0x8>
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
    218c:	9c 83       	std	Y+4, r25	; 0x04
    218e:	8b 83       	std	Y+3, r24	; 0x03

	for(int i=0;arr[i]!='*';i++)
    2190:	1a 82       	std	Y+2, r1	; 0x02
    2192:	19 82       	std	Y+1, r1	; 0x01
    2194:	0f c0       	rjmp	.+30     	; 0x21b4 <UART_send_array+0x34>
	{
		UART_send_byte(arr[i]);
    2196:	29 81       	ldd	r18, Y+1	; 0x01
    2198:	3a 81       	ldd	r19, Y+2	; 0x02
    219a:	8b 81       	ldd	r24, Y+3	; 0x03
    219c:	9c 81       	ldd	r25, Y+4	; 0x04
    219e:	fc 01       	movw	r30, r24
    21a0:	e2 0f       	add	r30, r18
    21a2:	f3 1f       	adc	r31, r19
    21a4:	80 81       	ld	r24, Z
    21a6:	0e 94 6f 10 	call	0x20de	; 0x20de <UART_send_byte>
}

void UART_send_array(uint8 *arr)
{

	for(int i=0;arr[i]!='*';i++)
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	9a 81       	ldd	r25, Y+2	; 0x02
    21ae:	01 96       	adiw	r24, 0x01	; 1
    21b0:	9a 83       	std	Y+2, r25	; 0x02
    21b2:	89 83       	std	Y+1, r24	; 0x01
    21b4:	29 81       	ldd	r18, Y+1	; 0x01
    21b6:	3a 81       	ldd	r19, Y+2	; 0x02
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	9c 81       	ldd	r25, Y+4	; 0x04
    21bc:	fc 01       	movw	r30, r24
    21be:	e2 0f       	add	r30, r18
    21c0:	f3 1f       	adc	r31, r19
    21c2:	80 81       	ld	r24, Z
    21c4:	8a 32       	cpi	r24, 0x2A	; 42
    21c6:	39 f7       	brne	.-50     	; 0x2196 <UART_send_array+0x16>
	{
		UART_send_byte(arr[i]);
	}

}
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	08 95       	ret

000021d6 <UART_receiveString>:


void UART_receiveString(uint8 *Str)
	{
    21d6:	0f 93       	push	r16
    21d8:	1f 93       	push	r17
    21da:	df 93       	push	r29
    21dc:	cf 93       	push	r28
    21de:	00 d0       	rcall	.+0      	; 0x21e0 <UART_receiveString+0xa>
    21e0:	0f 92       	push	r0
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
    21e6:	9b 83       	std	Y+3, r25	; 0x03
    21e8:	8a 83       	std	Y+2, r24	; 0x02
		uint8 i = 0;
    21ea:	19 82       	std	Y+1, r1	; 0x01

		/* Receive the first byte */
		Str[i] = UART_receive_byte();
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	28 2f       	mov	r18, r24
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	9b 81       	ldd	r25, Y+3	; 0x03
    21f6:	8c 01       	movw	r16, r24
    21f8:	02 0f       	add	r16, r18
    21fa:	13 1f       	adc	r17, r19
    21fc:	0e 94 86 10 	call	0x210c	; 0x210c <UART_receive_byte>
    2200:	f8 01       	movw	r30, r16
    2202:	80 83       	st	Z, r24
    2204:	0f c0       	rjmp	.+30     	; 0x2224 <UART_receiveString+0x4e>

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
		{
			i++;
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	8f 5f       	subi	r24, 0xFF	; 255
    220a:	89 83       	std	Y+1, r24	; 0x01
			Str[i] = UART_receive_byte();
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	28 2f       	mov	r18, r24
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	8a 81       	ldd	r24, Y+2	; 0x02
    2214:	9b 81       	ldd	r25, Y+3	; 0x03
    2216:	8c 01       	movw	r16, r24
    2218:	02 0f       	add	r16, r18
    221a:	13 1f       	adc	r17, r19
    221c:	0e 94 86 10 	call	0x210c	; 0x210c <UART_receive_byte>
    2220:	f8 01       	movw	r30, r16
    2222:	80 83       	st	Z, r24

		/* Receive the first byte */
		Str[i] = UART_receive_byte();

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	28 2f       	mov	r18, r24
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	8a 81       	ldd	r24, Y+2	; 0x02
    222c:	9b 81       	ldd	r25, Y+3	; 0x03
    222e:	fc 01       	movw	r30, r24
    2230:	e2 0f       	add	r30, r18
    2232:	f3 1f       	adc	r31, r19
    2234:	80 81       	ld	r24, Z
    2236:	83 32       	cpi	r24, 0x23	; 35
    2238:	31 f7       	brne	.-52     	; 0x2206 <UART_receiveString+0x30>
			i++;
			Str[i] = UART_receive_byte();
		}

		/* After receiving the whole string plus the '#', replace the '#' with '\0' */
		Str[i] = '\0';
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	28 2f       	mov	r18, r24
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	9b 81       	ldd	r25, Y+3	; 0x03
    2244:	fc 01       	movw	r30, r24
    2246:	e2 0f       	add	r30, r18
    2248:	f3 1f       	adc	r31, r19
    224a:	10 82       	st	Z, r1
	}
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	cf 91       	pop	r28
    2254:	df 91       	pop	r29
    2256:	1f 91       	pop	r17
    2258:	0f 91       	pop	r16
    225a:	08 95       	ret

0000225c <UART_receivearry>:


void UART_receivearry(uint8 *arr)
	{
    225c:	0f 93       	push	r16
    225e:	1f 93       	push	r17
    2260:	df 93       	push	r29
    2262:	cf 93       	push	r28
    2264:	00 d0       	rcall	.+0      	; 0x2266 <UART_receivearry+0xa>
    2266:	0f 92       	push	r0
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
    226c:	9b 83       	std	Y+3, r25	; 0x03
    226e:	8a 83       	std	Y+2, r24	; 0x02
		uint8 i = 0;
    2270:	19 82       	std	Y+1, r1	; 0x01

		/* Receive the first byte */
		arr[i] = UART_receive_byte();
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	28 2f       	mov	r18, r24
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	9b 81       	ldd	r25, Y+3	; 0x03
    227c:	8c 01       	movw	r16, r24
    227e:	02 0f       	add	r16, r18
    2280:	13 1f       	adc	r17, r19
    2282:	0e 94 86 10 	call	0x210c	; 0x210c <UART_receive_byte>
    2286:	f8 01       	movw	r30, r16
    2288:	80 83       	st	Z, r24
    228a:	0f c0       	rjmp	.+30     	; 0x22aa <UART_receivearry+0x4e>

		/* Receive the whole array until the '*' */
		while(arr[i] != '*')
		{
			i++;
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	8f 5f       	subi	r24, 0xFF	; 255
    2290:	89 83       	std	Y+1, r24	; 0x01
			arr[i] = UART_receive_byte();
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	8a 81       	ldd	r24, Y+2	; 0x02
    229a:	9b 81       	ldd	r25, Y+3	; 0x03
    229c:	8c 01       	movw	r16, r24
    229e:	02 0f       	add	r16, r18
    22a0:	13 1f       	adc	r17, r19
    22a2:	0e 94 86 10 	call	0x210c	; 0x210c <UART_receive_byte>
    22a6:	f8 01       	movw	r30, r16
    22a8:	80 83       	st	Z, r24

		/* Receive the first byte */
		arr[i] = UART_receive_byte();

		/* Receive the whole array until the '*' */
		while(arr[i] != '*')
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	28 2f       	mov	r18, r24
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	9b 81       	ldd	r25, Y+3	; 0x03
    22b4:	fc 01       	movw	r30, r24
    22b6:	e2 0f       	add	r30, r18
    22b8:	f3 1f       	adc	r31, r19
    22ba:	80 81       	ld	r24, Z
    22bc:	8a 32       	cpi	r24, 0x2A	; 42
    22be:	31 f7       	brne	.-52     	; 0x228c <UART_receivearry+0x30>
			i++;
			arr[i] = UART_receive_byte();
		}

		/* After receiving the whole string plus the '#', replace the '#' with '\0' */
		arr[i] = '*';
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	28 2f       	mov	r18, r24
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	9b 81       	ldd	r25, Y+3	; 0x03
    22ca:	fc 01       	movw	r30, r24
    22cc:	e2 0f       	add	r30, r18
    22ce:	f3 1f       	adc	r31, r19
    22d0:	8a e2       	ldi	r24, 0x2A	; 42
    22d2:	80 83       	st	Z, r24
	}
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	1f 91       	pop	r17
    22e0:	0f 91       	pop	r16
    22e2:	08 95       	ret

000022e4 <__udivmodsi4>:
    22e4:	a1 e2       	ldi	r26, 0x21	; 33
    22e6:	1a 2e       	mov	r1, r26
    22e8:	aa 1b       	sub	r26, r26
    22ea:	bb 1b       	sub	r27, r27
    22ec:	fd 01       	movw	r30, r26
    22ee:	0d c0       	rjmp	.+26     	; 0x230a <__udivmodsi4_ep>

000022f0 <__udivmodsi4_loop>:
    22f0:	aa 1f       	adc	r26, r26
    22f2:	bb 1f       	adc	r27, r27
    22f4:	ee 1f       	adc	r30, r30
    22f6:	ff 1f       	adc	r31, r31
    22f8:	a2 17       	cp	r26, r18
    22fa:	b3 07       	cpc	r27, r19
    22fc:	e4 07       	cpc	r30, r20
    22fe:	f5 07       	cpc	r31, r21
    2300:	20 f0       	brcs	.+8      	; 0x230a <__udivmodsi4_ep>
    2302:	a2 1b       	sub	r26, r18
    2304:	b3 0b       	sbc	r27, r19
    2306:	e4 0b       	sbc	r30, r20
    2308:	f5 0b       	sbc	r31, r21

0000230a <__udivmodsi4_ep>:
    230a:	66 1f       	adc	r22, r22
    230c:	77 1f       	adc	r23, r23
    230e:	88 1f       	adc	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	1a 94       	dec	r1
    2314:	69 f7       	brne	.-38     	; 0x22f0 <__udivmodsi4_loop>
    2316:	60 95       	com	r22
    2318:	70 95       	com	r23
    231a:	80 95       	com	r24
    231c:	90 95       	com	r25
    231e:	9b 01       	movw	r18, r22
    2320:	ac 01       	movw	r20, r24
    2322:	bd 01       	movw	r22, r26
    2324:	cf 01       	movw	r24, r30
    2326:	08 95       	ret

00002328 <__prologue_saves__>:
    2328:	2f 92       	push	r2
    232a:	3f 92       	push	r3
    232c:	4f 92       	push	r4
    232e:	5f 92       	push	r5
    2330:	6f 92       	push	r6
    2332:	7f 92       	push	r7
    2334:	8f 92       	push	r8
    2336:	9f 92       	push	r9
    2338:	af 92       	push	r10
    233a:	bf 92       	push	r11
    233c:	cf 92       	push	r12
    233e:	df 92       	push	r13
    2340:	ef 92       	push	r14
    2342:	ff 92       	push	r15
    2344:	0f 93       	push	r16
    2346:	1f 93       	push	r17
    2348:	cf 93       	push	r28
    234a:	df 93       	push	r29
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
    2350:	ca 1b       	sub	r28, r26
    2352:	db 0b       	sbc	r29, r27
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	f8 94       	cli
    2358:	de bf       	out	0x3e, r29	; 62
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	cd bf       	out	0x3d, r28	; 61
    235e:	09 94       	ijmp

00002360 <__epilogue_restores__>:
    2360:	2a 88       	ldd	r2, Y+18	; 0x12
    2362:	39 88       	ldd	r3, Y+17	; 0x11
    2364:	48 88       	ldd	r4, Y+16	; 0x10
    2366:	5f 84       	ldd	r5, Y+15	; 0x0f
    2368:	6e 84       	ldd	r6, Y+14	; 0x0e
    236a:	7d 84       	ldd	r7, Y+13	; 0x0d
    236c:	8c 84       	ldd	r8, Y+12	; 0x0c
    236e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2370:	aa 84       	ldd	r10, Y+10	; 0x0a
    2372:	b9 84       	ldd	r11, Y+9	; 0x09
    2374:	c8 84       	ldd	r12, Y+8	; 0x08
    2376:	df 80       	ldd	r13, Y+7	; 0x07
    2378:	ee 80       	ldd	r14, Y+6	; 0x06
    237a:	fd 80       	ldd	r15, Y+5	; 0x05
    237c:	0c 81       	ldd	r16, Y+4	; 0x04
    237e:	1b 81       	ldd	r17, Y+3	; 0x03
    2380:	aa 81       	ldd	r26, Y+2	; 0x02
    2382:	b9 81       	ldd	r27, Y+1	; 0x01
    2384:	ce 0f       	add	r28, r30
    2386:	d1 1d       	adc	r29, r1
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	de bf       	out	0x3e, r29	; 62
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	cd bf       	out	0x3d, r28	; 61
    2392:	ed 01       	movw	r28, r26
    2394:	08 95       	ret

00002396 <_exit>:
    2396:	f8 94       	cli

00002398 <__stop_program>:
    2398:	ff cf       	rjmp	.-2      	; 0x2398 <__stop_program>
