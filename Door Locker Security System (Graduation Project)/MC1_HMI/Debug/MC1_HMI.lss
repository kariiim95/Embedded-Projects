
MC1_HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005426  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  00005426  000054ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800184  00800184  000055de  2**0
                  ALLOC
  3 .stab         00004704  00000000  00000000  000055e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001324  00000000  00000000  00009ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000b008  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000b148  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000b2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000cf01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ddec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000eb9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ecfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ef89  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f757  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 3d 27 	jmp	0x4e7a	; 0x4e7a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 10 27 	jmp	0x4e20	; 0x4e20 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	f4 e5       	ldi	r31, 0x54	; 84
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 39       	cpi	r26, 0x93	; 147
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <main>
      8a:	0c 94 11 2a 	jmp	0x5422	; 0x5422 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 95 29 	jmp	0x532a	; 0x532a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e6       	ldi	r26, 0x6E	; 110
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b1 29 	jmp	0x5362	; 0x5362 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a1 29 	jmp	0x5342	; 0x5342 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bd 29 	jmp	0x537a	; 0x537a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a1 29 	jmp	0x5342	; 0x5342 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bd 29 	jmp	0x537a	; 0x537a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 95 29 	jmp	0x532a	; 0x532a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e6       	ldi	r24, 0x6E	; 110
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b1 29 	jmp	0x5362	; 0x5362 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a1 29 	jmp	0x5342	; 0x5342 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 bd 29 	jmp	0x537a	; 0x537a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a1 29 	jmp	0x5342	; 0x5342 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 bd 29 	jmp	0x537a	; 0x537a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a1 29 	jmp	0x5342	; 0x5342 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 bd 29 	jmp	0x537a	; 0x537a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a5 29 	jmp	0x534a	; 0x534a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c1 29 	jmp	0x5382	; 0x5382 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Pass1_Check_Display>:



//Function that takes pass1 and saved it in global array
void Pass1_Check_Display(void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	e9 97       	sbiw	r28, 0x39	; 57
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
	uint8 i=0;//loop for 5 digits only
     b5e:	19 ae       	std	Y+57, r1	; 0x39

	LCD_displayString("pls enter pass:");
     b60:	80 e6       	ldi	r24, 0x60	; 96
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <LCD_displayString>
	LCD_moveCursor(1,0);
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	0e 94 88 26 	call	0x4d10	; 0x4d10 <LCD_moveCursor>
     b70:	00 c1       	rjmp	.+512    	; 0xd72 <Pass1_Check_Display+0x22c>
	while(i !=5)
	{
			for (i=0;i<5;i++)
     b72:	19 ae       	std	Y+57, r1	; 0x39
     b74:	fa c0       	rjmp	.+500    	; 0xd6a <Pass1_Check_Display+0x224>
			{
				//accept char from 0 to 9 only
				while(!(KEYPAD_getPressedKey() <= 9) && (KEYPAD_getPressedKey() >= 0)) {}
     b76:	0e 94 2c 1b 	call	0x3658	; 0x3658 <KEYPAD_getPressedKey>
     b7a:	8a 30       	cpi	r24, 0x0A	; 10
     b7c:	18 f0       	brcs	.+6      	; 0xb84 <Pass1_Check_Display+0x3e>
     b7e:	0e 94 2c 1b 	call	0x3658	; 0x3658 <KEYPAD_getPressedKey>
     b82:	f9 cf       	rjmp	.-14     	; 0xb76 <Pass1_Check_Display+0x30>


					Pass1_Arry[i]=KEYPAD_getPressedKey();
     b84:	89 ad       	ldd	r24, Y+57	; 0x39
     b86:	08 2f       	mov	r16, r24
     b88:	10 e0       	ldi	r17, 0x00	; 0
     b8a:	0e 94 2c 1b 	call	0x3658	; 0x3658 <KEYPAD_getPressedKey>
     b8e:	f8 01       	movw	r30, r16
     b90:	e8 57       	subi	r30, 0x78	; 120
     b92:	fe 4f       	sbci	r31, 0xFE	; 254
     b94:	80 83       	st	Z, r24
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	aa ef       	ldi	r26, 0xFA	; 250
     b9c:	b3 e4       	ldi	r27, 0x43	; 67
     b9e:	8d ab       	std	Y+53, r24	; 0x35
     ba0:	9e ab       	std	Y+54, r25	; 0x36
     ba2:	af ab       	std	Y+55, r26	; 0x37
     ba4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ba6:	6d a9       	ldd	r22, Y+53	; 0x35
     ba8:	7e a9       	ldd	r23, Y+54	; 0x36
     baa:	8f a9       	ldd	r24, Y+55	; 0x37
     bac:	98 ad       	ldd	r25, Y+56	; 0x38
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	4a e7       	ldi	r20, 0x7A	; 122
     bb4:	53 e4       	ldi	r21, 0x43	; 67
     bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	89 ab       	std	Y+49, r24	; 0x31
     bc0:	9a ab       	std	Y+50, r25	; 0x32
     bc2:	ab ab       	std	Y+51, r26	; 0x33
     bc4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     bc6:	69 a9       	ldd	r22, Y+49	; 0x31
     bc8:	7a a9       	ldd	r23, Y+50	; 0x32
     bca:	8b a9       	ldd	r24, Y+51	; 0x33
     bcc:	9c a9       	ldd	r25, Y+52	; 0x34
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	40 e8       	ldi	r20, 0x80	; 128
     bd4:	5f e3       	ldi	r21, 0x3F	; 63
     bd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bda:	88 23       	and	r24, r24
     bdc:	2c f4       	brge	.+10     	; 0xbe8 <Pass1_Check_Display+0xa2>
		__ticks = 1;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	98 ab       	std	Y+48, r25	; 0x30
     be4:	8f a7       	std	Y+47, r24	; 0x2f
     be6:	3f c0       	rjmp	.+126    	; 0xc66 <Pass1_Check_Display+0x120>
	else if (__tmp > 65535)
     be8:	69 a9       	ldd	r22, Y+49	; 0x31
     bea:	7a a9       	ldd	r23, Y+50	; 0x32
     bec:	8b a9       	ldd	r24, Y+51	; 0x33
     bee:	9c a9       	ldd	r25, Y+52	; 0x34
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	3f ef       	ldi	r19, 0xFF	; 255
     bf4:	4f e7       	ldi	r20, 0x7F	; 127
     bf6:	57 e4       	ldi	r21, 0x47	; 71
     bf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bfc:	18 16       	cp	r1, r24
     bfe:	4c f5       	brge	.+82     	; 0xc52 <Pass1_Check_Display+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c00:	6d a9       	ldd	r22, Y+53	; 0x35
     c02:	7e a9       	ldd	r23, Y+54	; 0x36
     c04:	8f a9       	ldd	r24, Y+55	; 0x37
     c06:	98 ad       	ldd	r25, Y+56	; 0x38
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	40 e2       	ldi	r20, 0x20	; 32
     c0e:	51 e4       	ldi	r21, 0x41	; 65
     c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	bc 01       	movw	r22, r24
     c1a:	cd 01       	movw	r24, r26
     c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c20:	dc 01       	movw	r26, r24
     c22:	cb 01       	movw	r24, r22
     c24:	98 ab       	std	Y+48, r25	; 0x30
     c26:	8f a7       	std	Y+47, r24	; 0x2f
     c28:	0f c0       	rjmp	.+30     	; 0xc48 <Pass1_Check_Display+0x102>
     c2a:	89 e1       	ldi	r24, 0x19	; 25
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	9e a7       	std	Y+46, r25	; 0x2e
     c30:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c32:	8d a5       	ldd	r24, Y+45	; 0x2d
     c34:	9e a5       	ldd	r25, Y+46	; 0x2e
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	f1 f7       	brne	.-4      	; 0xc36 <Pass1_Check_Display+0xf0>
     c3a:	9e a7       	std	Y+46, r25	; 0x2e
     c3c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c3e:	8f a5       	ldd	r24, Y+47	; 0x2f
     c40:	98 a9       	ldd	r25, Y+48	; 0x30
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	98 ab       	std	Y+48, r25	; 0x30
     c46:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c48:	8f a5       	ldd	r24, Y+47	; 0x2f
     c4a:	98 a9       	ldd	r25, Y+48	; 0x30
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	69 f7       	brne	.-38     	; 0xc2a <Pass1_Check_Display+0xe4>
     c50:	14 c0       	rjmp	.+40     	; 0xc7a <Pass1_Check_Display+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c52:	69 a9       	ldd	r22, Y+49	; 0x31
     c54:	7a a9       	ldd	r23, Y+50	; 0x32
     c56:	8b a9       	ldd	r24, Y+51	; 0x33
     c58:	9c a9       	ldd	r25, Y+52	; 0x34
     c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	98 ab       	std	Y+48, r25	; 0x30
     c64:	8f a7       	std	Y+47, r24	; 0x2f
     c66:	8f a5       	ldd	r24, Y+47	; 0x2f
     c68:	98 a9       	ldd	r25, Y+48	; 0x30
     c6a:	9c a7       	std	Y+44, r25	; 0x2c
     c6c:	8b a7       	std	Y+43, r24	; 0x2b
     c6e:	8b a5       	ldd	r24, Y+43	; 0x2b
     c70:	9c a5       	ldd	r25, Y+44	; 0x2c
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	f1 f7       	brne	.-4      	; 0xc72 <Pass1_Check_Display+0x12c>
     c76:	9c a7       	std	Y+44, r25	; 0x2c
     c78:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(500);
					LCD_displayCharacter('*');
     c7a:	8a e2       	ldi	r24, 0x2A	; 42
     c7c:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <LCD_displayCharacter>
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	a8 ec       	ldi	r26, 0xC8	; 200
     c86:	b2 e4       	ldi	r27, 0x42	; 66
     c88:	8f a3       	std	Y+39, r24	; 0x27
     c8a:	98 a7       	std	Y+40, r25	; 0x28
     c8c:	a9 a7       	std	Y+41, r26	; 0x29
     c8e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c90:	6f a1       	ldd	r22, Y+39	; 0x27
     c92:	78 a5       	ldd	r23, Y+40	; 0x28
     c94:	89 a5       	ldd	r24, Y+41	; 0x29
     c96:	9a a5       	ldd	r25, Y+42	; 0x2a
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	4a e7       	ldi	r20, 0x7A	; 122
     c9e:	53 e4       	ldi	r21, 0x43	; 67
     ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ca4:	dc 01       	movw	r26, r24
     ca6:	cb 01       	movw	r24, r22
     ca8:	8b a3       	std	Y+35, r24	; 0x23
     caa:	9c a3       	std	Y+36, r25	; 0x24
     cac:	ad a3       	std	Y+37, r26	; 0x25
     cae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     cb0:	6b a1       	ldd	r22, Y+35	; 0x23
     cb2:	7c a1       	ldd	r23, Y+36	; 0x24
     cb4:	8d a1       	ldd	r24, Y+37	; 0x25
     cb6:	9e a1       	ldd	r25, Y+38	; 0x26
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	40 e8       	ldi	r20, 0x80	; 128
     cbe:	5f e3       	ldi	r21, 0x3F	; 63
     cc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cc4:	88 23       	and	r24, r24
     cc6:	2c f4       	brge	.+10     	; 0xcd2 <Pass1_Check_Display+0x18c>
		__ticks = 1;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	9a a3       	std	Y+34, r25	; 0x22
     cce:	89 a3       	std	Y+33, r24	; 0x21
     cd0:	3f c0       	rjmp	.+126    	; 0xd50 <Pass1_Check_Display+0x20a>
	else if (__tmp > 65535)
     cd2:	6b a1       	ldd	r22, Y+35	; 0x23
     cd4:	7c a1       	ldd	r23, Y+36	; 0x24
     cd6:	8d a1       	ldd	r24, Y+37	; 0x25
     cd8:	9e a1       	ldd	r25, Y+38	; 0x26
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	3f ef       	ldi	r19, 0xFF	; 255
     cde:	4f e7       	ldi	r20, 0x7F	; 127
     ce0:	57 e4       	ldi	r21, 0x47	; 71
     ce2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ce6:	18 16       	cp	r1, r24
     ce8:	4c f5       	brge	.+82     	; 0xd3c <Pass1_Check_Display+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cea:	6f a1       	ldd	r22, Y+39	; 0x27
     cec:	78 a5       	ldd	r23, Y+40	; 0x28
     cee:	89 a5       	ldd	r24, Y+41	; 0x29
     cf0:	9a a5       	ldd	r25, Y+42	; 0x2a
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	40 e2       	ldi	r20, 0x20	; 32
     cf8:	51 e4       	ldi	r21, 0x41	; 65
     cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	bc 01       	movw	r22, r24
     d04:	cd 01       	movw	r24, r26
     d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d0a:	dc 01       	movw	r26, r24
     d0c:	cb 01       	movw	r24, r22
     d0e:	9a a3       	std	Y+34, r25	; 0x22
     d10:	89 a3       	std	Y+33, r24	; 0x21
     d12:	0f c0       	rjmp	.+30     	; 0xd32 <Pass1_Check_Display+0x1ec>
     d14:	89 e1       	ldi	r24, 0x19	; 25
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	98 a3       	std	Y+32, r25	; 0x20
     d1a:	8f 8f       	std	Y+31, r24	; 0x1f
     d1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d1e:	98 a1       	ldd	r25, Y+32	; 0x20
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	f1 f7       	brne	.-4      	; 0xd20 <Pass1_Check_Display+0x1da>
     d24:	98 a3       	std	Y+32, r25	; 0x20
     d26:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d28:	89 a1       	ldd	r24, Y+33	; 0x21
     d2a:	9a a1       	ldd	r25, Y+34	; 0x22
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	9a a3       	std	Y+34, r25	; 0x22
     d30:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d32:	89 a1       	ldd	r24, Y+33	; 0x21
     d34:	9a a1       	ldd	r25, Y+34	; 0x22
     d36:	00 97       	sbiw	r24, 0x00	; 0
     d38:	69 f7       	brne	.-38     	; 0xd14 <Pass1_Check_Display+0x1ce>
     d3a:	14 c0       	rjmp	.+40     	; 0xd64 <Pass1_Check_Display+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d3c:	6b a1       	ldd	r22, Y+35	; 0x23
     d3e:	7c a1       	ldd	r23, Y+36	; 0x24
     d40:	8d a1       	ldd	r24, Y+37	; 0x25
     d42:	9e a1       	ldd	r25, Y+38	; 0x26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9a a3       	std	Y+34, r25	; 0x22
     d4e:	89 a3       	std	Y+33, r24	; 0x21
     d50:	89 a1       	ldd	r24, Y+33	; 0x21
     d52:	9a a1       	ldd	r25, Y+34	; 0x22
     d54:	9e 8f       	std	Y+30, r25	; 0x1e
     d56:	8d 8f       	std	Y+29, r24	; 0x1d
     d58:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	f1 f7       	brne	.-4      	; 0xd5c <Pass1_Check_Display+0x216>
     d60:	9e 8f       	std	Y+30, r25	; 0x1e
     d62:	8d 8f       	std	Y+29, r24	; 0x1d

	LCD_displayString("pls enter pass:");
	LCD_moveCursor(1,0);
	while(i !=5)
	{
			for (i=0;i<5;i++)
     d64:	89 ad       	ldd	r24, Y+57	; 0x39
     d66:	8f 5f       	subi	r24, 0xFF	; 255
     d68:	89 af       	std	Y+57, r24	; 0x39
     d6a:	89 ad       	ldd	r24, Y+57	; 0x39
     d6c:	85 30       	cpi	r24, 0x05	; 5
     d6e:	08 f4       	brcc	.+2      	; 0xd72 <Pass1_Check_Display+0x22c>
     d70:	02 cf       	rjmp	.-508    	; 0xb76 <Pass1_Check_Display+0x30>
{
	uint8 i=0;//loop for 5 digits only

	LCD_displayString("pls enter pass:");
	LCD_moveCursor(1,0);
	while(i !=5)
     d72:	89 ad       	ldd	r24, Y+57	; 0x39
     d74:	85 30       	cpi	r24, 0x05	; 5
     d76:	09 f0       	breq	.+2      	; 0xd7a <Pass1_Check_Display+0x234>
     d78:	fc ce       	rjmp	.-520    	; 0xb72 <Pass1_Check_Display+0x2c>
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	aa e7       	ldi	r26, 0x7A	; 122
     d80:	b3 e4       	ldi	r27, 0x43	; 67
     d82:	89 8f       	std	Y+25, r24	; 0x19
     d84:	9a 8f       	std	Y+26, r25	; 0x1a
     d86:	ab 8f       	std	Y+27, r26	; 0x1b
     d88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d8a:	69 8d       	ldd	r22, Y+25	; 0x19
     d8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d90:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	4a e7       	ldi	r20, 0x7A	; 122
     d98:	53 e4       	ldi	r21, 0x43	; 67
     d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d9e:	dc 01       	movw	r26, r24
     da0:	cb 01       	movw	r24, r22
     da2:	8d 8b       	std	Y+21, r24	; 0x15
     da4:	9e 8b       	std	Y+22, r25	; 0x16
     da6:	af 8b       	std	Y+23, r26	; 0x17
     da8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     daa:	6d 89       	ldd	r22, Y+21	; 0x15
     dac:	7e 89       	ldd	r23, Y+22	; 0x16
     dae:	8f 89       	ldd	r24, Y+23	; 0x17
     db0:	98 8d       	ldd	r25, Y+24	; 0x18
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	40 e8       	ldi	r20, 0x80	; 128
     db8:	5f e3       	ldi	r21, 0x3F	; 63
     dba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dbe:	88 23       	and	r24, r24
     dc0:	2c f4       	brge	.+10     	; 0xdcc <Pass1_Check_Display+0x286>
		__ticks = 1;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	9c 8b       	std	Y+20, r25	; 0x14
     dc8:	8b 8b       	std	Y+19, r24	; 0x13
     dca:	3f c0       	rjmp	.+126    	; 0xe4a <Pass1_Check_Display+0x304>
	else if (__tmp > 65535)
     dcc:	6d 89       	ldd	r22, Y+21	; 0x15
     dce:	7e 89       	ldd	r23, Y+22	; 0x16
     dd0:	8f 89       	ldd	r24, Y+23	; 0x17
     dd2:	98 8d       	ldd	r25, Y+24	; 0x18
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	3f ef       	ldi	r19, 0xFF	; 255
     dd8:	4f e7       	ldi	r20, 0x7F	; 127
     dda:	57 e4       	ldi	r21, 0x47	; 71
     ddc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     de0:	18 16       	cp	r1, r24
     de2:	4c f5       	brge	.+82     	; 0xe36 <Pass1_Check_Display+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     de4:	69 8d       	ldd	r22, Y+25	; 0x19
     de6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     de8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dea:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	40 e2       	ldi	r20, 0x20	; 32
     df2:	51 e4       	ldi	r21, 0x41	; 65
     df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	bc 01       	movw	r22, r24
     dfe:	cd 01       	movw	r24, r26
     e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e04:	dc 01       	movw	r26, r24
     e06:	cb 01       	movw	r24, r22
     e08:	9c 8b       	std	Y+20, r25	; 0x14
     e0a:	8b 8b       	std	Y+19, r24	; 0x13
     e0c:	0f c0       	rjmp	.+30     	; 0xe2c <Pass1_Check_Display+0x2e6>
     e0e:	89 e1       	ldi	r24, 0x19	; 25
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	9a 8b       	std	Y+18, r25	; 0x12
     e14:	89 8b       	std	Y+17, r24	; 0x11
     e16:	89 89       	ldd	r24, Y+17	; 0x11
     e18:	9a 89       	ldd	r25, Y+18	; 0x12
     e1a:	01 97       	sbiw	r24, 0x01	; 1
     e1c:	f1 f7       	brne	.-4      	; 0xe1a <Pass1_Check_Display+0x2d4>
     e1e:	9a 8b       	std	Y+18, r25	; 0x12
     e20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e22:	8b 89       	ldd	r24, Y+19	; 0x13
     e24:	9c 89       	ldd	r25, Y+20	; 0x14
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	9c 8b       	std	Y+20, r25	; 0x14
     e2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e2c:	8b 89       	ldd	r24, Y+19	; 0x13
     e2e:	9c 89       	ldd	r25, Y+20	; 0x14
     e30:	00 97       	sbiw	r24, 0x00	; 0
     e32:	69 f7       	brne	.-38     	; 0xe0e <Pass1_Check_Display+0x2c8>
     e34:	14 c0       	rjmp	.+40     	; 0xe5e <Pass1_Check_Display+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e36:	6d 89       	ldd	r22, Y+21	; 0x15
     e38:	7e 89       	ldd	r23, Y+22	; 0x16
     e3a:	8f 89       	ldd	r24, Y+23	; 0x17
     e3c:	98 8d       	ldd	r25, Y+24	; 0x18
     e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e42:	dc 01       	movw	r26, r24
     e44:	cb 01       	movw	r24, r22
     e46:	9c 8b       	std	Y+20, r25	; 0x14
     e48:	8b 8b       	std	Y+19, r24	; 0x13
     e4a:	8b 89       	ldd	r24, Y+19	; 0x13
     e4c:	9c 89       	ldd	r25, Y+20	; 0x14
     e4e:	98 8b       	std	Y+16, r25	; 0x10
     e50:	8f 87       	std	Y+15, r24	; 0x0f
     e52:	8f 85       	ldd	r24, Y+15	; 0x0f
     e54:	98 89       	ldd	r25, Y+16	; 0x10
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f1 f7       	brne	.-4      	; 0xe56 <Pass1_Check_Display+0x310>
     e5a:	98 8b       	std	Y+16, r25	; 0x10
     e5c:	8f 87       	std	Y+15, r24	; 0x0f

	}
	_delay_ms(250);


	while ( 13 != KEYPAD_getPressedKey()  ) {} ///Use ON as Enter Key asci is 13
     e5e:	0e 94 2c 1b 	call	0x3658	; 0x3658 <KEYPAD_getPressedKey>
     e62:	8d 30       	cpi	r24, 0x0D	; 13
     e64:	e1 f7       	brne	.-8      	; 0xe5e <Pass1_Check_Display+0x318>
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	aa e7       	ldi	r26, 0x7A	; 122
     e6c:	b3 e4       	ldi	r27, 0x43	; 67
     e6e:	8b 87       	std	Y+11, r24	; 0x0b
     e70:	9c 87       	std	Y+12, r25	; 0x0c
     e72:	ad 87       	std	Y+13, r26	; 0x0d
     e74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e76:	6b 85       	ldd	r22, Y+11	; 0x0b
     e78:	7c 85       	ldd	r23, Y+12	; 0x0c
     e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	4a e7       	ldi	r20, 0x7A	; 122
     e84:	53 e4       	ldi	r21, 0x43	; 67
     e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	8f 83       	std	Y+7, r24	; 0x07
     e90:	98 87       	std	Y+8, r25	; 0x08
     e92:	a9 87       	std	Y+9, r26	; 0x09
     e94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e96:	6f 81       	ldd	r22, Y+7	; 0x07
     e98:	78 85       	ldd	r23, Y+8	; 0x08
     e9a:	89 85       	ldd	r24, Y+9	; 0x09
     e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	40 e8       	ldi	r20, 0x80	; 128
     ea4:	5f e3       	ldi	r21, 0x3F	; 63
     ea6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eaa:	88 23       	and	r24, r24
     eac:	2c f4       	brge	.+10     	; 0xeb8 <Pass1_Check_Display+0x372>
		__ticks = 1;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	9e 83       	std	Y+6, r25	; 0x06
     eb4:	8d 83       	std	Y+5, r24	; 0x05
     eb6:	3f c0       	rjmp	.+126    	; 0xf36 <Pass1_Check_Display+0x3f0>
	else if (__tmp > 65535)
     eb8:	6f 81       	ldd	r22, Y+7	; 0x07
     eba:	78 85       	ldd	r23, Y+8	; 0x08
     ebc:	89 85       	ldd	r24, Y+9	; 0x09
     ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	3f ef       	ldi	r19, 0xFF	; 255
     ec4:	4f e7       	ldi	r20, 0x7F	; 127
     ec6:	57 e4       	ldi	r21, 0x47	; 71
     ec8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ecc:	18 16       	cp	r1, r24
     ece:	4c f5       	brge	.+82     	; 0xf22 <Pass1_Check_Display+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ed2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ed4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	40 e2       	ldi	r20, 0x20	; 32
     ede:	51 e4       	ldi	r21, 0x41	; 65
     ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	bc 01       	movw	r22, r24
     eea:	cd 01       	movw	r24, r26
     eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	9e 83       	std	Y+6, r25	; 0x06
     ef6:	8d 83       	std	Y+5, r24	; 0x05
     ef8:	0f c0       	rjmp	.+30     	; 0xf18 <Pass1_Check_Display+0x3d2>
     efa:	89 e1       	ldi	r24, 0x19	; 25
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	9c 83       	std	Y+4, r25	; 0x04
     f00:	8b 83       	std	Y+3, r24	; 0x03
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	9c 81       	ldd	r25, Y+4	; 0x04
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	f1 f7       	brne	.-4      	; 0xf06 <Pass1_Check_Display+0x3c0>
     f0a:	9c 83       	std	Y+4, r25	; 0x04
     f0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f0e:	8d 81       	ldd	r24, Y+5	; 0x05
     f10:	9e 81       	ldd	r25, Y+6	; 0x06
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	9e 83       	std	Y+6, r25	; 0x06
     f16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f18:	8d 81       	ldd	r24, Y+5	; 0x05
     f1a:	9e 81       	ldd	r25, Y+6	; 0x06
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	69 f7       	brne	.-38     	; 0xefa <Pass1_Check_Display+0x3b4>
     f20:	14 c0       	rjmp	.+40     	; 0xf4a <Pass1_Check_Display+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f22:	6f 81       	ldd	r22, Y+7	; 0x07
     f24:	78 85       	ldd	r23, Y+8	; 0x08
     f26:	89 85       	ldd	r24, Y+9	; 0x09
     f28:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	9e 83       	std	Y+6, r25	; 0x06
     f34:	8d 83       	std	Y+5, r24	; 0x05
     f36:	8d 81       	ldd	r24, Y+5	; 0x05
     f38:	9e 81       	ldd	r25, Y+6	; 0x06
     f3a:	9a 83       	std	Y+2, r25	; 0x02
     f3c:	89 83       	std	Y+1, r24	; 0x01
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	9a 81       	ldd	r25, Y+2	; 0x02
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	f1 f7       	brne	.-4      	; 0xf42 <Pass1_Check_Display+0x3fc>
     f46:	9a 83       	std	Y+2, r25	; 0x02
     f48:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);

}
     f4a:	e9 96       	adiw	r28, 0x39	; 57
     f4c:	0f b6       	in	r0, 0x3f	; 63
     f4e:	f8 94       	cli
     f50:	de bf       	out	0x3e, r29	; 62
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	cd bf       	out	0x3d, r28	; 61
     f56:	cf 91       	pop	r28
     f58:	df 91       	pop	r29
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	08 95       	ret

00000f60 <Pass2_Check_Display>:

//Function that takes pass2 and saved it in global array SAME AS before FUNCTION
void Pass2_Check_Display(void)
{
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	e9 97       	sbiw	r28, 0x39	; 57
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	de bf       	out	0x3e, r29	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	cd bf       	out	0x3d, r28	; 61
	uint8 i=0;//loop for 5 digits only
     f78:	19 ae       	std	Y+57, r1	; 0x39

	LCD_displayString("pls re-enter the");
     f7a:	80 e7       	ldi	r24, 0x70	; 112
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"same pass:");
     f82:	21 e8       	ldi	r18, 0x81	; 129
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	60 e0       	ldi	r22, 0x00	; 0
     f8a:	a9 01       	movw	r20, r18
     f8c:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <LCD_displayStringRowColumn>
     f90:	00 c1       	rjmp	.+512    	; 0x1192 <Pass2_Check_Display+0x232>

	while(i !=5)
	{
			for (i=0;i<5;i++)
     f92:	19 ae       	std	Y+57, r1	; 0x39
     f94:	fa c0       	rjmp	.+500    	; 0x118a <Pass2_Check_Display+0x22a>
			{
				//accept char from 0 to 9 only
				while(!(KEYPAD_getPressedKey() <= 9) && (KEYPAD_getPressedKey() >= 0)) {}
     f96:	0e 94 2c 1b 	call	0x3658	; 0x3658 <KEYPAD_getPressedKey>
     f9a:	8a 30       	cpi	r24, 0x0A	; 10
     f9c:	18 f0       	brcs	.+6      	; 0xfa4 <Pass2_Check_Display+0x44>
     f9e:	0e 94 2c 1b 	call	0x3658	; 0x3658 <KEYPAD_getPressedKey>
     fa2:	f9 cf       	rjmp	.-14     	; 0xf96 <Pass2_Check_Display+0x36>

				Pass2_Arry[i]=KEYPAD_getPressedKey();
     fa4:	89 ad       	ldd	r24, Y+57	; 0x39
     fa6:	08 2f       	mov	r16, r24
     fa8:	10 e0       	ldi	r17, 0x00	; 0
     faa:	0e 94 2c 1b 	call	0x3658	; 0x3658 <KEYPAD_getPressedKey>
     fae:	f8 01       	movw	r30, r16
     fb0:	e3 57       	subi	r30, 0x73	; 115
     fb2:	fe 4f       	sbci	r31, 0xFE	; 254
     fb4:	80 83       	st	Z, r24
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	aa ef       	ldi	r26, 0xFA	; 250
     fbc:	b3 e4       	ldi	r27, 0x43	; 67
     fbe:	8d ab       	std	Y+53, r24	; 0x35
     fc0:	9e ab       	std	Y+54, r25	; 0x36
     fc2:	af ab       	std	Y+55, r26	; 0x37
     fc4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc6:	6d a9       	ldd	r22, Y+53	; 0x35
     fc8:	7e a9       	ldd	r23, Y+54	; 0x36
     fca:	8f a9       	ldd	r24, Y+55	; 0x37
     fcc:	98 ad       	ldd	r25, Y+56	; 0x38
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	4a e7       	ldi	r20, 0x7A	; 122
     fd4:	53 e4       	ldi	r21, 0x43	; 67
     fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	89 ab       	std	Y+49, r24	; 0x31
     fe0:	9a ab       	std	Y+50, r25	; 0x32
     fe2:	ab ab       	std	Y+51, r26	; 0x33
     fe4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     fe6:	69 a9       	ldd	r22, Y+49	; 0x31
     fe8:	7a a9       	ldd	r23, Y+50	; 0x32
     fea:	8b a9       	ldd	r24, Y+51	; 0x33
     fec:	9c a9       	ldd	r25, Y+52	; 0x34
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	40 e8       	ldi	r20, 0x80	; 128
     ff4:	5f e3       	ldi	r21, 0x3F	; 63
     ff6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ffa:	88 23       	and	r24, r24
     ffc:	2c f4       	brge	.+10     	; 0x1008 <Pass2_Check_Display+0xa8>
		__ticks = 1;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	98 ab       	std	Y+48, r25	; 0x30
    1004:	8f a7       	std	Y+47, r24	; 0x2f
    1006:	3f c0       	rjmp	.+126    	; 0x1086 <Pass2_Check_Display+0x126>
	else if (__tmp > 65535)
    1008:	69 a9       	ldd	r22, Y+49	; 0x31
    100a:	7a a9       	ldd	r23, Y+50	; 0x32
    100c:	8b a9       	ldd	r24, Y+51	; 0x33
    100e:	9c a9       	ldd	r25, Y+52	; 0x34
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	3f ef       	ldi	r19, 0xFF	; 255
    1014:	4f e7       	ldi	r20, 0x7F	; 127
    1016:	57 e4       	ldi	r21, 0x47	; 71
    1018:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    101c:	18 16       	cp	r1, r24
    101e:	4c f5       	brge	.+82     	; 0x1072 <Pass2_Check_Display+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1020:	6d a9       	ldd	r22, Y+53	; 0x35
    1022:	7e a9       	ldd	r23, Y+54	; 0x36
    1024:	8f a9       	ldd	r24, Y+55	; 0x37
    1026:	98 ad       	ldd	r25, Y+56	; 0x38
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e2       	ldi	r20, 0x20	; 32
    102e:	51 e4       	ldi	r21, 0x41	; 65
    1030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	bc 01       	movw	r22, r24
    103a:	cd 01       	movw	r24, r26
    103c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	98 ab       	std	Y+48, r25	; 0x30
    1046:	8f a7       	std	Y+47, r24	; 0x2f
    1048:	0f c0       	rjmp	.+30     	; 0x1068 <Pass2_Check_Display+0x108>
    104a:	89 e1       	ldi	r24, 0x19	; 25
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	9e a7       	std	Y+46, r25	; 0x2e
    1050:	8d a7       	std	Y+45, r24	; 0x2d
    1052:	8d a5       	ldd	r24, Y+45	; 0x2d
    1054:	9e a5       	ldd	r25, Y+46	; 0x2e
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <Pass2_Check_Display+0xf6>
    105a:	9e a7       	std	Y+46, r25	; 0x2e
    105c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1060:	98 a9       	ldd	r25, Y+48	; 0x30
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	98 ab       	std	Y+48, r25	; 0x30
    1066:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1068:	8f a5       	ldd	r24, Y+47	; 0x2f
    106a:	98 a9       	ldd	r25, Y+48	; 0x30
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	69 f7       	brne	.-38     	; 0x104a <Pass2_Check_Display+0xea>
    1070:	14 c0       	rjmp	.+40     	; 0x109a <Pass2_Check_Display+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1072:	69 a9       	ldd	r22, Y+49	; 0x31
    1074:	7a a9       	ldd	r23, Y+50	; 0x32
    1076:	8b a9       	ldd	r24, Y+51	; 0x33
    1078:	9c a9       	ldd	r25, Y+52	; 0x34
    107a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	98 ab       	std	Y+48, r25	; 0x30
    1084:	8f a7       	std	Y+47, r24	; 0x2f
    1086:	8f a5       	ldd	r24, Y+47	; 0x2f
    1088:	98 a9       	ldd	r25, Y+48	; 0x30
    108a:	9c a7       	std	Y+44, r25	; 0x2c
    108c:	8b a7       	std	Y+43, r24	; 0x2b
    108e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1090:	9c a5       	ldd	r25, Y+44	; 0x2c
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	f1 f7       	brne	.-4      	; 0x1092 <Pass2_Check_Display+0x132>
    1096:	9c a7       	std	Y+44, r25	; 0x2c
    1098:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(500);
				LCD_displayCharacter('*');
    109a:	8a e2       	ldi	r24, 0x2A	; 42
    109c:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <LCD_displayCharacter>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	a8 ec       	ldi	r26, 0xC8	; 200
    10a6:	b2 e4       	ldi	r27, 0x42	; 66
    10a8:	8f a3       	std	Y+39, r24	; 0x27
    10aa:	98 a7       	std	Y+40, r25	; 0x28
    10ac:	a9 a7       	std	Y+41, r26	; 0x29
    10ae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10b0:	6f a1       	ldd	r22, Y+39	; 0x27
    10b2:	78 a5       	ldd	r23, Y+40	; 0x28
    10b4:	89 a5       	ldd	r24, Y+41	; 0x29
    10b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	4a e7       	ldi	r20, 0x7A	; 122
    10be:	53 e4       	ldi	r21, 0x43	; 67
    10c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	8b a3       	std	Y+35, r24	; 0x23
    10ca:	9c a3       	std	Y+36, r25	; 0x24
    10cc:	ad a3       	std	Y+37, r26	; 0x25
    10ce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10d0:	6b a1       	ldd	r22, Y+35	; 0x23
    10d2:	7c a1       	ldd	r23, Y+36	; 0x24
    10d4:	8d a1       	ldd	r24, Y+37	; 0x25
    10d6:	9e a1       	ldd	r25, Y+38	; 0x26
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	40 e8       	ldi	r20, 0x80	; 128
    10de:	5f e3       	ldi	r21, 0x3F	; 63
    10e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10e4:	88 23       	and	r24, r24
    10e6:	2c f4       	brge	.+10     	; 0x10f2 <Pass2_Check_Display+0x192>
		__ticks = 1;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	9a a3       	std	Y+34, r25	; 0x22
    10ee:	89 a3       	std	Y+33, r24	; 0x21
    10f0:	3f c0       	rjmp	.+126    	; 0x1170 <Pass2_Check_Display+0x210>
	else if (__tmp > 65535)
    10f2:	6b a1       	ldd	r22, Y+35	; 0x23
    10f4:	7c a1       	ldd	r23, Y+36	; 0x24
    10f6:	8d a1       	ldd	r24, Y+37	; 0x25
    10f8:	9e a1       	ldd	r25, Y+38	; 0x26
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	3f ef       	ldi	r19, 0xFF	; 255
    10fe:	4f e7       	ldi	r20, 0x7F	; 127
    1100:	57 e4       	ldi	r21, 0x47	; 71
    1102:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1106:	18 16       	cp	r1, r24
    1108:	4c f5       	brge	.+82     	; 0x115c <Pass2_Check_Display+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    110a:	6f a1       	ldd	r22, Y+39	; 0x27
    110c:	78 a5       	ldd	r23, Y+40	; 0x28
    110e:	89 a5       	ldd	r24, Y+41	; 0x29
    1110:	9a a5       	ldd	r25, Y+42	; 0x2a
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	40 e2       	ldi	r20, 0x20	; 32
    1118:	51 e4       	ldi	r21, 0x41	; 65
    111a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	bc 01       	movw	r22, r24
    1124:	cd 01       	movw	r24, r26
    1126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	9a a3       	std	Y+34, r25	; 0x22
    1130:	89 a3       	std	Y+33, r24	; 0x21
    1132:	0f c0       	rjmp	.+30     	; 0x1152 <Pass2_Check_Display+0x1f2>
    1134:	89 e1       	ldi	r24, 0x19	; 25
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	98 a3       	std	Y+32, r25	; 0x20
    113a:	8f 8f       	std	Y+31, r24	; 0x1f
    113c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    113e:	98 a1       	ldd	r25, Y+32	; 0x20
    1140:	01 97       	sbiw	r24, 0x01	; 1
    1142:	f1 f7       	brne	.-4      	; 0x1140 <Pass2_Check_Display+0x1e0>
    1144:	98 a3       	std	Y+32, r25	; 0x20
    1146:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1148:	89 a1       	ldd	r24, Y+33	; 0x21
    114a:	9a a1       	ldd	r25, Y+34	; 0x22
    114c:	01 97       	sbiw	r24, 0x01	; 1
    114e:	9a a3       	std	Y+34, r25	; 0x22
    1150:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1152:	89 a1       	ldd	r24, Y+33	; 0x21
    1154:	9a a1       	ldd	r25, Y+34	; 0x22
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	69 f7       	brne	.-38     	; 0x1134 <Pass2_Check_Display+0x1d4>
    115a:	14 c0       	rjmp	.+40     	; 0x1184 <Pass2_Check_Display+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    115c:	6b a1       	ldd	r22, Y+35	; 0x23
    115e:	7c a1       	ldd	r23, Y+36	; 0x24
    1160:	8d a1       	ldd	r24, Y+37	; 0x25
    1162:	9e a1       	ldd	r25, Y+38	; 0x26
    1164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	9a a3       	std	Y+34, r25	; 0x22
    116e:	89 a3       	std	Y+33, r24	; 0x21
    1170:	89 a1       	ldd	r24, Y+33	; 0x21
    1172:	9a a1       	ldd	r25, Y+34	; 0x22
    1174:	9e 8f       	std	Y+30, r25	; 0x1e
    1176:	8d 8f       	std	Y+29, r24	; 0x1d
    1178:	8d 8d       	ldd	r24, Y+29	; 0x1d
    117a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	f1 f7       	brne	.-4      	; 0x117c <Pass2_Check_Display+0x21c>
    1180:	9e 8f       	std	Y+30, r25	; 0x1e
    1182:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_displayString("pls re-enter the");
	LCD_displayStringRowColumn(1,0,"same pass:");

	while(i !=5)
	{
			for (i=0;i<5;i++)
    1184:	89 ad       	ldd	r24, Y+57	; 0x39
    1186:	8f 5f       	subi	r24, 0xFF	; 255
    1188:	89 af       	std	Y+57, r24	; 0x39
    118a:	89 ad       	ldd	r24, Y+57	; 0x39
    118c:	85 30       	cpi	r24, 0x05	; 5
    118e:	08 f4       	brcc	.+2      	; 0x1192 <Pass2_Check_Display+0x232>
    1190:	02 cf       	rjmp	.-508    	; 0xf96 <Pass2_Check_Display+0x36>
	uint8 i=0;//loop for 5 digits only

	LCD_displayString("pls re-enter the");
	LCD_displayStringRowColumn(1,0,"same pass:");

	while(i !=5)
    1192:	89 ad       	ldd	r24, Y+57	; 0x39
    1194:	85 30       	cpi	r24, 0x05	; 5
    1196:	09 f0       	breq	.+2      	; 0x119a <Pass2_Check_Display+0x23a>
    1198:	fc ce       	rjmp	.-520    	; 0xf92 <Pass2_Check_Display+0x32>
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	aa e7       	ldi	r26, 0x7A	; 122
    11a0:	b3 e4       	ldi	r27, 0x43	; 67
    11a2:	89 8f       	std	Y+25, r24	; 0x19
    11a4:	9a 8f       	std	Y+26, r25	; 0x1a
    11a6:	ab 8f       	std	Y+27, r26	; 0x1b
    11a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11aa:	69 8d       	ldd	r22, Y+25	; 0x19
    11ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	4a e7       	ldi	r20, 0x7A	; 122
    11b8:	53 e4       	ldi	r21, 0x43	; 67
    11ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	8d 8b       	std	Y+21, r24	; 0x15
    11c4:	9e 8b       	std	Y+22, r25	; 0x16
    11c6:	af 8b       	std	Y+23, r26	; 0x17
    11c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11ca:	6d 89       	ldd	r22, Y+21	; 0x15
    11cc:	7e 89       	ldd	r23, Y+22	; 0x16
    11ce:	8f 89       	ldd	r24, Y+23	; 0x17
    11d0:	98 8d       	ldd	r25, Y+24	; 0x18
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	40 e8       	ldi	r20, 0x80	; 128
    11d8:	5f e3       	ldi	r21, 0x3F	; 63
    11da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11de:	88 23       	and	r24, r24
    11e0:	2c f4       	brge	.+10     	; 0x11ec <Pass2_Check_Display+0x28c>
		__ticks = 1;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	9c 8b       	std	Y+20, r25	; 0x14
    11e8:	8b 8b       	std	Y+19, r24	; 0x13
    11ea:	3f c0       	rjmp	.+126    	; 0x126a <Pass2_Check_Display+0x30a>
	else if (__tmp > 65535)
    11ec:	6d 89       	ldd	r22, Y+21	; 0x15
    11ee:	7e 89       	ldd	r23, Y+22	; 0x16
    11f0:	8f 89       	ldd	r24, Y+23	; 0x17
    11f2:	98 8d       	ldd	r25, Y+24	; 0x18
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	3f ef       	ldi	r19, 0xFF	; 255
    11f8:	4f e7       	ldi	r20, 0x7F	; 127
    11fa:	57 e4       	ldi	r21, 0x47	; 71
    11fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1200:	18 16       	cp	r1, r24
    1202:	4c f5       	brge	.+82     	; 0x1256 <Pass2_Check_Display+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1204:	69 8d       	ldd	r22, Y+25	; 0x19
    1206:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1208:	8b 8d       	ldd	r24, Y+27	; 0x1b
    120a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	40 e2       	ldi	r20, 0x20	; 32
    1212:	51 e4       	ldi	r21, 0x41	; 65
    1214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	bc 01       	movw	r22, r24
    121e:	cd 01       	movw	r24, r26
    1220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	9c 8b       	std	Y+20, r25	; 0x14
    122a:	8b 8b       	std	Y+19, r24	; 0x13
    122c:	0f c0       	rjmp	.+30     	; 0x124c <Pass2_Check_Display+0x2ec>
    122e:	89 e1       	ldi	r24, 0x19	; 25
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	9a 8b       	std	Y+18, r25	; 0x12
    1234:	89 8b       	std	Y+17, r24	; 0x11
    1236:	89 89       	ldd	r24, Y+17	; 0x11
    1238:	9a 89       	ldd	r25, Y+18	; 0x12
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	f1 f7       	brne	.-4      	; 0x123a <Pass2_Check_Display+0x2da>
    123e:	9a 8b       	std	Y+18, r25	; 0x12
    1240:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1242:	8b 89       	ldd	r24, Y+19	; 0x13
    1244:	9c 89       	ldd	r25, Y+20	; 0x14
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	9c 8b       	std	Y+20, r25	; 0x14
    124a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    124c:	8b 89       	ldd	r24, Y+19	; 0x13
    124e:	9c 89       	ldd	r25, Y+20	; 0x14
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	69 f7       	brne	.-38     	; 0x122e <Pass2_Check_Display+0x2ce>
    1254:	14 c0       	rjmp	.+40     	; 0x127e <Pass2_Check_Display+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1256:	6d 89       	ldd	r22, Y+21	; 0x15
    1258:	7e 89       	ldd	r23, Y+22	; 0x16
    125a:	8f 89       	ldd	r24, Y+23	; 0x17
    125c:	98 8d       	ldd	r25, Y+24	; 0x18
    125e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	9c 8b       	std	Y+20, r25	; 0x14
    1268:	8b 8b       	std	Y+19, r24	; 0x13
    126a:	8b 89       	ldd	r24, Y+19	; 0x13
    126c:	9c 89       	ldd	r25, Y+20	; 0x14
    126e:	98 8b       	std	Y+16, r25	; 0x10
    1270:	8f 87       	std	Y+15, r24	; 0x0f
    1272:	8f 85       	ldd	r24, Y+15	; 0x0f
    1274:	98 89       	ldd	r25, Y+16	; 0x10
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	f1 f7       	brne	.-4      	; 0x1276 <Pass2_Check_Display+0x316>
    127a:	98 8b       	std	Y+16, r25	; 0x10
    127c:	8f 87       	std	Y+15, r24	; 0x0f
			}

	}
		_delay_ms(250);

	while ( 13 != KEYPAD_getPressedKey()  ) {} ///Use ON as Enter Key
    127e:	0e 94 2c 1b 	call	0x3658	; 0x3658 <KEYPAD_getPressedKey>
    1282:	8d 30       	cpi	r24, 0x0D	; 13
    1284:	e1 f7       	brne	.-8      	; 0x127e <Pass2_Check_Display+0x31e>
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	aa e7       	ldi	r26, 0x7A	; 122
    128c:	b3 e4       	ldi	r27, 0x43	; 67
    128e:	8b 87       	std	Y+11, r24	; 0x0b
    1290:	9c 87       	std	Y+12, r25	; 0x0c
    1292:	ad 87       	std	Y+13, r26	; 0x0d
    1294:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1296:	6b 85       	ldd	r22, Y+11	; 0x0b
    1298:	7c 85       	ldd	r23, Y+12	; 0x0c
    129a:	8d 85       	ldd	r24, Y+13	; 0x0d
    129c:	9e 85       	ldd	r25, Y+14	; 0x0e
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	4a e7       	ldi	r20, 0x7A	; 122
    12a4:	53 e4       	ldi	r21, 0x43	; 67
    12a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	8f 83       	std	Y+7, r24	; 0x07
    12b0:	98 87       	std	Y+8, r25	; 0x08
    12b2:	a9 87       	std	Y+9, r26	; 0x09
    12b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12b6:	6f 81       	ldd	r22, Y+7	; 0x07
    12b8:	78 85       	ldd	r23, Y+8	; 0x08
    12ba:	89 85       	ldd	r24, Y+9	; 0x09
    12bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e8       	ldi	r20, 0x80	; 128
    12c4:	5f e3       	ldi	r21, 0x3F	; 63
    12c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ca:	88 23       	and	r24, r24
    12cc:	2c f4       	brge	.+10     	; 0x12d8 <Pass2_Check_Display+0x378>
		__ticks = 1;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	9e 83       	std	Y+6, r25	; 0x06
    12d4:	8d 83       	std	Y+5, r24	; 0x05
    12d6:	3f c0       	rjmp	.+126    	; 0x1356 <Pass2_Check_Display+0x3f6>
	else if (__tmp > 65535)
    12d8:	6f 81       	ldd	r22, Y+7	; 0x07
    12da:	78 85       	ldd	r23, Y+8	; 0x08
    12dc:	89 85       	ldd	r24, Y+9	; 0x09
    12de:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	3f ef       	ldi	r19, 0xFF	; 255
    12e4:	4f e7       	ldi	r20, 0x7F	; 127
    12e6:	57 e4       	ldi	r21, 0x47	; 71
    12e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ec:	18 16       	cp	r1, r24
    12ee:	4c f5       	brge	.+82     	; 0x1342 <Pass2_Check_Display+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e2       	ldi	r20, 0x20	; 32
    12fe:	51 e4       	ldi	r21, 0x41	; 65
    1300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	bc 01       	movw	r22, r24
    130a:	cd 01       	movw	r24, r26
    130c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	9e 83       	std	Y+6, r25	; 0x06
    1316:	8d 83       	std	Y+5, r24	; 0x05
    1318:	0f c0       	rjmp	.+30     	; 0x1338 <Pass2_Check_Display+0x3d8>
    131a:	89 e1       	ldi	r24, 0x19	; 25
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	9c 83       	std	Y+4, r25	; 0x04
    1320:	8b 83       	std	Y+3, r24	; 0x03
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <Pass2_Check_Display+0x3c6>
    132a:	9c 83       	std	Y+4, r25	; 0x04
    132c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132e:	8d 81       	ldd	r24, Y+5	; 0x05
    1330:	9e 81       	ldd	r25, Y+6	; 0x06
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	9e 83       	std	Y+6, r25	; 0x06
    1336:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1338:	8d 81       	ldd	r24, Y+5	; 0x05
    133a:	9e 81       	ldd	r25, Y+6	; 0x06
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	69 f7       	brne	.-38     	; 0x131a <Pass2_Check_Display+0x3ba>
    1340:	14 c0       	rjmp	.+40     	; 0x136a <Pass2_Check_Display+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1342:	6f 81       	ldd	r22, Y+7	; 0x07
    1344:	78 85       	ldd	r23, Y+8	; 0x08
    1346:	89 85       	ldd	r24, Y+9	; 0x09
    1348:	9a 85       	ldd	r25, Y+10	; 0x0a
    134a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	9e 83       	std	Y+6, r25	; 0x06
    1354:	8d 83       	std	Y+5, r24	; 0x05
    1356:	8d 81       	ldd	r24, Y+5	; 0x05
    1358:	9e 81       	ldd	r25, Y+6	; 0x06
    135a:	9a 83       	std	Y+2, r25	; 0x02
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <Pass2_Check_Display+0x402>
    1366:	9a 83       	std	Y+2, r25	; 0x02
    1368:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);

}
    136a:	e9 96       	adiw	r28, 0x39	; 57
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	08 95       	ret

00001380 <Check_created_password>:

///FUNCTION TAKES TWO GOLBAL ARRAYS AND SEND THEM TO MC2 TO CHECK SIMILARITY OR NOT
errors Check_created_password(uint8 Pass1_Arry[], uint8 Pass2_Arry[])
{
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	ef 97       	sbiw	r28, 0x3f	; 63
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	9d af       	std	Y+61, r25	; 0x3d
    1396:	8c af       	std	Y+60, r24	; 0x3c
    1398:	7f af       	std	Y+63, r23	; 0x3f
    139a:	6e af       	std	Y+62, r22	; 0x3e

	LCD_displayString("Sending...");	//TEST CASE
    139c:	8c e8       	ldi	r24, 0x8C	; 140
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <LCD_displayString>
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	aa e7       	ldi	r26, 0x7A	; 122
    13aa:	b3 e4       	ldi	r27, 0x43	; 67
    13ac:	8d ab       	std	Y+53, r24	; 0x35
    13ae:	9e ab       	std	Y+54, r25	; 0x36
    13b0:	af ab       	std	Y+55, r26	; 0x37
    13b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b4:	6d a9       	ldd	r22, Y+53	; 0x35
    13b6:	7e a9       	ldd	r23, Y+54	; 0x36
    13b8:	8f a9       	ldd	r24, Y+55	; 0x37
    13ba:	98 ad       	ldd	r25, Y+56	; 0x38
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	4a e7       	ldi	r20, 0x7A	; 122
    13c2:	53 e4       	ldi	r21, 0x43	; 67
    13c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	89 ab       	std	Y+49, r24	; 0x31
    13ce:	9a ab       	std	Y+50, r25	; 0x32
    13d0:	ab ab       	std	Y+51, r26	; 0x33
    13d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13d4:	69 a9       	ldd	r22, Y+49	; 0x31
    13d6:	7a a9       	ldd	r23, Y+50	; 0x32
    13d8:	8b a9       	ldd	r24, Y+51	; 0x33
    13da:	9c a9       	ldd	r25, Y+52	; 0x34
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	40 e8       	ldi	r20, 0x80	; 128
    13e2:	5f e3       	ldi	r21, 0x3F	; 63
    13e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13e8:	88 23       	and	r24, r24
    13ea:	2c f4       	brge	.+10     	; 0x13f6 <Check_created_password+0x76>
		__ticks = 1;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	98 ab       	std	Y+48, r25	; 0x30
    13f2:	8f a7       	std	Y+47, r24	; 0x2f
    13f4:	3f c0       	rjmp	.+126    	; 0x1474 <Check_created_password+0xf4>
	else if (__tmp > 65535)
    13f6:	69 a9       	ldd	r22, Y+49	; 0x31
    13f8:	7a a9       	ldd	r23, Y+50	; 0x32
    13fa:	8b a9       	ldd	r24, Y+51	; 0x33
    13fc:	9c a9       	ldd	r25, Y+52	; 0x34
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	3f ef       	ldi	r19, 0xFF	; 255
    1402:	4f e7       	ldi	r20, 0x7F	; 127
    1404:	57 e4       	ldi	r21, 0x47	; 71
    1406:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    140a:	18 16       	cp	r1, r24
    140c:	4c f5       	brge	.+82     	; 0x1460 <Check_created_password+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    140e:	6d a9       	ldd	r22, Y+53	; 0x35
    1410:	7e a9       	ldd	r23, Y+54	; 0x36
    1412:	8f a9       	ldd	r24, Y+55	; 0x37
    1414:	98 ad       	ldd	r25, Y+56	; 0x38
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	40 e2       	ldi	r20, 0x20	; 32
    141c:	51 e4       	ldi	r21, 0x41	; 65
    141e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	bc 01       	movw	r22, r24
    1428:	cd 01       	movw	r24, r26
    142a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	98 ab       	std	Y+48, r25	; 0x30
    1434:	8f a7       	std	Y+47, r24	; 0x2f
    1436:	0f c0       	rjmp	.+30     	; 0x1456 <Check_created_password+0xd6>
    1438:	89 e1       	ldi	r24, 0x19	; 25
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	9e a7       	std	Y+46, r25	; 0x2e
    143e:	8d a7       	std	Y+45, r24	; 0x2d
    1440:	8d a5       	ldd	r24, Y+45	; 0x2d
    1442:	9e a5       	ldd	r25, Y+46	; 0x2e
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	f1 f7       	brne	.-4      	; 0x1444 <Check_created_password+0xc4>
    1448:	9e a7       	std	Y+46, r25	; 0x2e
    144a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144c:	8f a5       	ldd	r24, Y+47	; 0x2f
    144e:	98 a9       	ldd	r25, Y+48	; 0x30
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	98 ab       	std	Y+48, r25	; 0x30
    1454:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1456:	8f a5       	ldd	r24, Y+47	; 0x2f
    1458:	98 a9       	ldd	r25, Y+48	; 0x30
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	69 f7       	brne	.-38     	; 0x1438 <Check_created_password+0xb8>
    145e:	14 c0       	rjmp	.+40     	; 0x1488 <Check_created_password+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1460:	69 a9       	ldd	r22, Y+49	; 0x31
    1462:	7a a9       	ldd	r23, Y+50	; 0x32
    1464:	8b a9       	ldd	r24, Y+51	; 0x33
    1466:	9c a9       	ldd	r25, Y+52	; 0x34
    1468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	98 ab       	std	Y+48, r25	; 0x30
    1472:	8f a7       	std	Y+47, r24	; 0x2f
    1474:	8f a5       	ldd	r24, Y+47	; 0x2f
    1476:	98 a9       	ldd	r25, Y+48	; 0x30
    1478:	9c a7       	std	Y+44, r25	; 0x2c
    147a:	8b a7       	std	Y+43, r24	; 0x2b
    147c:	8b a5       	ldd	r24, Y+43	; 0x2b
    147e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1480:	01 97       	sbiw	r24, 0x01	; 1
    1482:	f1 f7       	brne	.-4      	; 0x1480 <Check_created_password+0x100>
    1484:	9c a7       	std	Y+44, r25	; 0x2c
    1486:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(250);

	for(uint8 i =0;i<5;i++)	//SENDING FIRST PASS
    1488:	1a ae       	std	Y+58, r1	; 0x3a
    148a:	80 c0       	rjmp	.+256    	; 0x158c <Check_created_password+0x20c>
	{
		UART_send_byte(Pass1_Arry[i]);
    148c:	8a ad       	ldd	r24, Y+58	; 0x3a
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	8c ad       	ldd	r24, Y+60	; 0x3c
    1494:	9d ad       	ldd	r25, Y+61	; 0x3d
    1496:	fc 01       	movw	r30, r24
    1498:	e2 0f       	add	r30, r18
    149a:	f3 1f       	adc	r31, r19
    149c:	80 81       	ld	r24, Z
    149e:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <UART_send_byte>
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	a8 ec       	ldi	r26, 0xC8	; 200
    14a8:	b2 e4       	ldi	r27, 0x42	; 66
    14aa:	8f a3       	std	Y+39, r24	; 0x27
    14ac:	98 a7       	std	Y+40, r25	; 0x28
    14ae:	a9 a7       	std	Y+41, r26	; 0x29
    14b0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b2:	6f a1       	ldd	r22, Y+39	; 0x27
    14b4:	78 a5       	ldd	r23, Y+40	; 0x28
    14b6:	89 a5       	ldd	r24, Y+41	; 0x29
    14b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	4a e7       	ldi	r20, 0x7A	; 122
    14c0:	53 e4       	ldi	r21, 0x43	; 67
    14c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	8b a3       	std	Y+35, r24	; 0x23
    14cc:	9c a3       	std	Y+36, r25	; 0x24
    14ce:	ad a3       	std	Y+37, r26	; 0x25
    14d0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14d2:	6b a1       	ldd	r22, Y+35	; 0x23
    14d4:	7c a1       	ldd	r23, Y+36	; 0x24
    14d6:	8d a1       	ldd	r24, Y+37	; 0x25
    14d8:	9e a1       	ldd	r25, Y+38	; 0x26
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	40 e8       	ldi	r20, 0x80	; 128
    14e0:	5f e3       	ldi	r21, 0x3F	; 63
    14e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14e6:	88 23       	and	r24, r24
    14e8:	2c f4       	brge	.+10     	; 0x14f4 <Check_created_password+0x174>
		__ticks = 1;
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	9a a3       	std	Y+34, r25	; 0x22
    14f0:	89 a3       	std	Y+33, r24	; 0x21
    14f2:	3f c0       	rjmp	.+126    	; 0x1572 <Check_created_password+0x1f2>
	else if (__tmp > 65535)
    14f4:	6b a1       	ldd	r22, Y+35	; 0x23
    14f6:	7c a1       	ldd	r23, Y+36	; 0x24
    14f8:	8d a1       	ldd	r24, Y+37	; 0x25
    14fa:	9e a1       	ldd	r25, Y+38	; 0x26
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	3f ef       	ldi	r19, 0xFF	; 255
    1500:	4f e7       	ldi	r20, 0x7F	; 127
    1502:	57 e4       	ldi	r21, 0x47	; 71
    1504:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1508:	18 16       	cp	r1, r24
    150a:	4c f5       	brge	.+82     	; 0x155e <Check_created_password+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150c:	6f a1       	ldd	r22, Y+39	; 0x27
    150e:	78 a5       	ldd	r23, Y+40	; 0x28
    1510:	89 a5       	ldd	r24, Y+41	; 0x29
    1512:	9a a5       	ldd	r25, Y+42	; 0x2a
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e2       	ldi	r20, 0x20	; 32
    151a:	51 e4       	ldi	r21, 0x41	; 65
    151c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	bc 01       	movw	r22, r24
    1526:	cd 01       	movw	r24, r26
    1528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	9a a3       	std	Y+34, r25	; 0x22
    1532:	89 a3       	std	Y+33, r24	; 0x21
    1534:	0f c0       	rjmp	.+30     	; 0x1554 <Check_created_password+0x1d4>
    1536:	89 e1       	ldi	r24, 0x19	; 25
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	98 a3       	std	Y+32, r25	; 0x20
    153c:	8f 8f       	std	Y+31, r24	; 0x1f
    153e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1540:	98 a1       	ldd	r25, Y+32	; 0x20
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <Check_created_password+0x1c2>
    1546:	98 a3       	std	Y+32, r25	; 0x20
    1548:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154a:	89 a1       	ldd	r24, Y+33	; 0x21
    154c:	9a a1       	ldd	r25, Y+34	; 0x22
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	9a a3       	std	Y+34, r25	; 0x22
    1552:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1554:	89 a1       	ldd	r24, Y+33	; 0x21
    1556:	9a a1       	ldd	r25, Y+34	; 0x22
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	69 f7       	brne	.-38     	; 0x1536 <Check_created_password+0x1b6>
    155c:	14 c0       	rjmp	.+40     	; 0x1586 <Check_created_password+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    155e:	6b a1       	ldd	r22, Y+35	; 0x23
    1560:	7c a1       	ldd	r23, Y+36	; 0x24
    1562:	8d a1       	ldd	r24, Y+37	; 0x25
    1564:	9e a1       	ldd	r25, Y+38	; 0x26
    1566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	9a a3       	std	Y+34, r25	; 0x22
    1570:	89 a3       	std	Y+33, r24	; 0x21
    1572:	89 a1       	ldd	r24, Y+33	; 0x21
    1574:	9a a1       	ldd	r25, Y+34	; 0x22
    1576:	9e 8f       	std	Y+30, r25	; 0x1e
    1578:	8d 8f       	std	Y+29, r24	; 0x1d
    157a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    157c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	f1 f7       	brne	.-4      	; 0x157e <Check_created_password+0x1fe>
    1582:	9e 8f       	std	Y+30, r25	; 0x1e
    1584:	8d 8f       	std	Y+29, r24	; 0x1d
{

	LCD_displayString("Sending...");	//TEST CASE
	_delay_ms(250);

	for(uint8 i =0;i<5;i++)	//SENDING FIRST PASS
    1586:	8a ad       	ldd	r24, Y+58	; 0x3a
    1588:	8f 5f       	subi	r24, 0xFF	; 255
    158a:	8a af       	std	Y+58, r24	; 0x3a
    158c:	8a ad       	ldd	r24, Y+58	; 0x3a
    158e:	85 30       	cpi	r24, 0x05	; 5
    1590:	08 f4       	brcc	.+2      	; 0x1594 <Check_created_password+0x214>
    1592:	7c cf       	rjmp	.-264    	; 0x148c <Check_created_password+0x10c>
	{
		UART_send_byte(Pass1_Arry[i]);
		_delay_ms(100);
	}
	for(uint8 i =0;i<5;i++) //SENDING SECOND PASS
    1594:	19 ae       	std	Y+57, r1	; 0x39
    1596:	80 c0       	rjmp	.+256    	; 0x1698 <Check_created_password+0x318>
	{
			UART_send_byte(Pass2_Arry[i]);
    1598:	89 ad       	ldd	r24, Y+57	; 0x39
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	8e ad       	ldd	r24, Y+62	; 0x3e
    15a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    15a2:	fc 01       	movw	r30, r24
    15a4:	e2 0f       	add	r30, r18
    15a6:	f3 1f       	adc	r31, r19
    15a8:	80 81       	ld	r24, Z
    15aa:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <UART_send_byte>
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	a8 ec       	ldi	r26, 0xC8	; 200
    15b4:	b2 e4       	ldi	r27, 0x42	; 66
    15b6:	89 8f       	std	Y+25, r24	; 0x19
    15b8:	9a 8f       	std	Y+26, r25	; 0x1a
    15ba:	ab 8f       	std	Y+27, r26	; 0x1b
    15bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15be:	69 8d       	ldd	r22, Y+25	; 0x19
    15c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	4a e7       	ldi	r20, 0x7A	; 122
    15cc:	53 e4       	ldi	r21, 0x43	; 67
    15ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	8d 8b       	std	Y+21, r24	; 0x15
    15d8:	9e 8b       	std	Y+22, r25	; 0x16
    15da:	af 8b       	std	Y+23, r26	; 0x17
    15dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15de:	6d 89       	ldd	r22, Y+21	; 0x15
    15e0:	7e 89       	ldd	r23, Y+22	; 0x16
    15e2:	8f 89       	ldd	r24, Y+23	; 0x17
    15e4:	98 8d       	ldd	r25, Y+24	; 0x18
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	40 e8       	ldi	r20, 0x80	; 128
    15ec:	5f e3       	ldi	r21, 0x3F	; 63
    15ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15f2:	88 23       	and	r24, r24
    15f4:	2c f4       	brge	.+10     	; 0x1600 <Check_created_password+0x280>
		__ticks = 1;
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	9c 8b       	std	Y+20, r25	; 0x14
    15fc:	8b 8b       	std	Y+19, r24	; 0x13
    15fe:	3f c0       	rjmp	.+126    	; 0x167e <Check_created_password+0x2fe>
	else if (__tmp > 65535)
    1600:	6d 89       	ldd	r22, Y+21	; 0x15
    1602:	7e 89       	ldd	r23, Y+22	; 0x16
    1604:	8f 89       	ldd	r24, Y+23	; 0x17
    1606:	98 8d       	ldd	r25, Y+24	; 0x18
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	3f ef       	ldi	r19, 0xFF	; 255
    160c:	4f e7       	ldi	r20, 0x7F	; 127
    160e:	57 e4       	ldi	r21, 0x47	; 71
    1610:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1614:	18 16       	cp	r1, r24
    1616:	4c f5       	brge	.+82     	; 0x166a <Check_created_password+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1618:	69 8d       	ldd	r22, Y+25	; 0x19
    161a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    161c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    161e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	40 e2       	ldi	r20, 0x20	; 32
    1626:	51 e4       	ldi	r21, 0x41	; 65
    1628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	bc 01       	movw	r22, r24
    1632:	cd 01       	movw	r24, r26
    1634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	9c 8b       	std	Y+20, r25	; 0x14
    163e:	8b 8b       	std	Y+19, r24	; 0x13
    1640:	0f c0       	rjmp	.+30     	; 0x1660 <Check_created_password+0x2e0>
    1642:	89 e1       	ldi	r24, 0x19	; 25
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	9a 8b       	std	Y+18, r25	; 0x12
    1648:	89 8b       	std	Y+17, r24	; 0x11
    164a:	89 89       	ldd	r24, Y+17	; 0x11
    164c:	9a 89       	ldd	r25, Y+18	; 0x12
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	f1 f7       	brne	.-4      	; 0x164e <Check_created_password+0x2ce>
    1652:	9a 8b       	std	Y+18, r25	; 0x12
    1654:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1656:	8b 89       	ldd	r24, Y+19	; 0x13
    1658:	9c 89       	ldd	r25, Y+20	; 0x14
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	9c 8b       	std	Y+20, r25	; 0x14
    165e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1660:	8b 89       	ldd	r24, Y+19	; 0x13
    1662:	9c 89       	ldd	r25, Y+20	; 0x14
    1664:	00 97       	sbiw	r24, 0x00	; 0
    1666:	69 f7       	brne	.-38     	; 0x1642 <Check_created_password+0x2c2>
    1668:	14 c0       	rjmp	.+40     	; 0x1692 <Check_created_password+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    166a:	6d 89       	ldd	r22, Y+21	; 0x15
    166c:	7e 89       	ldd	r23, Y+22	; 0x16
    166e:	8f 89       	ldd	r24, Y+23	; 0x17
    1670:	98 8d       	ldd	r25, Y+24	; 0x18
    1672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	9c 8b       	std	Y+20, r25	; 0x14
    167c:	8b 8b       	std	Y+19, r24	; 0x13
    167e:	8b 89       	ldd	r24, Y+19	; 0x13
    1680:	9c 89       	ldd	r25, Y+20	; 0x14
    1682:	98 8b       	std	Y+16, r25	; 0x10
    1684:	8f 87       	std	Y+15, r24	; 0x0f
    1686:	8f 85       	ldd	r24, Y+15	; 0x0f
    1688:	98 89       	ldd	r25, Y+16	; 0x10
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	f1 f7       	brne	.-4      	; 0x168a <Check_created_password+0x30a>
    168e:	98 8b       	std	Y+16, r25	; 0x10
    1690:	8f 87       	std	Y+15, r24	; 0x0f
	for(uint8 i =0;i<5;i++)	//SENDING FIRST PASS
	{
		UART_send_byte(Pass1_Arry[i]);
		_delay_ms(100);
	}
	for(uint8 i =0;i<5;i++) //SENDING SECOND PASS
    1692:	89 ad       	ldd	r24, Y+57	; 0x39
    1694:	8f 5f       	subi	r24, 0xFF	; 255
    1696:	89 af       	std	Y+57, r24	; 0x39
    1698:	89 ad       	ldd	r24, Y+57	; 0x39
    169a:	85 30       	cpi	r24, 0x05	; 5
    169c:	08 f4       	brcc	.+2      	; 0x16a0 <Check_created_password+0x320>
    169e:	7c cf       	rjmp	.-264    	; 0x1598 <Check_created_password+0x218>
	{
			UART_send_byte(Pass2_Arry[i]);
			_delay_ms(100);
	}
	LCD_displayString("Sent");	//TEST CASE
    16a0:	87 e9       	ldi	r24, 0x97	; 151
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <LCD_displayString>
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	aa e7       	ldi	r26, 0x7A	; 122
    16ae:	b3 e4       	ldi	r27, 0x43	; 67
    16b0:	8b 87       	std	Y+11, r24	; 0x0b
    16b2:	9c 87       	std	Y+12, r25	; 0x0c
    16b4:	ad 87       	std	Y+13, r26	; 0x0d
    16b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    16bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    16be:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	4a e7       	ldi	r20, 0x7A	; 122
    16c6:	53 e4       	ldi	r21, 0x43	; 67
    16c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	8f 83       	std	Y+7, r24	; 0x07
    16d2:	98 87       	std	Y+8, r25	; 0x08
    16d4:	a9 87       	std	Y+9, r26	; 0x09
    16d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16d8:	6f 81       	ldd	r22, Y+7	; 0x07
    16da:	78 85       	ldd	r23, Y+8	; 0x08
    16dc:	89 85       	ldd	r24, Y+9	; 0x09
    16de:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e8       	ldi	r20, 0x80	; 128
    16e6:	5f e3       	ldi	r21, 0x3F	; 63
    16e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ec:	88 23       	and	r24, r24
    16ee:	2c f4       	brge	.+10     	; 0x16fa <Check_created_password+0x37a>
		__ticks = 1;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	9e 83       	std	Y+6, r25	; 0x06
    16f6:	8d 83       	std	Y+5, r24	; 0x05
    16f8:	3f c0       	rjmp	.+126    	; 0x1778 <Check_created_password+0x3f8>
	else if (__tmp > 65535)
    16fa:	6f 81       	ldd	r22, Y+7	; 0x07
    16fc:	78 85       	ldd	r23, Y+8	; 0x08
    16fe:	89 85       	ldd	r24, Y+9	; 0x09
    1700:	9a 85       	ldd	r25, Y+10	; 0x0a
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	3f ef       	ldi	r19, 0xFF	; 255
    1706:	4f e7       	ldi	r20, 0x7F	; 127
    1708:	57 e4       	ldi	r21, 0x47	; 71
    170a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    170e:	18 16       	cp	r1, r24
    1710:	4c f5       	brge	.+82     	; 0x1764 <Check_created_password+0x3e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1712:	6b 85       	ldd	r22, Y+11	; 0x0b
    1714:	7c 85       	ldd	r23, Y+12	; 0x0c
    1716:	8d 85       	ldd	r24, Y+13	; 0x0d
    1718:	9e 85       	ldd	r25, Y+14	; 0x0e
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	40 e2       	ldi	r20, 0x20	; 32
    1720:	51 e4       	ldi	r21, 0x41	; 65
    1722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	bc 01       	movw	r22, r24
    172c:	cd 01       	movw	r24, r26
    172e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	9e 83       	std	Y+6, r25	; 0x06
    1738:	8d 83       	std	Y+5, r24	; 0x05
    173a:	0f c0       	rjmp	.+30     	; 0x175a <Check_created_password+0x3da>
    173c:	89 e1       	ldi	r24, 0x19	; 25
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	9c 83       	std	Y+4, r25	; 0x04
    1742:	8b 83       	std	Y+3, r24	; 0x03
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	9c 81       	ldd	r25, Y+4	; 0x04
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <Check_created_password+0x3c8>
    174c:	9c 83       	std	Y+4, r25	; 0x04
    174e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1750:	8d 81       	ldd	r24, Y+5	; 0x05
    1752:	9e 81       	ldd	r25, Y+6	; 0x06
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	9e 83       	std	Y+6, r25	; 0x06
    1758:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175a:	8d 81       	ldd	r24, Y+5	; 0x05
    175c:	9e 81       	ldd	r25, Y+6	; 0x06
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	69 f7       	brne	.-38     	; 0x173c <Check_created_password+0x3bc>
    1762:	14 c0       	rjmp	.+40     	; 0x178c <Check_created_password+0x40c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1764:	6f 81       	ldd	r22, Y+7	; 0x07
    1766:	78 85       	ldd	r23, Y+8	; 0x08
    1768:	89 85       	ldd	r24, Y+9	; 0x09
    176a:	9a 85       	ldd	r25, Y+10	; 0x0a
    176c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	9e 83       	std	Y+6, r25	; 0x06
    1776:	8d 83       	std	Y+5, r24	; 0x05
    1778:	8d 81       	ldd	r24, Y+5	; 0x05
    177a:	9e 81       	ldd	r25, Y+6	; 0x06
    177c:	9a 83       	std	Y+2, r25	; 0x02
    177e:	89 83       	std	Y+1, r24	; 0x01
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	9a 81       	ldd	r25, Y+2	; 0x02
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <Check_created_password+0x404>
    1788:	9a 83       	std	Y+2, r25	; 0x02
    178a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		errors status = UART_receive_byte(); // SENT TO EEPROM AND RETURN SAME PASS OR NOT
    178c:	0e 94 91 28 	call	0x5122	; 0x5122 <UART_receive_byte>
    1790:	8b af       	std	Y+59, r24	; 0x3b
	return status;
    1792:	8b ad       	ldd	r24, Y+59	; 0x3b

}
    1794:	ef 96       	adiw	r28, 0x3f	; 63
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <Main_options>:

/*
 * function to print the main menu
 * */
uint8 Main_options()
{
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    17ae:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
	LCD_displayString("+ : Open Door");
    17b2:	8c e9       	ldi	r24, 0x9C	; 156
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    17ba:	2a ea       	ldi	r18, 0xAA	; 170
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	a9 01       	movw	r20, r18
    17c4:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <LCD_displayStringRowColumn>
	return KEYPAD_getPressedKey();
    17c8:	0e 94 2c 1b 	call	0x3658	; 0x3658 <KEYPAD_getPressedKey>
}
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <verify_password>:

/*
 *  function to verify the given password from the keypad with the password saved in the EEPROM
 * */
errors verify_password(uint8 Pass1_Arry[])
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	00 d0       	rcall	.+0      	; 0x17d8 <verify_password+0x6>
    17d8:	00 d0       	rcall	.+0      	; 0x17da <verify_password+0x8>
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	9c 83       	std	Y+4, r25	; 0x04
    17e0:	8b 83       	std	Y+3, r24	; 0x03

	UART_send_byte(Check_this_password); //order the MC2 to check it with the password saved in the EEPROM
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <UART_send_byte>
	for(uint8 i =0;i<5;i++)
    17e8:	19 82       	std	Y+1, r1	; 0x01
    17ea:	0e c0       	rjmp	.+28     	; 0x1808 <verify_password+0x36>
	{
		UART_send_byte(Pass1_Arry[i]);
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	9c 81       	ldd	r25, Y+4	; 0x04
    17f6:	fc 01       	movw	r30, r24
    17f8:	e2 0f       	add	r30, r18
    17fa:	f3 1f       	adc	r31, r19
    17fc:	80 81       	ld	r24, Z
    17fe:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <UART_send_byte>
 * */
errors verify_password(uint8 Pass1_Arry[])
{

	UART_send_byte(Check_this_password); //order the MC2 to check it with the password saved in the EEPROM
	for(uint8 i =0;i<5;i++)
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	8f 5f       	subi	r24, 0xFF	; 255
    1806:	89 83       	std	Y+1, r24	; 0x01
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	85 30       	cpi	r24, 0x05	; 5
    180c:	78 f3       	brcs	.-34     	; 0x17ec <verify_password+0x1a>
	{
		UART_send_byte(Pass1_Arry[i]);
	}
	errors status = UART_receive_byte(); //waiting to confirm that the password is correct or not
    180e:	0e 94 91 28 	call	0x5122	; 0x5122 <UART_receive_byte>
    1812:	8a 83       	std	Y+2, r24	; 0x02
	return status;
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <Open_door>:

/*
 * function to open the door
 * */
void Open_door(uint8 Pass1_Arry[])
{
    1824:	0f 93       	push	r16
    1826:	1f 93       	push	r17
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	ed 97       	sbiw	r28, 0x3d	; 61
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	9d af       	std	Y+61, r25	; 0x3d
    183e:	8c af       	std	Y+60, r24	; 0x3c
	uint8 false_pass_count=0;
    1840:	1b ae       	std	Y+59, r1	; 0x3b
	uint8 i=0;
    1842:	1a ae       	std	Y+58, r1	; 0x3a
    1844:	3e c2       	rjmp	.+1148   	; 0x1cc2 <Open_door+0x49e>

	while(false_pass_count<3)//to count false password max three times
	{
		LCD_clearScreen();
    1846:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
		//_delay_ms(1000);
		LCD_displayString("pls enter Pass: ");
    184a:	8a eb       	ldi	r24, 0xBA	; 186
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <LCD_displayString>
		LCD_moveCursor(1, 0);
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	60 e0       	ldi	r22, 0x00	; 0
    1856:	0e 94 88 26 	call	0x4d10	; 0x4d10 <LCD_moveCursor>
    185a:	03 c1       	rjmp	.+518    	; 0x1a62 <Open_door+0x23e>

		while(i !=5)
			{
				for (i=0;i<5;i++)
    185c:	1a ae       	std	Y+58, r1	; 0x3a
    185e:	fd c0       	rjmp	.+506    	; 0x1a5a <Open_door+0x236>
				{
					while(!(KEYPAD_getPressedKey() <= 9) && (KEYPAD_getPressedKey() >= 0)) {}
    1860:	0e 94 2c 1b 	call	0x3658	; 0x3658 <KEYPAD_getPressedKey>
    1864:	8a 30       	cpi	r24, 0x0A	; 10
    1866:	18 f0       	brcs	.+6      	; 0x186e <Open_door+0x4a>
    1868:	0e 94 2c 1b 	call	0x3658	; 0x3658 <KEYPAD_getPressedKey>
    186c:	f9 cf       	rjmp	.-14     	; 0x1860 <Open_door+0x3c>

						Pass1_Arry[i]=KEYPAD_getPressedKey();
    186e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	8c ad       	ldd	r24, Y+60	; 0x3c
    1876:	9d ad       	ldd	r25, Y+61	; 0x3d
    1878:	8c 01       	movw	r16, r24
    187a:	02 0f       	add	r16, r18
    187c:	13 1f       	adc	r17, r19
    187e:	0e 94 2c 1b 	call	0x3658	; 0x3658 <KEYPAD_getPressedKey>
    1882:	f8 01       	movw	r30, r16
    1884:	80 83       	st	Z, r24
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	aa ef       	ldi	r26, 0xFA	; 250
    188c:	b3 e4       	ldi	r27, 0x43	; 67
    188e:	8d ab       	std	Y+53, r24	; 0x35
    1890:	9e ab       	std	Y+54, r25	; 0x36
    1892:	af ab       	std	Y+55, r26	; 0x37
    1894:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1896:	6d a9       	ldd	r22, Y+53	; 0x35
    1898:	7e a9       	ldd	r23, Y+54	; 0x36
    189a:	8f a9       	ldd	r24, Y+55	; 0x37
    189c:	98 ad       	ldd	r25, Y+56	; 0x38
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	4a e7       	ldi	r20, 0x7A	; 122
    18a4:	53 e4       	ldi	r21, 0x43	; 67
    18a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	89 ab       	std	Y+49, r24	; 0x31
    18b0:	9a ab       	std	Y+50, r25	; 0x32
    18b2:	ab ab       	std	Y+51, r26	; 0x33
    18b4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18b6:	69 a9       	ldd	r22, Y+49	; 0x31
    18b8:	7a a9       	ldd	r23, Y+50	; 0x32
    18ba:	8b a9       	ldd	r24, Y+51	; 0x33
    18bc:	9c a9       	ldd	r25, Y+52	; 0x34
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e8       	ldi	r20, 0x80	; 128
    18c4:	5f e3       	ldi	r21, 0x3F	; 63
    18c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18ca:	88 23       	and	r24, r24
    18cc:	2c f4       	brge	.+10     	; 0x18d8 <Open_door+0xb4>
		__ticks = 1;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	98 ab       	std	Y+48, r25	; 0x30
    18d4:	8f a7       	std	Y+47, r24	; 0x2f
    18d6:	3f c0       	rjmp	.+126    	; 0x1956 <Open_door+0x132>
	else if (__tmp > 65535)
    18d8:	69 a9       	ldd	r22, Y+49	; 0x31
    18da:	7a a9       	ldd	r23, Y+50	; 0x32
    18dc:	8b a9       	ldd	r24, Y+51	; 0x33
    18de:	9c a9       	ldd	r25, Y+52	; 0x34
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	3f ef       	ldi	r19, 0xFF	; 255
    18e4:	4f e7       	ldi	r20, 0x7F	; 127
    18e6:	57 e4       	ldi	r21, 0x47	; 71
    18e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ec:	18 16       	cp	r1, r24
    18ee:	4c f5       	brge	.+82     	; 0x1942 <Open_door+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f0:	6d a9       	ldd	r22, Y+53	; 0x35
    18f2:	7e a9       	ldd	r23, Y+54	; 0x36
    18f4:	8f a9       	ldd	r24, Y+55	; 0x37
    18f6:	98 ad       	ldd	r25, Y+56	; 0x38
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e2       	ldi	r20, 0x20	; 32
    18fe:	51 e4       	ldi	r21, 0x41	; 65
    1900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	bc 01       	movw	r22, r24
    190a:	cd 01       	movw	r24, r26
    190c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	98 ab       	std	Y+48, r25	; 0x30
    1916:	8f a7       	std	Y+47, r24	; 0x2f
    1918:	0f c0       	rjmp	.+30     	; 0x1938 <Open_door+0x114>
    191a:	89 e1       	ldi	r24, 0x19	; 25
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	9e a7       	std	Y+46, r25	; 0x2e
    1920:	8d a7       	std	Y+45, r24	; 0x2d
    1922:	8d a5       	ldd	r24, Y+45	; 0x2d
    1924:	9e a5       	ldd	r25, Y+46	; 0x2e
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	f1 f7       	brne	.-4      	; 0x1926 <Open_door+0x102>
    192a:	9e a7       	std	Y+46, r25	; 0x2e
    192c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1930:	98 a9       	ldd	r25, Y+48	; 0x30
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	98 ab       	std	Y+48, r25	; 0x30
    1936:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1938:	8f a5       	ldd	r24, Y+47	; 0x2f
    193a:	98 a9       	ldd	r25, Y+48	; 0x30
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	69 f7       	brne	.-38     	; 0x191a <Open_door+0xf6>
    1940:	14 c0       	rjmp	.+40     	; 0x196a <Open_door+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1942:	69 a9       	ldd	r22, Y+49	; 0x31
    1944:	7a a9       	ldd	r23, Y+50	; 0x32
    1946:	8b a9       	ldd	r24, Y+51	; 0x33
    1948:	9c a9       	ldd	r25, Y+52	; 0x34
    194a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	98 ab       	std	Y+48, r25	; 0x30
    1954:	8f a7       	std	Y+47, r24	; 0x2f
    1956:	8f a5       	ldd	r24, Y+47	; 0x2f
    1958:	98 a9       	ldd	r25, Y+48	; 0x30
    195a:	9c a7       	std	Y+44, r25	; 0x2c
    195c:	8b a7       	std	Y+43, r24	; 0x2b
    195e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1960:	9c a5       	ldd	r25, Y+44	; 0x2c
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <Open_door+0x13e>
    1966:	9c a7       	std	Y+44, r25	; 0x2c
    1968:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(500);
						LCD_displayCharacter('*');
    196a:	8a e2       	ldi	r24, 0x2A	; 42
    196c:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <LCD_displayCharacter>
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	a8 ec       	ldi	r26, 0xC8	; 200
    1976:	b2 e4       	ldi	r27, 0x42	; 66
    1978:	8f a3       	std	Y+39, r24	; 0x27
    197a:	98 a7       	std	Y+40, r25	; 0x28
    197c:	a9 a7       	std	Y+41, r26	; 0x29
    197e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1980:	6f a1       	ldd	r22, Y+39	; 0x27
    1982:	78 a5       	ldd	r23, Y+40	; 0x28
    1984:	89 a5       	ldd	r24, Y+41	; 0x29
    1986:	9a a5       	ldd	r25, Y+42	; 0x2a
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	4a e7       	ldi	r20, 0x7A	; 122
    198e:	53 e4       	ldi	r21, 0x43	; 67
    1990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	8b a3       	std	Y+35, r24	; 0x23
    199a:	9c a3       	std	Y+36, r25	; 0x24
    199c:	ad a3       	std	Y+37, r26	; 0x25
    199e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19a0:	6b a1       	ldd	r22, Y+35	; 0x23
    19a2:	7c a1       	ldd	r23, Y+36	; 0x24
    19a4:	8d a1       	ldd	r24, Y+37	; 0x25
    19a6:	9e a1       	ldd	r25, Y+38	; 0x26
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e8       	ldi	r20, 0x80	; 128
    19ae:	5f e3       	ldi	r21, 0x3F	; 63
    19b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b4:	88 23       	and	r24, r24
    19b6:	2c f4       	brge	.+10     	; 0x19c2 <Open_door+0x19e>
		__ticks = 1;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	9a a3       	std	Y+34, r25	; 0x22
    19be:	89 a3       	std	Y+33, r24	; 0x21
    19c0:	3f c0       	rjmp	.+126    	; 0x1a40 <Open_door+0x21c>
	else if (__tmp > 65535)
    19c2:	6b a1       	ldd	r22, Y+35	; 0x23
    19c4:	7c a1       	ldd	r23, Y+36	; 0x24
    19c6:	8d a1       	ldd	r24, Y+37	; 0x25
    19c8:	9e a1       	ldd	r25, Y+38	; 0x26
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	3f ef       	ldi	r19, 0xFF	; 255
    19ce:	4f e7       	ldi	r20, 0x7F	; 127
    19d0:	57 e4       	ldi	r21, 0x47	; 71
    19d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d6:	18 16       	cp	r1, r24
    19d8:	4c f5       	brge	.+82     	; 0x1a2c <Open_door+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19da:	6f a1       	ldd	r22, Y+39	; 0x27
    19dc:	78 a5       	ldd	r23, Y+40	; 0x28
    19de:	89 a5       	ldd	r24, Y+41	; 0x29
    19e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e2       	ldi	r20, 0x20	; 32
    19e8:	51 e4       	ldi	r21, 0x41	; 65
    19ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	bc 01       	movw	r22, r24
    19f4:	cd 01       	movw	r24, r26
    19f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	9a a3       	std	Y+34, r25	; 0x22
    1a00:	89 a3       	std	Y+33, r24	; 0x21
    1a02:	0f c0       	rjmp	.+30     	; 0x1a22 <Open_door+0x1fe>
    1a04:	89 e1       	ldi	r24, 0x19	; 25
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	98 a3       	std	Y+32, r25	; 0x20
    1a0a:	8f 8f       	std	Y+31, r24	; 0x1f
    1a0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a0e:	98 a1       	ldd	r25, Y+32	; 0x20
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	f1 f7       	brne	.-4      	; 0x1a10 <Open_door+0x1ec>
    1a14:	98 a3       	std	Y+32, r25	; 0x20
    1a16:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a18:	89 a1       	ldd	r24, Y+33	; 0x21
    1a1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	9a a3       	std	Y+34, r25	; 0x22
    1a20:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a22:	89 a1       	ldd	r24, Y+33	; 0x21
    1a24:	9a a1       	ldd	r25, Y+34	; 0x22
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	69 f7       	brne	.-38     	; 0x1a04 <Open_door+0x1e0>
    1a2a:	14 c0       	rjmp	.+40     	; 0x1a54 <Open_door+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a2e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a30:	8d a1       	ldd	r24, Y+37	; 0x25
    1a32:	9e a1       	ldd	r25, Y+38	; 0x26
    1a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	9a a3       	std	Y+34, r25	; 0x22
    1a3e:	89 a3       	std	Y+33, r24	; 0x21
    1a40:	89 a1       	ldd	r24, Y+33	; 0x21
    1a42:	9a a1       	ldd	r25, Y+34	; 0x22
    1a44:	9e 8f       	std	Y+30, r25	; 0x1e
    1a46:	8d 8f       	std	Y+29, r24	; 0x1d
    1a48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	f1 f7       	brne	.-4      	; 0x1a4c <Open_door+0x228>
    1a50:	9e 8f       	std	Y+30, r25	; 0x1e
    1a52:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_displayString("pls enter Pass: ");
		LCD_moveCursor(1, 0);

		while(i !=5)
			{
				for (i=0;i<5;i++)
    1a54:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a56:	8f 5f       	subi	r24, 0xFF	; 255
    1a58:	8a af       	std	Y+58, r24	; 0x3a
    1a5a:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a5c:	85 30       	cpi	r24, 0x05	; 5
    1a5e:	08 f4       	brcc	.+2      	; 0x1a62 <Open_door+0x23e>
    1a60:	ff ce       	rjmp	.-514    	; 0x1860 <Open_door+0x3c>
		LCD_clearScreen();
		//_delay_ms(1000);
		LCD_displayString("pls enter Pass: ");
		LCD_moveCursor(1, 0);

		while(i !=5)
    1a62:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a64:	85 30       	cpi	r24, 0x05	; 5
    1a66:	09 f0       	breq	.+2      	; 0x1a6a <Open_door+0x246>
    1a68:	f9 ce       	rjmp	.-526    	; 0x185c <Open_door+0x38>
						_delay_ms(500);
						LCD_displayCharacter('*');
						_delay_ms(100);
				}
			}
			i=0;
    1a6a:	1a ae       	std	Y+58, r1	; 0x3a
		while ( 13 != KEYPAD_getPressedKey()  ) {}
    1a6c:	0e 94 2c 1b 	call	0x3658	; 0x3658 <KEYPAD_getPressedKey>
    1a70:	8d 30       	cpi	r24, 0x0D	; 13
    1a72:	e1 f7       	brne	.-8      	; 0x1a6c <Open_door+0x248>
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	aa e7       	ldi	r26, 0x7A	; 122
    1a7a:	b3 e4       	ldi	r27, 0x43	; 67
    1a7c:	89 8f       	std	Y+25, r24	; 0x19
    1a7e:	9a 8f       	std	Y+26, r25	; 0x1a
    1a80:	ab 8f       	std	Y+27, r26	; 0x1b
    1a82:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a84:	69 8d       	ldd	r22, Y+25	; 0x19
    1a86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	4a e7       	ldi	r20, 0x7A	; 122
    1a92:	53 e4       	ldi	r21, 0x43	; 67
    1a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	8d 8b       	std	Y+21, r24	; 0x15
    1a9e:	9e 8b       	std	Y+22, r25	; 0x16
    1aa0:	af 8b       	std	Y+23, r26	; 0x17
    1aa2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1aa4:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa6:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa8:	8f 89       	ldd	r24, Y+23	; 0x17
    1aaa:	98 8d       	ldd	r25, Y+24	; 0x18
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e8       	ldi	r20, 0x80	; 128
    1ab2:	5f e3       	ldi	r21, 0x3F	; 63
    1ab4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ab8:	88 23       	and	r24, r24
    1aba:	2c f4       	brge	.+10     	; 0x1ac6 <Open_door+0x2a2>
		__ticks = 1;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	9c 8b       	std	Y+20, r25	; 0x14
    1ac2:	8b 8b       	std	Y+19, r24	; 0x13
    1ac4:	3f c0       	rjmp	.+126    	; 0x1b44 <Open_door+0x320>
	else if (__tmp > 65535)
    1ac6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aca:	8f 89       	ldd	r24, Y+23	; 0x17
    1acc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	3f ef       	ldi	r19, 0xFF	; 255
    1ad2:	4f e7       	ldi	r20, 0x7F	; 127
    1ad4:	57 e4       	ldi	r21, 0x47	; 71
    1ad6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ada:	18 16       	cp	r1, r24
    1adc:	4c f5       	brge	.+82     	; 0x1b30 <Open_door+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ade:	69 8d       	ldd	r22, Y+25	; 0x19
    1ae0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ae2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ae4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e2       	ldi	r20, 0x20	; 32
    1aec:	51 e4       	ldi	r21, 0x41	; 65
    1aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	bc 01       	movw	r22, r24
    1af8:	cd 01       	movw	r24, r26
    1afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	9c 8b       	std	Y+20, r25	; 0x14
    1b04:	8b 8b       	std	Y+19, r24	; 0x13
    1b06:	0f c0       	rjmp	.+30     	; 0x1b26 <Open_door+0x302>
    1b08:	89 e1       	ldi	r24, 0x19	; 25
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	9a 8b       	std	Y+18, r25	; 0x12
    1b0e:	89 8b       	std	Y+17, r24	; 0x11
    1b10:	89 89       	ldd	r24, Y+17	; 0x11
    1b12:	9a 89       	ldd	r25, Y+18	; 0x12
    1b14:	01 97       	sbiw	r24, 0x01	; 1
    1b16:	f1 f7       	brne	.-4      	; 0x1b14 <Open_door+0x2f0>
    1b18:	9a 8b       	std	Y+18, r25	; 0x12
    1b1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	9c 8b       	std	Y+20, r25	; 0x14
    1b24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b26:	8b 89       	ldd	r24, Y+19	; 0x13
    1b28:	9c 89       	ldd	r25, Y+20	; 0x14
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	69 f7       	brne	.-38     	; 0x1b08 <Open_door+0x2e4>
    1b2e:	14 c0       	rjmp	.+40     	; 0x1b58 <Open_door+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b30:	6d 89       	ldd	r22, Y+21	; 0x15
    1b32:	7e 89       	ldd	r23, Y+22	; 0x16
    1b34:	8f 89       	ldd	r24, Y+23	; 0x17
    1b36:	98 8d       	ldd	r25, Y+24	; 0x18
    1b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	9c 8b       	std	Y+20, r25	; 0x14
    1b42:	8b 8b       	std	Y+19, r24	; 0x13
    1b44:	8b 89       	ldd	r24, Y+19	; 0x13
    1b46:	9c 89       	ldd	r25, Y+20	; 0x14
    1b48:	98 8b       	std	Y+16, r25	; 0x10
    1b4a:	8f 87       	std	Y+15, r24	; 0x0f
    1b4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b4e:	98 89       	ldd	r25, Y+16	; 0x10
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <Open_door+0x32c>
    1b54:	98 8b       	std	Y+16, r25	; 0x10
    1b56:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(250);

		errors status = verify_password(Pass1_Arry); //waiting the MC2 to verify and give an ack or confirm
    1b58:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b5a:	9d ad       	ldd	r25, Y+61	; 0x3d
    1b5c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <verify_password>
    1b60:	89 af       	std	Y+57, r24	; 0x39

		if (status == right_password )
    1b62:	89 ad       	ldd	r24, Y+57	; 0x39
    1b64:	83 30       	cpi	r24, 0x03	; 3
    1b66:	81 f5       	brne	.+96     	; 0x1bc8 <Open_door+0x3a4>
		{

			LCD_clearScreen();
    1b68:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
			LCD_displayString("Unlocking Door");
    1b6c:	8b ec       	ldi	r24, 0xCB	; 203
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <LCD_displayString>
			UART_send_byte(Open);	//telling the MC2 to open
    1b74:	82 e0       	ldi	r24, 0x02	; 2
    1b76:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <UART_send_byte>
			Timer_1_delay(2);  		/*Incase of 8Mhz = Timer_1_delay(15);
    1b7a:	62 e0       	ldi	r22, 0x02	; 2
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <Timer_1_delay>
									  Incase of 1Mhz 15sec/8=1.75  ~2 sec*/

			LCD_clearScreen();
    1b86:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
			LCD_displayString("HOLDING...");
    1b8a:	8a ed       	ldi	r24, 0xDA	; 218
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <LCD_displayString>
			UART_send_byte(Holding);	//telling the MC2 to open
    1b92:	85 e0       	ldi	r24, 0x05	; 5
    1b94:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <UART_send_byte>
			Timer_1_delay(1);			/*Incase of 8Mhz = Timer_1_delay(3);
    1b98:	61 e0       	ldi	r22, 0x01	; 1
    1b9a:	70 e0       	ldi	r23, 0x00	; 0
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <Timer_1_delay>
									  	  Incase of 1Mhz 3sec/8= 0.3 sec ~1 sec */


			LCD_clearScreen();
    1ba4:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
			LCD_displayString("Door is locking");
    1ba8:	85 ee       	ldi	r24, 0xE5	; 229
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <LCD_displayString>
			UART_send_byte(Close);//telling the MC2 to close
    1bb0:	86 e0       	ldi	r24, 0x06	; 6
    1bb2:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <UART_send_byte>

			Timer_1_delay(2);  		/*Incase of 8Mhz = Timer_1_delay(15);
    1bb6:	62 e0       	ldi	r22, 0x02	; 2
    1bb8:	70 e0       	ldi	r23, 0x00	; 0
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <Timer_1_delay>
									  Incase of 1Mhz 15sec/8=1.75 ~ 2 sec*/
			LCD_clearScreen();
    1bc2:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
    1bc6:	81 c0       	rjmp	.+258    	; 0x1cca <Open_door+0x4a6>
			break;
		}
		else
		{
			LCD_clearScreen();
    1bc8:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
			LCD_displayString("Wrong");	//TEST CASE
    1bcc:	85 ef       	ldi	r24, 0xF5	; 245
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <LCD_displayString>
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	aa e7       	ldi	r26, 0x7A	; 122
    1bda:	b4 e4       	ldi	r27, 0x44	; 68
    1bdc:	8b 87       	std	Y+11, r24	; 0x0b
    1bde:	9c 87       	std	Y+12, r25	; 0x0c
    1be0:	ad 87       	std	Y+13, r26	; 0x0d
    1be2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1be8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	4a e7       	ldi	r20, 0x7A	; 122
    1bf2:	53 e4       	ldi	r21, 0x43	; 67
    1bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	8f 83       	std	Y+7, r24	; 0x07
    1bfe:	98 87       	std	Y+8, r25	; 0x08
    1c00:	a9 87       	std	Y+9, r26	; 0x09
    1c02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c04:	6f 81       	ldd	r22, Y+7	; 0x07
    1c06:	78 85       	ldd	r23, Y+8	; 0x08
    1c08:	89 85       	ldd	r24, Y+9	; 0x09
    1c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	40 e8       	ldi	r20, 0x80	; 128
    1c12:	5f e3       	ldi	r21, 0x3F	; 63
    1c14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c18:	88 23       	and	r24, r24
    1c1a:	2c f4       	brge	.+10     	; 0x1c26 <Open_door+0x402>
		__ticks = 1;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	9e 83       	std	Y+6, r25	; 0x06
    1c22:	8d 83       	std	Y+5, r24	; 0x05
    1c24:	3f c0       	rjmp	.+126    	; 0x1ca4 <Open_door+0x480>
	else if (__tmp > 65535)
    1c26:	6f 81       	ldd	r22, Y+7	; 0x07
    1c28:	78 85       	ldd	r23, Y+8	; 0x08
    1c2a:	89 85       	ldd	r24, Y+9	; 0x09
    1c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	3f ef       	ldi	r19, 0xFF	; 255
    1c32:	4f e7       	ldi	r20, 0x7F	; 127
    1c34:	57 e4       	ldi	r21, 0x47	; 71
    1c36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c3a:	18 16       	cp	r1, r24
    1c3c:	4c f5       	brge	.+82     	; 0x1c90 <Open_door+0x46c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e2       	ldi	r20, 0x20	; 32
    1c4c:	51 e4       	ldi	r21, 0x41	; 65
    1c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	bc 01       	movw	r22, r24
    1c58:	cd 01       	movw	r24, r26
    1c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	9e 83       	std	Y+6, r25	; 0x06
    1c64:	8d 83       	std	Y+5, r24	; 0x05
    1c66:	0f c0       	rjmp	.+30     	; 0x1c86 <Open_door+0x462>
    1c68:	89 e1       	ldi	r24, 0x19	; 25
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	9c 83       	std	Y+4, r25	; 0x04
    1c6e:	8b 83       	std	Y+3, r24	; 0x03
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	9c 81       	ldd	r25, Y+4	; 0x04
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	f1 f7       	brne	.-4      	; 0x1c74 <Open_door+0x450>
    1c78:	9c 83       	std	Y+4, r25	; 0x04
    1c7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	9e 83       	std	Y+6, r25	; 0x06
    1c84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c86:	8d 81       	ldd	r24, Y+5	; 0x05
    1c88:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8a:	00 97       	sbiw	r24, 0x00	; 0
    1c8c:	69 f7       	brne	.-38     	; 0x1c68 <Open_door+0x444>
    1c8e:	14 c0       	rjmp	.+40     	; 0x1cb8 <Open_door+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c90:	6f 81       	ldd	r22, Y+7	; 0x07
    1c92:	78 85       	ldd	r23, Y+8	; 0x08
    1c94:	89 85       	ldd	r24, Y+9	; 0x09
    1c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	9e 83       	std	Y+6, r25	; 0x06
    1ca2:	8d 83       	std	Y+5, r24	; 0x05
    1ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca8:	9a 83       	std	Y+2, r25	; 0x02
    1caa:	89 83       	std	Y+1, r24	; 0x01
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <Open_door+0x48c>
    1cb4:	9a 83       	std	Y+2, r25	; 0x02
    1cb6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			LCD_clearScreen();
    1cb8:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
			false_pass_count++; // increment it tell reaching 3
    1cbc:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cbe:	8f 5f       	subi	r24, 0xFF	; 255
    1cc0:	8b af       	std	Y+59, r24	; 0x3b
void Open_door(uint8 Pass1_Arry[])
{
	uint8 false_pass_count=0;
	uint8 i=0;

	while(false_pass_count<3)//to count false password max three times
    1cc2:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cc4:	83 30       	cpi	r24, 0x03	; 3
    1cc6:	08 f4       	brcc	.+2      	; 0x1cca <Open_door+0x4a6>
    1cc8:	be cd       	rjmp	.-1156   	; 0x1846 <Open_door+0x22>
			false_pass_count++; // increment it tell reaching 3
		}

	}

	if(false_pass_count==3)
    1cca:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ccc:	83 30       	cpi	r24, 0x03	; 3
    1cce:	a1 f4       	brne	.+40     	; 0x1cf8 <Open_door+0x4d4>
	{

		LCD_clearScreen();
    1cd0:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
		LCD_displayString("ERROR");//TEST CASE
    1cd4:	8b ef       	ldi	r24, 0xFB	; 251
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <LCD_displayString>
		UART_send_byte(Buzzer_ONN); // SEND TO MC2 TO TURN BUZZER ON
    1cdc:	83 e0       	ldi	r24, 0x03	; 3
    1cde:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <UART_send_byte>
		Timer_1_delay(1);			/*Incase of 8Mhz = Timer_1_delay(3);
    1ce2:	61 e0       	ldi	r22, 0x01	; 1
    1ce4:	70 e0       	ldi	r23, 0x00	; 0
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <Timer_1_delay>
								  	  Incase of 1Mhz 3sec/8= 0.3 sec ~1 sec */
		LCD_clearScreen();
    1cee:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
		UART_send_byte(Buzzer_OFF); // hear i controlled the timing of the buzzer by the HMI_ecu not the Control_ecu unlike the motor
    1cf2:	84 e0       	ldi	r24, 0x04	; 4
    1cf4:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <UART_send_byte>

	}


}
    1cf8:	ed 96       	adiw	r28, 0x3d	; 61
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	f8 94       	cli
    1cfe:	de bf       	out	0x3e, r29	; 62
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	cd bf       	out	0x3d, r28	; 61
    1d04:	cf 91       	pop	r28
    1d06:	df 91       	pop	r29
    1d08:	1f 91       	pop	r17
    1d0a:	0f 91       	pop	r16
    1d0c:	08 95       	ret

00001d0e <Change_password>:


//FUCTION TAKES OLD PASS AND CHECKS WITH MEMORY IF SAME, OVERRIDE THE OLD PASS AND SAVE NEW
void Change_password(uint8 pass[])
{
    1d0e:	0f 93       	push	r16
    1d10:	1f 93       	push	r17
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	c5 57       	subi	r28, 0x75	; 117
    1d1c:	d0 40       	sbci	r29, 0x00	; 0
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	f8 94       	cli
    1d22:	de bf       	out	0x3e, r29	; 62
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	cd bf       	out	0x3d, r28	; 61
    1d28:	fe 01       	movw	r30, r28
    1d2a:	ec 58       	subi	r30, 0x8C	; 140
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	91 83       	std	Z+1, r25	; 0x01
    1d30:	80 83       	st	Z, r24
	uint8 false_pass_count=0;
    1d32:	fe 01       	movw	r30, r28
    1d34:	ed 58       	subi	r30, 0x8D	; 141
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	10 82       	st	Z, r1
    1d3a:	09 c5       	rjmp	.+2578   	; 0x274e <Change_password+0xa40>
	uint8 i;

	while(false_pass_count<3)//ENTER PASS MAX 3 TIMES WRONG
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	e3 59       	subi	r30, 0x93	; 147
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	aa ef       	ldi	r26, 0xFA	; 250
    1d48:	b3 e4       	ldi	r27, 0x43	; 67
    1d4a:	80 83       	st	Z, r24
    1d4c:	91 83       	std	Z+1, r25	; 0x01
    1d4e:	a2 83       	std	Z+2, r26	; 0x02
    1d50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d52:	8e 01       	movw	r16, r28
    1d54:	07 59       	subi	r16, 0x97	; 151
    1d56:	1f 4f       	sbci	r17, 0xFF	; 255
    1d58:	fe 01       	movw	r30, r28
    1d5a:	e3 59       	subi	r30, 0x93	; 147
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	60 81       	ld	r22, Z
    1d60:	71 81       	ldd	r23, Z+1	; 0x01
    1d62:	82 81       	ldd	r24, Z+2	; 0x02
    1d64:	93 81       	ldd	r25, Z+3	; 0x03
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	4a e7       	ldi	r20, 0x7A	; 122
    1d6c:	53 e4       	ldi	r21, 0x43	; 67
    1d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	f8 01       	movw	r30, r16
    1d78:	80 83       	st	Z, r24
    1d7a:	91 83       	std	Z+1, r25	; 0x01
    1d7c:	a2 83       	std	Z+2, r26	; 0x02
    1d7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d80:	fe 01       	movw	r30, r28
    1d82:	e7 59       	subi	r30, 0x97	; 151
    1d84:	ff 4f       	sbci	r31, 0xFF	; 255
    1d86:	60 81       	ld	r22, Z
    1d88:	71 81       	ldd	r23, Z+1	; 0x01
    1d8a:	82 81       	ldd	r24, Z+2	; 0x02
    1d8c:	93 81       	ldd	r25, Z+3	; 0x03
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	40 e8       	ldi	r20, 0x80	; 128
    1d94:	5f e3       	ldi	r21, 0x3F	; 63
    1d96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d9a:	88 23       	and	r24, r24
    1d9c:	44 f4       	brge	.+16     	; 0x1dae <Change_password+0xa0>
		__ticks = 1;
    1d9e:	fe 01       	movw	r30, r28
    1da0:	e9 59       	subi	r30, 0x99	; 153
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	91 83       	std	Z+1, r25	; 0x01
    1daa:	80 83       	st	Z, r24
    1dac:	64 c0       	rjmp	.+200    	; 0x1e76 <Change_password+0x168>
	else if (__tmp > 65535)
    1dae:	fe 01       	movw	r30, r28
    1db0:	e7 59       	subi	r30, 0x97	; 151
    1db2:	ff 4f       	sbci	r31, 0xFF	; 255
    1db4:	60 81       	ld	r22, Z
    1db6:	71 81       	ldd	r23, Z+1	; 0x01
    1db8:	82 81       	ldd	r24, Z+2	; 0x02
    1dba:	93 81       	ldd	r25, Z+3	; 0x03
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	3f ef       	ldi	r19, 0xFF	; 255
    1dc0:	4f e7       	ldi	r20, 0x7F	; 127
    1dc2:	57 e4       	ldi	r21, 0x47	; 71
    1dc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc8:	18 16       	cp	r1, r24
    1dca:	0c f0       	brlt	.+2      	; 0x1dce <Change_password+0xc0>
    1dcc:	43 c0       	rjmp	.+134    	; 0x1e54 <Change_password+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e3 59       	subi	r30, 0x93	; 147
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	60 81       	ld	r22, Z
    1dd6:	71 81       	ldd	r23, Z+1	; 0x01
    1dd8:	82 81       	ldd	r24, Z+2	; 0x02
    1dda:	93 81       	ldd	r25, Z+3	; 0x03
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e2       	ldi	r20, 0x20	; 32
    1de2:	51 e4       	ldi	r21, 0x41	; 65
    1de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	8e 01       	movw	r16, r28
    1dee:	09 59       	subi	r16, 0x99	; 153
    1df0:	1f 4f       	sbci	r17, 0xFF	; 255
    1df2:	bc 01       	movw	r22, r24
    1df4:	cd 01       	movw	r24, r26
    1df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	f8 01       	movw	r30, r16
    1e00:	91 83       	std	Z+1, r25	; 0x01
    1e02:	80 83       	st	Z, r24
    1e04:	1f c0       	rjmp	.+62     	; 0x1e44 <Change_password+0x136>
    1e06:	fe 01       	movw	r30, r28
    1e08:	eb 59       	subi	r30, 0x9B	; 155
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	89 e1       	ldi	r24, 0x19	; 25
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	91 83       	std	Z+1, r25	; 0x01
    1e12:	80 83       	st	Z, r24
    1e14:	fe 01       	movw	r30, r28
    1e16:	eb 59       	subi	r30, 0x9B	; 155
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	80 81       	ld	r24, Z
    1e1c:	91 81       	ldd	r25, Z+1	; 0x01
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <Change_password+0x110>
    1e22:	fe 01       	movw	r30, r28
    1e24:	eb 59       	subi	r30, 0x9B	; 155
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	91 83       	std	Z+1, r25	; 0x01
    1e2a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2c:	de 01       	movw	r26, r28
    1e2e:	a9 59       	subi	r26, 0x99	; 153
    1e30:	bf 4f       	sbci	r27, 0xFF	; 255
    1e32:	fe 01       	movw	r30, r28
    1e34:	e9 59       	subi	r30, 0x99	; 153
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	80 81       	ld	r24, Z
    1e3a:	91 81       	ldd	r25, Z+1	; 0x01
    1e3c:	01 97       	sbiw	r24, 0x01	; 1
    1e3e:	11 96       	adiw	r26, 0x01	; 1
    1e40:	9c 93       	st	X, r25
    1e42:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e44:	fe 01       	movw	r30, r28
    1e46:	e9 59       	subi	r30, 0x99	; 153
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	80 81       	ld	r24, Z
    1e4c:	91 81       	ldd	r25, Z+1	; 0x01
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	d1 f6       	brne	.-76     	; 0x1e06 <Change_password+0xf8>
    1e52:	27 c0       	rjmp	.+78     	; 0x1ea2 <Change_password+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e54:	8e 01       	movw	r16, r28
    1e56:	09 59       	subi	r16, 0x99	; 153
    1e58:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	e7 59       	subi	r30, 0x97	; 151
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	60 81       	ld	r22, Z
    1e62:	71 81       	ldd	r23, Z+1	; 0x01
    1e64:	82 81       	ldd	r24, Z+2	; 0x02
    1e66:	93 81       	ldd	r25, Z+3	; 0x03
    1e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	f8 01       	movw	r30, r16
    1e72:	91 83       	std	Z+1, r25	; 0x01
    1e74:	80 83       	st	Z, r24
    1e76:	de 01       	movw	r26, r28
    1e78:	ad 59       	subi	r26, 0x9D	; 157
    1e7a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	e9 59       	subi	r30, 0x99	; 153
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	80 81       	ld	r24, Z
    1e84:	91 81       	ldd	r25, Z+1	; 0x01
    1e86:	8d 93       	st	X+, r24
    1e88:	9c 93       	st	X, r25
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	ed 59       	subi	r30, 0x9D	; 157
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	80 81       	ld	r24, Z
    1e92:	91 81       	ldd	r25, Z+1	; 0x01
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	f1 f7       	brne	.-4      	; 0x1e94 <Change_password+0x186>
    1e98:	fe 01       	movw	r30, r28
    1e9a:	ed 59       	subi	r30, 0x9D	; 157
    1e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	80 83       	st	Z, r24
	{
		_delay_ms(500);
		LCD_clearScreen();
    1ea2:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
		LCD_displayString("Enter OLD Pass:");
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	91 e0       	ldi	r25, 0x01	; 1
    1eaa:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <LCD_displayString>
		LCD_moveCursor(1, 0);
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	0e 94 88 26 	call	0x4d10	; 0x4d10 <LCD_moveCursor>
    1eb6:	91 c1       	rjmp	.+802    	; 0x21da <Change_password+0x4cc>

		while(i !=5)//SAME ANS TWO FUNCTIONS ABOVE
			{
				for (i=0;i<5;i++)
    1eb8:	fe 01       	movw	r30, r28
    1eba:	ee 58       	subi	r30, 0x8E	; 142
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	10 82       	st	Z, r1
    1ec0:	85 c1       	rjmp	.+778    	; 0x21cc <Change_password+0x4be>
				{
				while(!(KEYPAD_getPressedKey() <= 9) && (KEYPAD_getPressedKey() >= 0)) {}
    1ec2:	0e 94 2c 1b 	call	0x3658	; 0x3658 <KEYPAD_getPressedKey>
    1ec6:	8a 30       	cpi	r24, 0x0A	; 10
    1ec8:	18 f0       	brcs	.+6      	; 0x1ed0 <Change_password+0x1c2>
    1eca:	0e 94 2c 1b 	call	0x3658	; 0x3658 <KEYPAD_getPressedKey>
    1ece:	f9 cf       	rjmp	.-14     	; 0x1ec2 <Change_password+0x1b4>

					Pass1_Arry[i]=KEYPAD_getPressedKey();
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	ee 58       	subi	r30, 0x8E	; 142
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	80 81       	ld	r24, Z
    1ed8:	08 2f       	mov	r16, r24
    1eda:	10 e0       	ldi	r17, 0x00	; 0
    1edc:	0e 94 2c 1b 	call	0x3658	; 0x3658 <KEYPAD_getPressedKey>
    1ee0:	f8 01       	movw	r30, r16
    1ee2:	e8 57       	subi	r30, 0x78	; 120
    1ee4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ee6:	80 83       	st	Z, r24
    1ee8:	fe 01       	movw	r30, r28
    1eea:	e1 5a       	subi	r30, 0xA1	; 161
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	aa ef       	ldi	r26, 0xFA	; 250
    1ef4:	b3 e4       	ldi	r27, 0x43	; 67
    1ef6:	80 83       	st	Z, r24
    1ef8:	91 83       	std	Z+1, r25	; 0x01
    1efa:	a2 83       	std	Z+2, r26	; 0x02
    1efc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efe:	8e 01       	movw	r16, r28
    1f00:	05 5a       	subi	r16, 0xA5	; 165
    1f02:	1f 4f       	sbci	r17, 0xFF	; 255
    1f04:	fe 01       	movw	r30, r28
    1f06:	e1 5a       	subi	r30, 0xA1	; 161
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	60 81       	ld	r22, Z
    1f0c:	71 81       	ldd	r23, Z+1	; 0x01
    1f0e:	82 81       	ldd	r24, Z+2	; 0x02
    1f10:	93 81       	ldd	r25, Z+3	; 0x03
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	4a e7       	ldi	r20, 0x7A	; 122
    1f18:	53 e4       	ldi	r21, 0x43	; 67
    1f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	f8 01       	movw	r30, r16
    1f24:	80 83       	st	Z, r24
    1f26:	91 83       	std	Z+1, r25	; 0x01
    1f28:	a2 83       	std	Z+2, r26	; 0x02
    1f2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	e5 5a       	subi	r30, 0xA5	; 165
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	60 81       	ld	r22, Z
    1f34:	71 81       	ldd	r23, Z+1	; 0x01
    1f36:	82 81       	ldd	r24, Z+2	; 0x02
    1f38:	93 81       	ldd	r25, Z+3	; 0x03
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	40 e8       	ldi	r20, 0x80	; 128
    1f40:	5f e3       	ldi	r21, 0x3F	; 63
    1f42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f46:	88 23       	and	r24, r24
    1f48:	44 f4       	brge	.+16     	; 0x1f5a <Change_password+0x24c>
		__ticks = 1;
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	e7 5a       	subi	r30, 0xA7	; 167
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	91 83       	std	Z+1, r25	; 0x01
    1f56:	80 83       	st	Z, r24
    1f58:	64 c0       	rjmp	.+200    	; 0x2022 <Change_password+0x314>
	else if (__tmp > 65535)
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	e5 5a       	subi	r30, 0xA5	; 165
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	60 81       	ld	r22, Z
    1f62:	71 81       	ldd	r23, Z+1	; 0x01
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	93 81       	ldd	r25, Z+3	; 0x03
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	3f ef       	ldi	r19, 0xFF	; 255
    1f6c:	4f e7       	ldi	r20, 0x7F	; 127
    1f6e:	57 e4       	ldi	r21, 0x47	; 71
    1f70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f74:	18 16       	cp	r1, r24
    1f76:	0c f0       	brlt	.+2      	; 0x1f7a <Change_password+0x26c>
    1f78:	43 c0       	rjmp	.+134    	; 0x2000 <Change_password+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	e1 5a       	subi	r30, 0xA1	; 161
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	60 81       	ld	r22, Z
    1f82:	71 81       	ldd	r23, Z+1	; 0x01
    1f84:	82 81       	ldd	r24, Z+2	; 0x02
    1f86:	93 81       	ldd	r25, Z+3	; 0x03
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	40 e2       	ldi	r20, 0x20	; 32
    1f8e:	51 e4       	ldi	r21, 0x41	; 65
    1f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	8e 01       	movw	r16, r28
    1f9a:	07 5a       	subi	r16, 0xA7	; 167
    1f9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9e:	bc 01       	movw	r22, r24
    1fa0:	cd 01       	movw	r24, r26
    1fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	f8 01       	movw	r30, r16
    1fac:	91 83       	std	Z+1, r25	; 0x01
    1fae:	80 83       	st	Z, r24
    1fb0:	1f c0       	rjmp	.+62     	; 0x1ff0 <Change_password+0x2e2>
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	e9 5a       	subi	r30, 0xA9	; 169
    1fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb8:	89 e1       	ldi	r24, 0x19	; 25
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	91 83       	std	Z+1, r25	; 0x01
    1fbe:	80 83       	st	Z, r24
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	e9 5a       	subi	r30, 0xA9	; 169
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	80 81       	ld	r24, Z
    1fc8:	91 81       	ldd	r25, Z+1	; 0x01
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	f1 f7       	brne	.-4      	; 0x1fca <Change_password+0x2bc>
    1fce:	fe 01       	movw	r30, r28
    1fd0:	e9 5a       	subi	r30, 0xA9	; 169
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	91 83       	std	Z+1, r25	; 0x01
    1fd6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd8:	de 01       	movw	r26, r28
    1fda:	a7 5a       	subi	r26, 0xA7	; 167
    1fdc:	bf 4f       	sbci	r27, 0xFF	; 255
    1fde:	fe 01       	movw	r30, r28
    1fe0:	e7 5a       	subi	r30, 0xA7	; 167
    1fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe4:	80 81       	ld	r24, Z
    1fe6:	91 81       	ldd	r25, Z+1	; 0x01
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	11 96       	adiw	r26, 0x01	; 1
    1fec:	9c 93       	st	X, r25
    1fee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	e7 5a       	subi	r30, 0xA7	; 167
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	80 81       	ld	r24, Z
    1ff8:	91 81       	ldd	r25, Z+1	; 0x01
    1ffa:	00 97       	sbiw	r24, 0x00	; 0
    1ffc:	d1 f6       	brne	.-76     	; 0x1fb2 <Change_password+0x2a4>
    1ffe:	27 c0       	rjmp	.+78     	; 0x204e <Change_password+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2000:	8e 01       	movw	r16, r28
    2002:	07 5a       	subi	r16, 0xA7	; 167
    2004:	1f 4f       	sbci	r17, 0xFF	; 255
    2006:	fe 01       	movw	r30, r28
    2008:	e5 5a       	subi	r30, 0xA5	; 165
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	60 81       	ld	r22, Z
    200e:	71 81       	ldd	r23, Z+1	; 0x01
    2010:	82 81       	ldd	r24, Z+2	; 0x02
    2012:	93 81       	ldd	r25, Z+3	; 0x03
    2014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	f8 01       	movw	r30, r16
    201e:	91 83       	std	Z+1, r25	; 0x01
    2020:	80 83       	st	Z, r24
    2022:	de 01       	movw	r26, r28
    2024:	ab 5a       	subi	r26, 0xAB	; 171
    2026:	bf 4f       	sbci	r27, 0xFF	; 255
    2028:	fe 01       	movw	r30, r28
    202a:	e7 5a       	subi	r30, 0xA7	; 167
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	80 81       	ld	r24, Z
    2030:	91 81       	ldd	r25, Z+1	; 0x01
    2032:	8d 93       	st	X+, r24
    2034:	9c 93       	st	X, r25
    2036:	fe 01       	movw	r30, r28
    2038:	eb 5a       	subi	r30, 0xAB	; 171
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	80 81       	ld	r24, Z
    203e:	91 81       	ldd	r25, Z+1	; 0x01
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	f1 f7       	brne	.-4      	; 0x2040 <Change_password+0x332>
    2044:	fe 01       	movw	r30, r28
    2046:	eb 5a       	subi	r30, 0xAB	; 171
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	91 83       	std	Z+1, r25	; 0x01
    204c:	80 83       	st	Z, r24
					_delay_ms(500);
					LCD_displayCharacter('*');
    204e:	8a e2       	ldi	r24, 0x2A	; 42
    2050:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <LCD_displayCharacter>
    2054:	fe 01       	movw	r30, r28
    2056:	ef 5a       	subi	r30, 0xAF	; 175
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	a8 ec       	ldi	r26, 0xC8	; 200
    2060:	b2 e4       	ldi	r27, 0x42	; 66
    2062:	80 83       	st	Z, r24
    2064:	91 83       	std	Z+1, r25	; 0x01
    2066:	a2 83       	std	Z+2, r26	; 0x02
    2068:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206a:	8e 01       	movw	r16, r28
    206c:	03 5b       	subi	r16, 0xB3	; 179
    206e:	1f 4f       	sbci	r17, 0xFF	; 255
    2070:	fe 01       	movw	r30, r28
    2072:	ef 5a       	subi	r30, 0xAF	; 175
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	60 81       	ld	r22, Z
    2078:	71 81       	ldd	r23, Z+1	; 0x01
    207a:	82 81       	ldd	r24, Z+2	; 0x02
    207c:	93 81       	ldd	r25, Z+3	; 0x03
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	4a e7       	ldi	r20, 0x7A	; 122
    2084:	53 e4       	ldi	r21, 0x43	; 67
    2086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	f8 01       	movw	r30, r16
    2090:	80 83       	st	Z, r24
    2092:	91 83       	std	Z+1, r25	; 0x01
    2094:	a2 83       	std	Z+2, r26	; 0x02
    2096:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2098:	fe 01       	movw	r30, r28
    209a:	e3 5b       	subi	r30, 0xB3	; 179
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	60 81       	ld	r22, Z
    20a0:	71 81       	ldd	r23, Z+1	; 0x01
    20a2:	82 81       	ldd	r24, Z+2	; 0x02
    20a4:	93 81       	ldd	r25, Z+3	; 0x03
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	40 e8       	ldi	r20, 0x80	; 128
    20ac:	5f e3       	ldi	r21, 0x3F	; 63
    20ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b2:	88 23       	and	r24, r24
    20b4:	44 f4       	brge	.+16     	; 0x20c6 <Change_password+0x3b8>
		__ticks = 1;
    20b6:	fe 01       	movw	r30, r28
    20b8:	e5 5b       	subi	r30, 0xB5	; 181
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	91 83       	std	Z+1, r25	; 0x01
    20c2:	80 83       	st	Z, r24
    20c4:	64 c0       	rjmp	.+200    	; 0x218e <Change_password+0x480>
	else if (__tmp > 65535)
    20c6:	fe 01       	movw	r30, r28
    20c8:	e3 5b       	subi	r30, 0xB3	; 179
    20ca:	ff 4f       	sbci	r31, 0xFF	; 255
    20cc:	60 81       	ld	r22, Z
    20ce:	71 81       	ldd	r23, Z+1	; 0x01
    20d0:	82 81       	ldd	r24, Z+2	; 0x02
    20d2:	93 81       	ldd	r25, Z+3	; 0x03
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	3f ef       	ldi	r19, 0xFF	; 255
    20d8:	4f e7       	ldi	r20, 0x7F	; 127
    20da:	57 e4       	ldi	r21, 0x47	; 71
    20dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e0:	18 16       	cp	r1, r24
    20e2:	0c f0       	brlt	.+2      	; 0x20e6 <Change_password+0x3d8>
    20e4:	43 c0       	rjmp	.+134    	; 0x216c <Change_password+0x45e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e6:	fe 01       	movw	r30, r28
    20e8:	ef 5a       	subi	r30, 0xAF	; 175
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	60 81       	ld	r22, Z
    20ee:	71 81       	ldd	r23, Z+1	; 0x01
    20f0:	82 81       	ldd	r24, Z+2	; 0x02
    20f2:	93 81       	ldd	r25, Z+3	; 0x03
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e2       	ldi	r20, 0x20	; 32
    20fa:	51 e4       	ldi	r21, 0x41	; 65
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	8e 01       	movw	r16, r28
    2106:	05 5b       	subi	r16, 0xB5	; 181
    2108:	1f 4f       	sbci	r17, 0xFF	; 255
    210a:	bc 01       	movw	r22, r24
    210c:	cd 01       	movw	r24, r26
    210e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	f8 01       	movw	r30, r16
    2118:	91 83       	std	Z+1, r25	; 0x01
    211a:	80 83       	st	Z, r24
    211c:	1f c0       	rjmp	.+62     	; 0x215c <Change_password+0x44e>
    211e:	fe 01       	movw	r30, r28
    2120:	e7 5b       	subi	r30, 0xB7	; 183
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	89 e1       	ldi	r24, 0x19	; 25
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	91 83       	std	Z+1, r25	; 0x01
    212a:	80 83       	st	Z, r24
    212c:	fe 01       	movw	r30, r28
    212e:	e7 5b       	subi	r30, 0xB7	; 183
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	80 81       	ld	r24, Z
    2134:	91 81       	ldd	r25, Z+1	; 0x01
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	f1 f7       	brne	.-4      	; 0x2136 <Change_password+0x428>
    213a:	fe 01       	movw	r30, r28
    213c:	e7 5b       	subi	r30, 0xB7	; 183
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	91 83       	std	Z+1, r25	; 0x01
    2142:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2144:	de 01       	movw	r26, r28
    2146:	a5 5b       	subi	r26, 0xB5	; 181
    2148:	bf 4f       	sbci	r27, 0xFF	; 255
    214a:	fe 01       	movw	r30, r28
    214c:	e5 5b       	subi	r30, 0xB5	; 181
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	80 81       	ld	r24, Z
    2152:	91 81       	ldd	r25, Z+1	; 0x01
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	11 96       	adiw	r26, 0x01	; 1
    2158:	9c 93       	st	X, r25
    215a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215c:	fe 01       	movw	r30, r28
    215e:	e5 5b       	subi	r30, 0xB5	; 181
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	80 81       	ld	r24, Z
    2164:	91 81       	ldd	r25, Z+1	; 0x01
    2166:	00 97       	sbiw	r24, 0x00	; 0
    2168:	d1 f6       	brne	.-76     	; 0x211e <Change_password+0x410>
    216a:	27 c0       	rjmp	.+78     	; 0x21ba <Change_password+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216c:	8e 01       	movw	r16, r28
    216e:	05 5b       	subi	r16, 0xB5	; 181
    2170:	1f 4f       	sbci	r17, 0xFF	; 255
    2172:	fe 01       	movw	r30, r28
    2174:	e3 5b       	subi	r30, 0xB3	; 179
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	60 81       	ld	r22, Z
    217a:	71 81       	ldd	r23, Z+1	; 0x01
    217c:	82 81       	ldd	r24, Z+2	; 0x02
    217e:	93 81       	ldd	r25, Z+3	; 0x03
    2180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	f8 01       	movw	r30, r16
    218a:	91 83       	std	Z+1, r25	; 0x01
    218c:	80 83       	st	Z, r24
    218e:	de 01       	movw	r26, r28
    2190:	a9 5b       	subi	r26, 0xB9	; 185
    2192:	bf 4f       	sbci	r27, 0xFF	; 255
    2194:	fe 01       	movw	r30, r28
    2196:	e5 5b       	subi	r30, 0xB5	; 181
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	80 81       	ld	r24, Z
    219c:	91 81       	ldd	r25, Z+1	; 0x01
    219e:	8d 93       	st	X+, r24
    21a0:	9c 93       	st	X, r25
    21a2:	fe 01       	movw	r30, r28
    21a4:	e9 5b       	subi	r30, 0xB9	; 185
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	80 81       	ld	r24, Z
    21aa:	91 81       	ldd	r25, Z+1	; 0x01
    21ac:	01 97       	sbiw	r24, 0x01	; 1
    21ae:	f1 f7       	brne	.-4      	; 0x21ac <Change_password+0x49e>
    21b0:	fe 01       	movw	r30, r28
    21b2:	e9 5b       	subi	r30, 0xB9	; 185
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	91 83       	std	Z+1, r25	; 0x01
    21b8:	80 83       	st	Z, r24
		LCD_displayString("Enter OLD Pass:");
		LCD_moveCursor(1, 0);

		while(i !=5)//SAME ANS TWO FUNCTIONS ABOVE
			{
				for (i=0;i<5;i++)
    21ba:	de 01       	movw	r26, r28
    21bc:	ae 58       	subi	r26, 0x8E	; 142
    21be:	bf 4f       	sbci	r27, 0xFF	; 255
    21c0:	fe 01       	movw	r30, r28
    21c2:	ee 58       	subi	r30, 0x8E	; 142
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	80 81       	ld	r24, Z
    21c8:	8f 5f       	subi	r24, 0xFF	; 255
    21ca:	8c 93       	st	X, r24
    21cc:	fe 01       	movw	r30, r28
    21ce:	ee 58       	subi	r30, 0x8E	; 142
    21d0:	ff 4f       	sbci	r31, 0xFF	; 255
    21d2:	80 81       	ld	r24, Z
    21d4:	85 30       	cpi	r24, 0x05	; 5
    21d6:	08 f4       	brcc	.+2      	; 0x21da <Change_password+0x4cc>
    21d8:	74 ce       	rjmp	.-792    	; 0x1ec2 <Change_password+0x1b4>
		_delay_ms(500);
		LCD_clearScreen();
		LCD_displayString("Enter OLD Pass:");
		LCD_moveCursor(1, 0);

		while(i !=5)//SAME ANS TWO FUNCTIONS ABOVE
    21da:	fe 01       	movw	r30, r28
    21dc:	ee 58       	subi	r30, 0x8E	; 142
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	80 81       	ld	r24, Z
    21e2:	85 30       	cpi	r24, 0x05	; 5
    21e4:	09 f0       	breq	.+2      	; 0x21e8 <Change_password+0x4da>
    21e6:	68 ce       	rjmp	.-816    	; 0x1eb8 <Change_password+0x1aa>
					_delay_ms(500);
					LCD_displayCharacter('*');
				_delay_ms(100);
				}
			}
					i=0;	//TO ALLOW 3 TRIALS FOR PASSWORLD
    21e8:	fe 01       	movw	r30, r28
    21ea:	ee 58       	subi	r30, 0x8E	; 142
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	10 82       	st	Z, r1
				while ( 13 != KEYPAD_getPressedKey()  ) {}
    21f0:	0e 94 2c 1b 	call	0x3658	; 0x3658 <KEYPAD_getPressedKey>
    21f4:	8d 30       	cpi	r24, 0x0D	; 13
    21f6:	e1 f7       	brne	.-8      	; 0x21f0 <Change_password+0x4e2>
    21f8:	fe 01       	movw	r30, r28
    21fa:	ed 5b       	subi	r30, 0xBD	; 189
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	aa e7       	ldi	r26, 0x7A	; 122
    2204:	b3 e4       	ldi	r27, 0x43	; 67
    2206:	80 83       	st	Z, r24
    2208:	91 83       	std	Z+1, r25	; 0x01
    220a:	a2 83       	std	Z+2, r26	; 0x02
    220c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220e:	8e 01       	movw	r16, r28
    2210:	01 5c       	subi	r16, 0xC1	; 193
    2212:	1f 4f       	sbci	r17, 0xFF	; 255
    2214:	fe 01       	movw	r30, r28
    2216:	ed 5b       	subi	r30, 0xBD	; 189
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	60 81       	ld	r22, Z
    221c:	71 81       	ldd	r23, Z+1	; 0x01
    221e:	82 81       	ldd	r24, Z+2	; 0x02
    2220:	93 81       	ldd	r25, Z+3	; 0x03
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	4a e7       	ldi	r20, 0x7A	; 122
    2228:	53 e4       	ldi	r21, 0x43	; 67
    222a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	f8 01       	movw	r30, r16
    2234:	80 83       	st	Z, r24
    2236:	91 83       	std	Z+1, r25	; 0x01
    2238:	a2 83       	std	Z+2, r26	; 0x02
    223a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    223c:	fe 01       	movw	r30, r28
    223e:	ff 96       	adiw	r30, 0x3f	; 63
    2240:	60 81       	ld	r22, Z
    2242:	71 81       	ldd	r23, Z+1	; 0x01
    2244:	82 81       	ldd	r24, Z+2	; 0x02
    2246:	93 81       	ldd	r25, Z+3	; 0x03
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e8       	ldi	r20, 0x80	; 128
    224e:	5f e3       	ldi	r21, 0x3F	; 63
    2250:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2254:	88 23       	and	r24, r24
    2256:	2c f4       	brge	.+10     	; 0x2262 <Change_password+0x554>
		__ticks = 1;
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	9e af       	std	Y+62, r25	; 0x3e
    225e:	8d af       	std	Y+61, r24	; 0x3d
    2260:	46 c0       	rjmp	.+140    	; 0x22ee <Change_password+0x5e0>
	else if (__tmp > 65535)
    2262:	fe 01       	movw	r30, r28
    2264:	ff 96       	adiw	r30, 0x3f	; 63
    2266:	60 81       	ld	r22, Z
    2268:	71 81       	ldd	r23, Z+1	; 0x01
    226a:	82 81       	ldd	r24, Z+2	; 0x02
    226c:	93 81       	ldd	r25, Z+3	; 0x03
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	3f ef       	ldi	r19, 0xFF	; 255
    2272:	4f e7       	ldi	r20, 0x7F	; 127
    2274:	57 e4       	ldi	r21, 0x47	; 71
    2276:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    227a:	18 16       	cp	r1, r24
    227c:	64 f5       	brge	.+88     	; 0x22d6 <Change_password+0x5c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227e:	fe 01       	movw	r30, r28
    2280:	ed 5b       	subi	r30, 0xBD	; 189
    2282:	ff 4f       	sbci	r31, 0xFF	; 255
    2284:	60 81       	ld	r22, Z
    2286:	71 81       	ldd	r23, Z+1	; 0x01
    2288:	82 81       	ldd	r24, Z+2	; 0x02
    228a:	93 81       	ldd	r25, Z+3	; 0x03
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	40 e2       	ldi	r20, 0x20	; 32
    2292:	51 e4       	ldi	r21, 0x41	; 65
    2294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	bc 01       	movw	r22, r24
    229e:	cd 01       	movw	r24, r26
    22a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	9e af       	std	Y+62, r25	; 0x3e
    22aa:	8d af       	std	Y+61, r24	; 0x3d
    22ac:	0f c0       	rjmp	.+30     	; 0x22cc <Change_password+0x5be>
    22ae:	89 e1       	ldi	r24, 0x19	; 25
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	9c af       	std	Y+60, r25	; 0x3c
    22b4:	8b af       	std	Y+59, r24	; 0x3b
    22b6:	8b ad       	ldd	r24, Y+59	; 0x3b
    22b8:	9c ad       	ldd	r25, Y+60	; 0x3c
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	f1 f7       	brne	.-4      	; 0x22ba <Change_password+0x5ac>
    22be:	9c af       	std	Y+60, r25	; 0x3c
    22c0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    22c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	9e af       	std	Y+62, r25	; 0x3e
    22ca:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    22ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    22d0:	00 97       	sbiw	r24, 0x00	; 0
    22d2:	69 f7       	brne	.-38     	; 0x22ae <Change_password+0x5a0>
    22d4:	16 c0       	rjmp	.+44     	; 0x2302 <Change_password+0x5f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d6:	fe 01       	movw	r30, r28
    22d8:	ff 96       	adiw	r30, 0x3f	; 63
    22da:	60 81       	ld	r22, Z
    22dc:	71 81       	ldd	r23, Z+1	; 0x01
    22de:	82 81       	ldd	r24, Z+2	; 0x02
    22e0:	93 81       	ldd	r25, Z+3	; 0x03
    22e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	9e af       	std	Y+62, r25	; 0x3e
    22ec:	8d af       	std	Y+61, r24	; 0x3d
    22ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    22f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    22f2:	9a af       	std	Y+58, r25	; 0x3a
    22f4:	89 af       	std	Y+57, r24	; 0x39
    22f6:	89 ad       	ldd	r24, Y+57	; 0x39
    22f8:	9a ad       	ldd	r25, Y+58	; 0x3a
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <Change_password+0x5ec>
    22fe:	9a af       	std	Y+58, r25	; 0x3a
    2300:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(250);

		//SENDIND ENTER PASS TO MC2 AND RETURN RIGHT OR WORNG PASS
		errors status = verify_password(pass);
    2302:	fe 01       	movw	r30, r28
    2304:	ec 58       	subi	r30, 0x8C	; 140
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	80 81       	ld	r24, Z
    230a:	91 81       	ldd	r25, Z+1	; 0x01
    230c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <verify_password>
    2310:	fe 01       	movw	r30, r28
    2312:	ef 58       	subi	r30, 0x8F	; 143
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	80 83       	st	Z, r24
		if (status == right_password )//IF CORRECT OLD PASS ENTERED
    2318:	fe 01       	movw	r30, r28
    231a:	ef 58       	subi	r30, 0x8F	; 143
    231c:	ff 4f       	sbci	r31, 0xFF	; 255
    231e:	80 81       	ld	r24, Z
    2320:	83 30       	cpi	r24, 0x03	; 3
    2322:	09 f0       	breq	.+2      	; 0x2326 <Change_password+0x618>
    2324:	91 c1       	rjmp	.+802    	; 0x2648 <Change_password+0x93a>
		{
			do{
				LCD_clearScreen();
    2326:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	aa ef       	ldi	r26, 0xFA	; 250
    2330:	b3 e4       	ldi	r27, 0x43	; 67
    2332:	8d ab       	std	Y+53, r24	; 0x35
    2334:	9e ab       	std	Y+54, r25	; 0x36
    2336:	af ab       	std	Y+55, r26	; 0x37
    2338:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    233a:	6d a9       	ldd	r22, Y+53	; 0x35
    233c:	7e a9       	ldd	r23, Y+54	; 0x36
    233e:	8f a9       	ldd	r24, Y+55	; 0x37
    2340:	98 ad       	ldd	r25, Y+56	; 0x38
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	4a e7       	ldi	r20, 0x7A	; 122
    2348:	53 e4       	ldi	r21, 0x43	; 67
    234a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	89 ab       	std	Y+49, r24	; 0x31
    2354:	9a ab       	std	Y+50, r25	; 0x32
    2356:	ab ab       	std	Y+51, r26	; 0x33
    2358:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    235a:	69 a9       	ldd	r22, Y+49	; 0x31
    235c:	7a a9       	ldd	r23, Y+50	; 0x32
    235e:	8b a9       	ldd	r24, Y+51	; 0x33
    2360:	9c a9       	ldd	r25, Y+52	; 0x34
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	40 e8       	ldi	r20, 0x80	; 128
    2368:	5f e3       	ldi	r21, 0x3F	; 63
    236a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    236e:	88 23       	and	r24, r24
    2370:	2c f4       	brge	.+10     	; 0x237c <Change_password+0x66e>
		__ticks = 1;
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	98 ab       	std	Y+48, r25	; 0x30
    2378:	8f a7       	std	Y+47, r24	; 0x2f
    237a:	3f c0       	rjmp	.+126    	; 0x23fa <Change_password+0x6ec>
	else if (__tmp > 65535)
    237c:	69 a9       	ldd	r22, Y+49	; 0x31
    237e:	7a a9       	ldd	r23, Y+50	; 0x32
    2380:	8b a9       	ldd	r24, Y+51	; 0x33
    2382:	9c a9       	ldd	r25, Y+52	; 0x34
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	3f ef       	ldi	r19, 0xFF	; 255
    2388:	4f e7       	ldi	r20, 0x7F	; 127
    238a:	57 e4       	ldi	r21, 0x47	; 71
    238c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2390:	18 16       	cp	r1, r24
    2392:	4c f5       	brge	.+82     	; 0x23e6 <Change_password+0x6d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2394:	6d a9       	ldd	r22, Y+53	; 0x35
    2396:	7e a9       	ldd	r23, Y+54	; 0x36
    2398:	8f a9       	ldd	r24, Y+55	; 0x37
    239a:	98 ad       	ldd	r25, Y+56	; 0x38
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e2       	ldi	r20, 0x20	; 32
    23a2:	51 e4       	ldi	r21, 0x41	; 65
    23a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	bc 01       	movw	r22, r24
    23ae:	cd 01       	movw	r24, r26
    23b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	98 ab       	std	Y+48, r25	; 0x30
    23ba:	8f a7       	std	Y+47, r24	; 0x2f
    23bc:	0f c0       	rjmp	.+30     	; 0x23dc <Change_password+0x6ce>
    23be:	89 e1       	ldi	r24, 0x19	; 25
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	9e a7       	std	Y+46, r25	; 0x2e
    23c4:	8d a7       	std	Y+45, r24	; 0x2d
    23c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    23c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	f1 f7       	brne	.-4      	; 0x23ca <Change_password+0x6bc>
    23ce:	9e a7       	std	Y+46, r25	; 0x2e
    23d0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    23d4:	98 a9       	ldd	r25, Y+48	; 0x30
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	98 ab       	std	Y+48, r25	; 0x30
    23da:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    23de:	98 a9       	ldd	r25, Y+48	; 0x30
    23e0:	00 97       	sbiw	r24, 0x00	; 0
    23e2:	69 f7       	brne	.-38     	; 0x23be <Change_password+0x6b0>
    23e4:	14 c0       	rjmp	.+40     	; 0x240e <Change_password+0x700>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23e6:	69 a9       	ldd	r22, Y+49	; 0x31
    23e8:	7a a9       	ldd	r23, Y+50	; 0x32
    23ea:	8b a9       	ldd	r24, Y+51	; 0x33
    23ec:	9c a9       	ldd	r25, Y+52	; 0x34
    23ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	98 ab       	std	Y+48, r25	; 0x30
    23f8:	8f a7       	std	Y+47, r24	; 0x2f
    23fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    23fc:	98 a9       	ldd	r25, Y+48	; 0x30
    23fe:	9c a7       	std	Y+44, r25	; 0x2c
    2400:	8b a7       	std	Y+43, r24	; 0x2b
    2402:	8b a5       	ldd	r24, Y+43	; 0x2b
    2404:	9c a5       	ldd	r25, Y+44	; 0x2c
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	f1 f7       	brne	.-4      	; 0x2406 <Change_password+0x6f8>
    240a:	9c a7       	std	Y+44, r25	; 0x2c
    240c:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(500);

				Pass1_Check_Display(); // ENTER NEW PASS 1
    240e:	0e 94 a3 05 	call	0xb46	; 0xb46 <Pass1_Check_Display>
				LCD_clearScreen();
    2412:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
				Pass2_Check_Display();	 // ENTER NEW PASS 2
    2416:	0e 94 b0 07 	call	0xf60	; 0xf60 <Pass2_Check_Display>

				UART_send_byte(save_new_pass);//
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <UART_send_byte>
				status = Check_created_password(Pass1_Arry, Pass2_Arry); //CHECK IF THE SAME FIRST
    2420:	88 e8       	ldi	r24, 0x88	; 136
    2422:	91 e0       	ldi	r25, 0x01	; 1
    2424:	2d e8       	ldi	r18, 0x8D	; 141
    2426:	31 e0       	ldi	r19, 0x01	; 1
    2428:	b9 01       	movw	r22, r18
    242a:	0e 94 c0 09 	call	0x1380	; 0x1380 <Check_created_password>
    242e:	fe 01       	movw	r30, r28
    2430:	ef 58       	subi	r30, 0x8F	; 143
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	80 83       	st	Z, r24

				//IF TWO PASS NOT THE SAME
				if (status == failed_to_save)
    2436:	fe 01       	movw	r30, r28
    2438:	ef 58       	subi	r30, 0x8F	; 143
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	80 81       	ld	r24, Z
    243e:	88 23       	and	r24, r24
    2440:	09 f0       	breq	.+2      	; 0x2444 <Change_password+0x736>
    2442:	7b c0       	rjmp	.+246    	; 0x253a <Change_password+0x82c>
				{
					LCD_clearScreen();
    2444:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
					LCD_displayString("Not Matched");//TEST CASE
    2448:	81 e1       	ldi	r24, 0x11	; 17
    244a:	91 e0       	ldi	r25, 0x01	; 1
    244c:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <LCD_displayString>
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	90 e8       	ldi	r25, 0x80	; 128
    2454:	ab eb       	ldi	r26, 0xBB	; 187
    2456:	b4 e4       	ldi	r27, 0x44	; 68
    2458:	8f a3       	std	Y+39, r24	; 0x27
    245a:	98 a7       	std	Y+40, r25	; 0x28
    245c:	a9 a7       	std	Y+41, r26	; 0x29
    245e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2460:	6f a1       	ldd	r22, Y+39	; 0x27
    2462:	78 a5       	ldd	r23, Y+40	; 0x28
    2464:	89 a5       	ldd	r24, Y+41	; 0x29
    2466:	9a a5       	ldd	r25, Y+42	; 0x2a
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	4a e7       	ldi	r20, 0x7A	; 122
    246e:	53 e4       	ldi	r21, 0x43	; 67
    2470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	8b a3       	std	Y+35, r24	; 0x23
    247a:	9c a3       	std	Y+36, r25	; 0x24
    247c:	ad a3       	std	Y+37, r26	; 0x25
    247e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2480:	6b a1       	ldd	r22, Y+35	; 0x23
    2482:	7c a1       	ldd	r23, Y+36	; 0x24
    2484:	8d a1       	ldd	r24, Y+37	; 0x25
    2486:	9e a1       	ldd	r25, Y+38	; 0x26
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e8       	ldi	r20, 0x80	; 128
    248e:	5f e3       	ldi	r21, 0x3F	; 63
    2490:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2494:	88 23       	and	r24, r24
    2496:	2c f4       	brge	.+10     	; 0x24a2 <Change_password+0x794>
		__ticks = 1;
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	9a a3       	std	Y+34, r25	; 0x22
    249e:	89 a3       	std	Y+33, r24	; 0x21
    24a0:	3f c0       	rjmp	.+126    	; 0x2520 <Change_password+0x812>
	else if (__tmp > 65535)
    24a2:	6b a1       	ldd	r22, Y+35	; 0x23
    24a4:	7c a1       	ldd	r23, Y+36	; 0x24
    24a6:	8d a1       	ldd	r24, Y+37	; 0x25
    24a8:	9e a1       	ldd	r25, Y+38	; 0x26
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	3f ef       	ldi	r19, 0xFF	; 255
    24ae:	4f e7       	ldi	r20, 0x7F	; 127
    24b0:	57 e4       	ldi	r21, 0x47	; 71
    24b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24b6:	18 16       	cp	r1, r24
    24b8:	4c f5       	brge	.+82     	; 0x250c <Change_password+0x7fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ba:	6f a1       	ldd	r22, Y+39	; 0x27
    24bc:	78 a5       	ldd	r23, Y+40	; 0x28
    24be:	89 a5       	ldd	r24, Y+41	; 0x29
    24c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	40 e2       	ldi	r20, 0x20	; 32
    24c8:	51 e4       	ldi	r21, 0x41	; 65
    24ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	bc 01       	movw	r22, r24
    24d4:	cd 01       	movw	r24, r26
    24d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	9a a3       	std	Y+34, r25	; 0x22
    24e0:	89 a3       	std	Y+33, r24	; 0x21
    24e2:	0f c0       	rjmp	.+30     	; 0x2502 <Change_password+0x7f4>
    24e4:	89 e1       	ldi	r24, 0x19	; 25
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	98 a3       	std	Y+32, r25	; 0x20
    24ea:	8f 8f       	std	Y+31, r24	; 0x1f
    24ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24ee:	98 a1       	ldd	r25, Y+32	; 0x20
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	f1 f7       	brne	.-4      	; 0x24f0 <Change_password+0x7e2>
    24f4:	98 a3       	std	Y+32, r25	; 0x20
    24f6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f8:	89 a1       	ldd	r24, Y+33	; 0x21
    24fa:	9a a1       	ldd	r25, Y+34	; 0x22
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	9a a3       	std	Y+34, r25	; 0x22
    2500:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2502:	89 a1       	ldd	r24, Y+33	; 0x21
    2504:	9a a1       	ldd	r25, Y+34	; 0x22
    2506:	00 97       	sbiw	r24, 0x00	; 0
    2508:	69 f7       	brne	.-38     	; 0x24e4 <Change_password+0x7d6>
    250a:	14 c0       	rjmp	.+40     	; 0x2534 <Change_password+0x826>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250c:	6b a1       	ldd	r22, Y+35	; 0x23
    250e:	7c a1       	ldd	r23, Y+36	; 0x24
    2510:	8d a1       	ldd	r24, Y+37	; 0x25
    2512:	9e a1       	ldd	r25, Y+38	; 0x26
    2514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	9a a3       	std	Y+34, r25	; 0x22
    251e:	89 a3       	std	Y+33, r24	; 0x21
    2520:	89 a1       	ldd	r24, Y+33	; 0x21
    2522:	9a a1       	ldd	r25, Y+34	; 0x22
    2524:	9e 8f       	std	Y+30, r25	; 0x1e
    2526:	8d 8f       	std	Y+29, r24	; 0x1d
    2528:	8d 8d       	ldd	r24, Y+29	; 0x1d
    252a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	f1 f7       	brne	.-4      	; 0x252c <Change_password+0x81e>
    2530:	9e 8f       	std	Y+30, r25	; 0x1e
    2532:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(1500);
					LCD_clearScreen();
    2534:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
    2538:	7f c0       	rjmp	.+254    	; 0x2638 <Change_password+0x92a>
				}
				else if (status == save_new_pass) // IF TWO ARE SAME
    253a:	fe 01       	movw	r30, r28
    253c:	ef 58       	subi	r30, 0x8F	; 143
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	80 81       	ld	r24, Z
    2542:	81 30       	cpi	r24, 0x01	; 1
    2544:	09 f0       	breq	.+2      	; 0x2548 <Change_password+0x83a>
    2546:	78 c0       	rjmp	.+240    	; 0x2638 <Change_password+0x92a>
				{
					LCD_clearScreen();
    2548:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
					LCD_displayString("NEW PASS SAVED");//TEST CASE
    254c:	8d e1       	ldi	r24, 0x1D	; 29
    254e:	91 e0       	ldi	r25, 0x01	; 1
    2550:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <LCD_displayString>
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	90 e8       	ldi	r25, 0x80	; 128
    2558:	ab eb       	ldi	r26, 0xBB	; 187
    255a:	b4 e4       	ldi	r27, 0x44	; 68
    255c:	89 8f       	std	Y+25, r24	; 0x19
    255e:	9a 8f       	std	Y+26, r25	; 0x1a
    2560:	ab 8f       	std	Y+27, r26	; 0x1b
    2562:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2564:	69 8d       	ldd	r22, Y+25	; 0x19
    2566:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2568:	8b 8d       	ldd	r24, Y+27	; 0x1b
    256a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	4a e7       	ldi	r20, 0x7A	; 122
    2572:	53 e4       	ldi	r21, 0x43	; 67
    2574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	8d 8b       	std	Y+21, r24	; 0x15
    257e:	9e 8b       	std	Y+22, r25	; 0x16
    2580:	af 8b       	std	Y+23, r26	; 0x17
    2582:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2584:	6d 89       	ldd	r22, Y+21	; 0x15
    2586:	7e 89       	ldd	r23, Y+22	; 0x16
    2588:	8f 89       	ldd	r24, Y+23	; 0x17
    258a:	98 8d       	ldd	r25, Y+24	; 0x18
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e8       	ldi	r20, 0x80	; 128
    2592:	5f e3       	ldi	r21, 0x3F	; 63
    2594:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2598:	88 23       	and	r24, r24
    259a:	2c f4       	brge	.+10     	; 0x25a6 <Change_password+0x898>
		__ticks = 1;
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	9c 8b       	std	Y+20, r25	; 0x14
    25a2:	8b 8b       	std	Y+19, r24	; 0x13
    25a4:	3f c0       	rjmp	.+126    	; 0x2624 <Change_password+0x916>
	else if (__tmp > 65535)
    25a6:	6d 89       	ldd	r22, Y+21	; 0x15
    25a8:	7e 89       	ldd	r23, Y+22	; 0x16
    25aa:	8f 89       	ldd	r24, Y+23	; 0x17
    25ac:	98 8d       	ldd	r25, Y+24	; 0x18
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	3f ef       	ldi	r19, 0xFF	; 255
    25b2:	4f e7       	ldi	r20, 0x7F	; 127
    25b4:	57 e4       	ldi	r21, 0x47	; 71
    25b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ba:	18 16       	cp	r1, r24
    25bc:	4c f5       	brge	.+82     	; 0x2610 <Change_password+0x902>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25be:	69 8d       	ldd	r22, Y+25	; 0x19
    25c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	40 e2       	ldi	r20, 0x20	; 32
    25cc:	51 e4       	ldi	r21, 0x41	; 65
    25ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	bc 01       	movw	r22, r24
    25d8:	cd 01       	movw	r24, r26
    25da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	9c 8b       	std	Y+20, r25	; 0x14
    25e4:	8b 8b       	std	Y+19, r24	; 0x13
    25e6:	0f c0       	rjmp	.+30     	; 0x2606 <Change_password+0x8f8>
    25e8:	89 e1       	ldi	r24, 0x19	; 25
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	9a 8b       	std	Y+18, r25	; 0x12
    25ee:	89 8b       	std	Y+17, r24	; 0x11
    25f0:	89 89       	ldd	r24, Y+17	; 0x11
    25f2:	9a 89       	ldd	r25, Y+18	; 0x12
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	f1 f7       	brne	.-4      	; 0x25f4 <Change_password+0x8e6>
    25f8:	9a 8b       	std	Y+18, r25	; 0x12
    25fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25fc:	8b 89       	ldd	r24, Y+19	; 0x13
    25fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	9c 8b       	std	Y+20, r25	; 0x14
    2604:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2606:	8b 89       	ldd	r24, Y+19	; 0x13
    2608:	9c 89       	ldd	r25, Y+20	; 0x14
    260a:	00 97       	sbiw	r24, 0x00	; 0
    260c:	69 f7       	brne	.-38     	; 0x25e8 <Change_password+0x8da>
    260e:	14 c0       	rjmp	.+40     	; 0x2638 <Change_password+0x92a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2610:	6d 89       	ldd	r22, Y+21	; 0x15
    2612:	7e 89       	ldd	r23, Y+22	; 0x16
    2614:	8f 89       	ldd	r24, Y+23	; 0x17
    2616:	98 8d       	ldd	r25, Y+24	; 0x18
    2618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	9c 8b       	std	Y+20, r25	; 0x14
    2622:	8b 8b       	std	Y+19, r24	; 0x13
    2624:	8b 89       	ldd	r24, Y+19	; 0x13
    2626:	9c 89       	ldd	r25, Y+20	; 0x14
    2628:	98 8b       	std	Y+16, r25	; 0x10
    262a:	8f 87       	std	Y+15, r24	; 0x0f
    262c:	8f 85       	ldd	r24, Y+15	; 0x0f
    262e:	98 89       	ldd	r25, Y+16	; 0x10
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	f1 f7       	brne	.-4      	; 0x2630 <Change_password+0x922>
    2634:	98 8b       	std	Y+16, r25	; 0x10
    2636:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1500);

				}

			}while(status== failed_to_save); //LOOP 3 TIMES
    2638:	fe 01       	movw	r30, r28
    263a:	ef 58       	subi	r30, 0x8F	; 143
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	80 81       	ld	r24, Z
    2640:	88 23       	and	r24, r24
    2642:	09 f4       	brne	.+2      	; 0x2646 <Change_password+0x938>
    2644:	70 ce       	rjmp	.-800    	; 0x2326 <Change_password+0x618>
    2646:	8a c0       	rjmp	.+276    	; 0x275c <Change_password+0xa4e>
			break;
		}
		else
		{

			false_pass_count++; // INCREAMENT WRONG TRAILS TILL 3
    2648:	de 01       	movw	r26, r28
    264a:	ad 58       	subi	r26, 0x8D	; 141
    264c:	bf 4f       	sbci	r27, 0xFF	; 255
    264e:	fe 01       	movw	r30, r28
    2650:	ed 58       	subi	r30, 0x8D	; 141
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	80 81       	ld	r24, Z
    2656:	8f 5f       	subi	r24, 0xFF	; 255
    2658:	8c 93       	st	X, r24

			LCD_clearScreen();
    265a:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
			LCD_displayString("WRONG"); //TEST CASE
    265e:	8c e2       	ldi	r24, 0x2C	; 44
    2660:	91 e0       	ldi	r25, 0x01	; 1
    2662:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <LCD_displayString>
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	aa e7       	ldi	r26, 0x7A	; 122
    266c:	b4 e4       	ldi	r27, 0x44	; 68
    266e:	8b 87       	std	Y+11, r24	; 0x0b
    2670:	9c 87       	std	Y+12, r25	; 0x0c
    2672:	ad 87       	std	Y+13, r26	; 0x0d
    2674:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2676:	6b 85       	ldd	r22, Y+11	; 0x0b
    2678:	7c 85       	ldd	r23, Y+12	; 0x0c
    267a:	8d 85       	ldd	r24, Y+13	; 0x0d
    267c:	9e 85       	ldd	r25, Y+14	; 0x0e
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	4a e7       	ldi	r20, 0x7A	; 122
    2684:	53 e4       	ldi	r21, 0x43	; 67
    2686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	8f 83       	std	Y+7, r24	; 0x07
    2690:	98 87       	std	Y+8, r25	; 0x08
    2692:	a9 87       	std	Y+9, r26	; 0x09
    2694:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2696:	6f 81       	ldd	r22, Y+7	; 0x07
    2698:	78 85       	ldd	r23, Y+8	; 0x08
    269a:	89 85       	ldd	r24, Y+9	; 0x09
    269c:	9a 85       	ldd	r25, Y+10	; 0x0a
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e8       	ldi	r20, 0x80	; 128
    26a4:	5f e3       	ldi	r21, 0x3F	; 63
    26a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26aa:	88 23       	and	r24, r24
    26ac:	2c f4       	brge	.+10     	; 0x26b8 <Change_password+0x9aa>
		__ticks = 1;
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	9e 83       	std	Y+6, r25	; 0x06
    26b4:	8d 83       	std	Y+5, r24	; 0x05
    26b6:	3f c0       	rjmp	.+126    	; 0x2736 <Change_password+0xa28>
	else if (__tmp > 65535)
    26b8:	6f 81       	ldd	r22, Y+7	; 0x07
    26ba:	78 85       	ldd	r23, Y+8	; 0x08
    26bc:	89 85       	ldd	r24, Y+9	; 0x09
    26be:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	3f ef       	ldi	r19, 0xFF	; 255
    26c4:	4f e7       	ldi	r20, 0x7F	; 127
    26c6:	57 e4       	ldi	r21, 0x47	; 71
    26c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26cc:	18 16       	cp	r1, r24
    26ce:	4c f5       	brge	.+82     	; 0x2722 <Change_password+0xa14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	40 e2       	ldi	r20, 0x20	; 32
    26de:	51 e4       	ldi	r21, 0x41	; 65
    26e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	bc 01       	movw	r22, r24
    26ea:	cd 01       	movw	r24, r26
    26ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	9e 83       	std	Y+6, r25	; 0x06
    26f6:	8d 83       	std	Y+5, r24	; 0x05
    26f8:	0f c0       	rjmp	.+30     	; 0x2718 <Change_password+0xa0a>
    26fa:	89 e1       	ldi	r24, 0x19	; 25
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	9c 83       	std	Y+4, r25	; 0x04
    2700:	8b 83       	std	Y+3, r24	; 0x03
    2702:	8b 81       	ldd	r24, Y+3	; 0x03
    2704:	9c 81       	ldd	r25, Y+4	; 0x04
    2706:	01 97       	sbiw	r24, 0x01	; 1
    2708:	f1 f7       	brne	.-4      	; 0x2706 <Change_password+0x9f8>
    270a:	9c 83       	std	Y+4, r25	; 0x04
    270c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    270e:	8d 81       	ldd	r24, Y+5	; 0x05
    2710:	9e 81       	ldd	r25, Y+6	; 0x06
    2712:	01 97       	sbiw	r24, 0x01	; 1
    2714:	9e 83       	std	Y+6, r25	; 0x06
    2716:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2718:	8d 81       	ldd	r24, Y+5	; 0x05
    271a:	9e 81       	ldd	r25, Y+6	; 0x06
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	69 f7       	brne	.-38     	; 0x26fa <Change_password+0x9ec>
    2720:	14 c0       	rjmp	.+40     	; 0x274a <Change_password+0xa3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2722:	6f 81       	ldd	r22, Y+7	; 0x07
    2724:	78 85       	ldd	r23, Y+8	; 0x08
    2726:	89 85       	ldd	r24, Y+9	; 0x09
    2728:	9a 85       	ldd	r25, Y+10	; 0x0a
    272a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	9e 83       	std	Y+6, r25	; 0x06
    2734:	8d 83       	std	Y+5, r24	; 0x05
    2736:	8d 81       	ldd	r24, Y+5	; 0x05
    2738:	9e 81       	ldd	r25, Y+6	; 0x06
    273a:	9a 83       	std	Y+2, r25	; 0x02
    273c:	89 83       	std	Y+1, r24	; 0x01
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	9a 81       	ldd	r25, Y+2	; 0x02
    2742:	01 97       	sbiw	r24, 0x01	; 1
    2744:	f1 f7       	brne	.-4      	; 0x2742 <Change_password+0xa34>
    2746:	9a 83       	std	Y+2, r25	; 0x02
    2748:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			LCD_clearScreen();
    274a:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
void Change_password(uint8 pass[])
{
	uint8 false_pass_count=0;
	uint8 i;

	while(false_pass_count<3)//ENTER PASS MAX 3 TIMES WRONG
    274e:	fe 01       	movw	r30, r28
    2750:	ed 58       	subi	r30, 0x8D	; 141
    2752:	ff 4f       	sbci	r31, 0xFF	; 255
    2754:	80 81       	ld	r24, Z
    2756:	83 30       	cpi	r24, 0x03	; 3
    2758:	08 f4       	brcc	.+2      	; 0x275c <Change_password+0xa4e>
    275a:	f0 ca       	rjmp	.-2592   	; 0x1d3c <Change_password+0x2e>
			LCD_clearScreen();


		}
	}
	if(false_pass_count==3) //IF THREE TIMES WRONG PASS ENTERED
    275c:	fe 01       	movw	r30, r28
    275e:	ed 58       	subi	r30, 0x8D	; 141
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	80 81       	ld	r24, Z
    2764:	83 30       	cpi	r24, 0x03	; 3
    2766:	91 f4       	brne	.+36     	; 0x278c <Change_password+0xa7e>
	{
		LCD_clearScreen();
    2768:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
		LCD_displayString("ERROR");
    276c:	8b ef       	ldi	r24, 0xFB	; 251
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <LCD_displayString>
		UART_send_byte(Buzzer_ONN); // SEND TO MC2
    2774:	83 e0       	ldi	r24, 0x03	; 3
    2776:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <UART_send_byte>
		Timer_1_delay(1);			/*Incase of 8Mhz = Timer_1_delay(3);
    277a:	61 e0       	ldi	r22, 0x01	; 1
    277c:	70 e0       	ldi	r23, 0x00	; 0
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <Timer_1_delay>
								  	  Incase of 1Mhz 3sec/8= 0.3 sec ~1 sec */
		UART_send_byte(Buzzer_OFF);  // SEND TO MC2
    2786:	84 e0       	ldi	r24, 0x04	; 4
    2788:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <UART_send_byte>

	}
}
    278c:	cb 58       	subi	r28, 0x8B	; 139
    278e:	df 4f       	sbci	r29, 0xFF	; 255
    2790:	0f b6       	in	r0, 0x3f	; 63
    2792:	f8 94       	cli
    2794:	de bf       	out	0x3e, r29	; 62
    2796:	0f be       	out	0x3f, r0	; 63
    2798:	cd bf       	out	0x3d, r28	; 61
    279a:	cf 91       	pop	r28
    279c:	df 91       	pop	r29
    279e:	1f 91       	pop	r17
    27a0:	0f 91       	pop	r16
    27a2:	08 95       	ret

000027a4 <main>:



int main (void)
{
    27a4:	0f 93       	push	r16
    27a6:	1f 93       	push	r17
    27a8:	df 93       	push	r29
    27aa:	cf 93       	push	r28
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
    27b0:	c4 56       	subi	r28, 0x64	; 100
    27b2:	d0 40       	sbci	r29, 0x00	; 0
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	f8 94       	cli
    27b8:	de bf       	out	0x3e, r29	; 62
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	cd bf       	out	0x3d, r28	; 61

	LCD_init();
    27be:	0e 94 b7 1c 	call	0x396e	; 0x396e <LCD_init>

	LCD_displayString("1 Mhz for protes");//according to ENG, MT use 1 Mhz (proteus Craches)
    27c2:	82 e3       	ldi	r24, 0x32	; 50
    27c4:	91 e0       	ldi	r25, 0x01	; 1
    27c6:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"USE ON/C AS ENTR"); // USE ON\C FOR ENTER ONLY
    27ca:	23 e4       	ldi	r18, 0x43	; 67
    27cc:	31 e0       	ldi	r19, 0x01	; 1
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	60 e0       	ldi	r22, 0x00	; 0
    27d2:	a9 01       	movw	r20, r18
    27d4:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <LCD_displayStringRowColumn>
    27d8:	fe 01       	movw	r30, r28
    27da:	ef 5a       	subi	r30, 0xAF	; 175
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	aa e7       	ldi	r26, 0x7A	; 122
    27e4:	b5 e4       	ldi	r27, 0x45	; 69
    27e6:	80 83       	st	Z, r24
    27e8:	91 83       	std	Z+1, r25	; 0x01
    27ea:	a2 83       	std	Z+2, r26	; 0x02
    27ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ee:	8e 01       	movw	r16, r28
    27f0:	03 5b       	subi	r16, 0xB3	; 179
    27f2:	1f 4f       	sbci	r17, 0xFF	; 255
    27f4:	fe 01       	movw	r30, r28
    27f6:	ef 5a       	subi	r30, 0xAF	; 175
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	60 81       	ld	r22, Z
    27fc:	71 81       	ldd	r23, Z+1	; 0x01
    27fe:	82 81       	ldd	r24, Z+2	; 0x02
    2800:	93 81       	ldd	r25, Z+3	; 0x03
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	4a e7       	ldi	r20, 0x7A	; 122
    2808:	53 e4       	ldi	r21, 0x43	; 67
    280a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	f8 01       	movw	r30, r16
    2814:	80 83       	st	Z, r24
    2816:	91 83       	std	Z+1, r25	; 0x01
    2818:	a2 83       	std	Z+2, r26	; 0x02
    281a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    281c:	fe 01       	movw	r30, r28
    281e:	e3 5b       	subi	r30, 0xB3	; 179
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	60 81       	ld	r22, Z
    2824:	71 81       	ldd	r23, Z+1	; 0x01
    2826:	82 81       	ldd	r24, Z+2	; 0x02
    2828:	93 81       	ldd	r25, Z+3	; 0x03
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e8       	ldi	r20, 0x80	; 128
    2830:	5f e3       	ldi	r21, 0x3F	; 63
    2832:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2836:	88 23       	and	r24, r24
    2838:	44 f4       	brge	.+16     	; 0x284a <main+0xa6>
		__ticks = 1;
    283a:	fe 01       	movw	r30, r28
    283c:	e5 5b       	subi	r30, 0xB5	; 181
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	91 83       	std	Z+1, r25	; 0x01
    2846:	80 83       	st	Z, r24
    2848:	64 c0       	rjmp	.+200    	; 0x2912 <main+0x16e>
	else if (__tmp > 65535)
    284a:	fe 01       	movw	r30, r28
    284c:	e3 5b       	subi	r30, 0xB3	; 179
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	60 81       	ld	r22, Z
    2852:	71 81       	ldd	r23, Z+1	; 0x01
    2854:	82 81       	ldd	r24, Z+2	; 0x02
    2856:	93 81       	ldd	r25, Z+3	; 0x03
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	3f ef       	ldi	r19, 0xFF	; 255
    285c:	4f e7       	ldi	r20, 0x7F	; 127
    285e:	57 e4       	ldi	r21, 0x47	; 71
    2860:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2864:	18 16       	cp	r1, r24
    2866:	0c f0       	brlt	.+2      	; 0x286a <main+0xc6>
    2868:	43 c0       	rjmp	.+134    	; 0x28f0 <main+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286a:	fe 01       	movw	r30, r28
    286c:	ef 5a       	subi	r30, 0xAF	; 175
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	60 81       	ld	r22, Z
    2872:	71 81       	ldd	r23, Z+1	; 0x01
    2874:	82 81       	ldd	r24, Z+2	; 0x02
    2876:	93 81       	ldd	r25, Z+3	; 0x03
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e2       	ldi	r20, 0x20	; 32
    287e:	51 e4       	ldi	r21, 0x41	; 65
    2880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	8e 01       	movw	r16, r28
    288a:	05 5b       	subi	r16, 0xB5	; 181
    288c:	1f 4f       	sbci	r17, 0xFF	; 255
    288e:	bc 01       	movw	r22, r24
    2890:	cd 01       	movw	r24, r26
    2892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	f8 01       	movw	r30, r16
    289c:	91 83       	std	Z+1, r25	; 0x01
    289e:	80 83       	st	Z, r24
    28a0:	1f c0       	rjmp	.+62     	; 0x28e0 <main+0x13c>
    28a2:	fe 01       	movw	r30, r28
    28a4:	e7 5b       	subi	r30, 0xB7	; 183
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	89 e1       	ldi	r24, 0x19	; 25
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	91 83       	std	Z+1, r25	; 0x01
    28ae:	80 83       	st	Z, r24
    28b0:	fe 01       	movw	r30, r28
    28b2:	e7 5b       	subi	r30, 0xB7	; 183
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	80 81       	ld	r24, Z
    28b8:	91 81       	ldd	r25, Z+1	; 0x01
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	f1 f7       	brne	.-4      	; 0x28ba <main+0x116>
    28be:	fe 01       	movw	r30, r28
    28c0:	e7 5b       	subi	r30, 0xB7	; 183
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	91 83       	std	Z+1, r25	; 0x01
    28c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c8:	de 01       	movw	r26, r28
    28ca:	a5 5b       	subi	r26, 0xB5	; 181
    28cc:	bf 4f       	sbci	r27, 0xFF	; 255
    28ce:	fe 01       	movw	r30, r28
    28d0:	e5 5b       	subi	r30, 0xB5	; 181
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	80 81       	ld	r24, Z
    28d6:	91 81       	ldd	r25, Z+1	; 0x01
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	11 96       	adiw	r26, 0x01	; 1
    28dc:	9c 93       	st	X, r25
    28de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e0:	fe 01       	movw	r30, r28
    28e2:	e5 5b       	subi	r30, 0xB5	; 181
    28e4:	ff 4f       	sbci	r31, 0xFF	; 255
    28e6:	80 81       	ld	r24, Z
    28e8:	91 81       	ldd	r25, Z+1	; 0x01
    28ea:	00 97       	sbiw	r24, 0x00	; 0
    28ec:	d1 f6       	brne	.-76     	; 0x28a2 <main+0xfe>
    28ee:	27 c0       	rjmp	.+78     	; 0x293e <main+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f0:	8e 01       	movw	r16, r28
    28f2:	05 5b       	subi	r16, 0xB5	; 181
    28f4:	1f 4f       	sbci	r17, 0xFF	; 255
    28f6:	fe 01       	movw	r30, r28
    28f8:	e3 5b       	subi	r30, 0xB3	; 179
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	60 81       	ld	r22, Z
    28fe:	71 81       	ldd	r23, Z+1	; 0x01
    2900:	82 81       	ldd	r24, Z+2	; 0x02
    2902:	93 81       	ldd	r25, Z+3	; 0x03
    2904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	f8 01       	movw	r30, r16
    290e:	91 83       	std	Z+1, r25	; 0x01
    2910:	80 83       	st	Z, r24
    2912:	de 01       	movw	r26, r28
    2914:	a9 5b       	subi	r26, 0xB9	; 185
    2916:	bf 4f       	sbci	r27, 0xFF	; 255
    2918:	fe 01       	movw	r30, r28
    291a:	e5 5b       	subi	r30, 0xB5	; 181
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	80 81       	ld	r24, Z
    2920:	91 81       	ldd	r25, Z+1	; 0x01
    2922:	8d 93       	st	X+, r24
    2924:	9c 93       	st	X, r25
    2926:	fe 01       	movw	r30, r28
    2928:	e9 5b       	subi	r30, 0xB9	; 185
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	80 81       	ld	r24, Z
    292e:	91 81       	ldd	r25, Z+1	; 0x01
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	f1 f7       	brne	.-4      	; 0x2930 <main+0x18c>
    2934:	fe 01       	movw	r30, r28
    2936:	e9 5b       	subi	r30, 0xB9	; 185
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	91 83       	std	Z+1, r25	; 0x01
    293c:	80 83       	st	Z, r24
	_delay_ms(4000);
	LCD_clearScreen();
    293e:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>


	UART_config config_uart ={eight,disabled,one_bit,9600};
    2942:	ce 01       	movw	r24, r28
    2944:	89 5a       	subi	r24, 0xA9	; 169
    2946:	9f 4f       	sbci	r25, 0xFF	; 255
    2948:	a2 96       	adiw	r28, 0x22	; 34
    294a:	9f af       	std	Y+63, r25	; 0x3f
    294c:	8e af       	std	Y+62, r24	; 0x3e
    294e:	a2 97       	sbiw	r28, 0x22	; 34
    2950:	2c e7       	ldi	r18, 0x7C	; 124
    2952:	31 e0       	ldi	r19, 0x01	; 1
    2954:	a4 96       	adiw	r28, 0x24	; 36
    2956:	3f af       	std	Y+63, r19	; 0x3f
    2958:	2e af       	std	Y+62, r18	; 0x3e
    295a:	a4 97       	sbiw	r28, 0x24	; 36
    295c:	37 e0       	ldi	r19, 0x07	; 7
    295e:	a5 96       	adiw	r28, 0x25	; 37
    2960:	3f af       	std	Y+63, r19	; 0x3f
    2962:	a5 97       	sbiw	r28, 0x25	; 37
    2964:	a4 96       	adiw	r28, 0x24	; 36
    2966:	ee ad       	ldd	r30, Y+62	; 0x3e
    2968:	ff ad       	ldd	r31, Y+63	; 0x3f
    296a:	a4 97       	sbiw	r28, 0x24	; 36
    296c:	00 80       	ld	r0, Z
    296e:	a4 96       	adiw	r28, 0x24	; 36
    2970:	2e ad       	ldd	r18, Y+62	; 0x3e
    2972:	3f ad       	ldd	r19, Y+63	; 0x3f
    2974:	a4 97       	sbiw	r28, 0x24	; 36
    2976:	2f 5f       	subi	r18, 0xFF	; 255
    2978:	3f 4f       	sbci	r19, 0xFF	; 255
    297a:	a4 96       	adiw	r28, 0x24	; 36
    297c:	3f af       	std	Y+63, r19	; 0x3f
    297e:	2e af       	std	Y+62, r18	; 0x3e
    2980:	a4 97       	sbiw	r28, 0x24	; 36
    2982:	a2 96       	adiw	r28, 0x22	; 34
    2984:	ee ad       	ldd	r30, Y+62	; 0x3e
    2986:	ff ad       	ldd	r31, Y+63	; 0x3f
    2988:	a2 97       	sbiw	r28, 0x22	; 34
    298a:	00 82       	st	Z, r0
    298c:	a2 96       	adiw	r28, 0x22	; 34
    298e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2990:	3f ad       	ldd	r19, Y+63	; 0x3f
    2992:	a2 97       	sbiw	r28, 0x22	; 34
    2994:	2f 5f       	subi	r18, 0xFF	; 255
    2996:	3f 4f       	sbci	r19, 0xFF	; 255
    2998:	a2 96       	adiw	r28, 0x22	; 34
    299a:	3f af       	std	Y+63, r19	; 0x3f
    299c:	2e af       	std	Y+62, r18	; 0x3e
    299e:	a2 97       	sbiw	r28, 0x22	; 34
    29a0:	a5 96       	adiw	r28, 0x25	; 37
    29a2:	3f ad       	ldd	r19, Y+63	; 0x3f
    29a4:	a5 97       	sbiw	r28, 0x25	; 37
    29a6:	31 50       	subi	r19, 0x01	; 1
    29a8:	a5 96       	adiw	r28, 0x25	; 37
    29aa:	3f af       	std	Y+63, r19	; 0x3f
    29ac:	a5 97       	sbiw	r28, 0x25	; 37
    29ae:	a5 96       	adiw	r28, 0x25	; 37
    29b0:	8f ad       	ldd	r24, Y+63	; 0x3f
    29b2:	a5 97       	sbiw	r28, 0x25	; 37
    29b4:	88 23       	and	r24, r24
    29b6:	b1 f6       	brne	.-84     	; 0x2964 <main+0x1c0>
	UART_init(& config_uart);
    29b8:	ce 01       	movw	r24, r28
    29ba:	89 5a       	subi	r24, 0xA9	; 169
    29bc:	9f 4f       	sbci	r25, 0xFF	; 255
    29be:	0e 94 11 28 	call	0x5022	; 0x5022 <UART_init>


	//Initialization structure for TIMER1
	//Timer1_ConfigType Timer1_ConfigStruct = {0,31250,F_CPU_256,CTC_OCR};

	SREG |= (1<<7);
    29c2:	af e5       	ldi	r26, 0x5F	; 95
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	ef e5       	ldi	r30, 0x5F	; 95
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	80 68       	ori	r24, 0x80	; 128
    29ce:	8c 93       	st	X, r24


	Pass1_Check_Display(); // TAKE PASS1 IN GLOBAL ARRAY
    29d0:	0e 94 a3 05 	call	0xb46	; 0xb46 <Pass1_Check_Display>
	LCD_clearScreen();
    29d4:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
	Pass2_Check_Display(); // TAKE PASS2 IN GLOBAL ARRAY
    29d8:	0e 94 b0 07 	call	0xf60	; 0xf60 <Pass2_Check_Display>
	LCD_clearScreen();
    29dc:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>

	//CHECK IS TWO PASS ARE SAME,IF NOT SUCK THERE
	status = Check_created_password(Pass1_Arry, Pass2_Arry);
    29e0:	88 e8       	ldi	r24, 0x88	; 136
    29e2:	91 e0       	ldi	r25, 0x01	; 1
    29e4:	2d e8       	ldi	r18, 0x8D	; 141
    29e6:	31 e0       	ldi	r19, 0x01	; 1
    29e8:	b9 01       	movw	r22, r18
    29ea:	0e 94 c0 09 	call	0x1380	; 0x1380 <Check_created_password>
    29ee:	fe 01       	movw	r30, r28
    29f0:	ea 5a       	subi	r30, 0xAA	; 170
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	80 83       	st	Z, r24
    29f6:	a2 c0       	rjmp	.+324    	; 0x2b3c <main+0x398>


			while (status == failed_to_save) //KEEP LOOPING UNTILL YOU ENTER SAME SAME
			{
				LCD_moveCursor(1,0);
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	60 e0       	ldi	r22, 0x00	; 0
    29fc:	0e 94 88 26 	call	0x4d10	; 0x4d10 <LCD_moveCursor>
				LCD_displayString("Not Matched");
    2a00:	81 e1       	ldi	r24, 0x11	; 17
    2a02:	91 e0       	ldi	r25, 0x01	; 1
    2a04:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <LCD_displayString>
    2a08:	fe 01       	movw	r30, r28
    2a0a:	ed 5b       	subi	r30, 0xBD	; 189
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	aa e7       	ldi	r26, 0x7A	; 122
    2a14:	b4 e4       	ldi	r27, 0x44	; 68
    2a16:	80 83       	st	Z, r24
    2a18:	91 83       	std	Z+1, r25	; 0x01
    2a1a:	a2 83       	std	Z+2, r26	; 0x02
    2a1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1e:	8e 01       	movw	r16, r28
    2a20:	01 5c       	subi	r16, 0xC1	; 193
    2a22:	1f 4f       	sbci	r17, 0xFF	; 255
    2a24:	fe 01       	movw	r30, r28
    2a26:	ed 5b       	subi	r30, 0xBD	; 189
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	60 81       	ld	r22, Z
    2a2c:	71 81       	ldd	r23, Z+1	; 0x01
    2a2e:	82 81       	ldd	r24, Z+2	; 0x02
    2a30:	93 81       	ldd	r25, Z+3	; 0x03
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	4a e7       	ldi	r20, 0x7A	; 122
    2a38:	53 e4       	ldi	r21, 0x43	; 67
    2a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	f8 01       	movw	r30, r16
    2a44:	80 83       	st	Z, r24
    2a46:	91 83       	std	Z+1, r25	; 0x01
    2a48:	a2 83       	std	Z+2, r26	; 0x02
    2a4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	ff 96       	adiw	r30, 0x3f	; 63
    2a50:	60 81       	ld	r22, Z
    2a52:	71 81       	ldd	r23, Z+1	; 0x01
    2a54:	82 81       	ldd	r24, Z+2	; 0x02
    2a56:	93 81       	ldd	r25, Z+3	; 0x03
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e8       	ldi	r20, 0x80	; 128
    2a5e:	5f e3       	ldi	r21, 0x3F	; 63
    2a60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a64:	88 23       	and	r24, r24
    2a66:	2c f4       	brge	.+10     	; 0x2a72 <main+0x2ce>
		__ticks = 1;
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	9e af       	std	Y+62, r25	; 0x3e
    2a6e:	8d af       	std	Y+61, r24	; 0x3d
    2a70:	46 c0       	rjmp	.+140    	; 0x2afe <main+0x35a>
	else if (__tmp > 65535)
    2a72:	fe 01       	movw	r30, r28
    2a74:	ff 96       	adiw	r30, 0x3f	; 63
    2a76:	60 81       	ld	r22, Z
    2a78:	71 81       	ldd	r23, Z+1	; 0x01
    2a7a:	82 81       	ldd	r24, Z+2	; 0x02
    2a7c:	93 81       	ldd	r25, Z+3	; 0x03
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	3f ef       	ldi	r19, 0xFF	; 255
    2a82:	4f e7       	ldi	r20, 0x7F	; 127
    2a84:	57 e4       	ldi	r21, 0x47	; 71
    2a86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a8a:	18 16       	cp	r1, r24
    2a8c:	64 f5       	brge	.+88     	; 0x2ae6 <main+0x342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a8e:	fe 01       	movw	r30, r28
    2a90:	ed 5b       	subi	r30, 0xBD	; 189
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	60 81       	ld	r22, Z
    2a96:	71 81       	ldd	r23, Z+1	; 0x01
    2a98:	82 81       	ldd	r24, Z+2	; 0x02
    2a9a:	93 81       	ldd	r25, Z+3	; 0x03
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	40 e2       	ldi	r20, 0x20	; 32
    2aa2:	51 e4       	ldi	r21, 0x41	; 65
    2aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	bc 01       	movw	r22, r24
    2aae:	cd 01       	movw	r24, r26
    2ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	9e af       	std	Y+62, r25	; 0x3e
    2aba:	8d af       	std	Y+61, r24	; 0x3d
    2abc:	0f c0       	rjmp	.+30     	; 0x2adc <main+0x338>
    2abe:	89 e1       	ldi	r24, 0x19	; 25
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	9c af       	std	Y+60, r25	; 0x3c
    2ac4:	8b af       	std	Y+59, r24	; 0x3b
    2ac6:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ac8:	9c ad       	ldd	r25, Y+60	; 0x3c
    2aca:	01 97       	sbiw	r24, 0x01	; 1
    2acc:	f1 f7       	brne	.-4      	; 0x2aca <main+0x326>
    2ace:	9c af       	std	Y+60, r25	; 0x3c
    2ad0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ad4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	9e af       	std	Y+62, r25	; 0x3e
    2ada:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2adc:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ade:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ae0:	00 97       	sbiw	r24, 0x00	; 0
    2ae2:	69 f7       	brne	.-38     	; 0x2abe <main+0x31a>
    2ae4:	16 c0       	rjmp	.+44     	; 0x2b12 <main+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	ff 96       	adiw	r30, 0x3f	; 63
    2aea:	60 81       	ld	r22, Z
    2aec:	71 81       	ldd	r23, Z+1	; 0x01
    2aee:	82 81       	ldd	r24, Z+2	; 0x02
    2af0:	93 81       	ldd	r25, Z+3	; 0x03
    2af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	9e af       	std	Y+62, r25	; 0x3e
    2afc:	8d af       	std	Y+61, r24	; 0x3d
    2afe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b00:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b02:	9a af       	std	Y+58, r25	; 0x3a
    2b04:	89 af       	std	Y+57, r24	; 0x39
    2b06:	89 ad       	ldd	r24, Y+57	; 0x39
    2b08:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	f1 f7       	brne	.-4      	; 0x2b0a <main+0x366>
    2b0e:	9a af       	std	Y+58, r25	; 0x3a
    2b10:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(1000);

				LCD_clearScreen();
    2b12:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
				Pass1_Check_Display(); // TAKE PASS1 IN GLOBAL ARRAY
    2b16:	0e 94 a3 05 	call	0xb46	; 0xb46 <Pass1_Check_Display>
				LCD_clearScreen();
    2b1a:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
				Pass2_Check_Display(); // TAKE PASS2 IN GLOBAL ARRAY
    2b1e:	0e 94 b0 07 	call	0xf60	; 0xf60 <Pass2_Check_Display>
				LCD_clearScreen();
    2b22:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>

				//SEND TO EPROM TO RETURN FAILED TO SAVE OR SUCCES IF SAME PASS
				//IF SAME BREAK WHILE
				status = Check_created_password(Pass1_Arry, Pass2_Arry);
    2b26:	88 e8       	ldi	r24, 0x88	; 136
    2b28:	91 e0       	ldi	r25, 0x01	; 1
    2b2a:	2d e8       	ldi	r18, 0x8D	; 141
    2b2c:	31 e0       	ldi	r19, 0x01	; 1
    2b2e:	b9 01       	movw	r22, r18
    2b30:	0e 94 c0 09 	call	0x1380	; 0x1380 <Check_created_password>
    2b34:	fe 01       	movw	r30, r28
    2b36:	ea 5a       	subi	r30, 0xAA	; 170
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	80 83       	st	Z, r24

	//CHECK IS TWO PASS ARE SAME,IF NOT SUCK THERE
	status = Check_created_password(Pass1_Arry, Pass2_Arry);


			while (status == failed_to_save) //KEEP LOOPING UNTILL YOU ENTER SAME SAME
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	ea 5a       	subi	r30, 0xAA	; 170
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	80 81       	ld	r24, Z
    2b44:	88 23       	and	r24, r24
    2b46:	09 f4       	brne	.+2      	; 0x2b4a <main+0x3a6>
    2b48:	57 cf       	rjmp	.-338    	; 0x29f8 <main+0x254>
				//SEND TO EPROM TO RETURN FAILED TO SAVE OR SUCCES IF SAME PASS
				//IF SAME BREAK WHILE
				status = Check_created_password(Pass1_Arry, Pass2_Arry);
			}

			if (status == succeeded_to_save) // MC2- EPROM RETURNS THAT THE ARE SAME
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	ea 5a       	subi	r30, 0xAA	; 170
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	80 81       	ld	r24, Z
    2b52:	81 30       	cpi	r24, 0x01	; 1
    2b54:	09 f0       	breq	.+2      	; 0x2b58 <main+0x3b4>
    2b56:	7a c0       	rjmp	.+244    	; 0x2c4c <main+0x4a8>
			{
				LCD_moveCursor(1,0);
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	60 e0       	ldi	r22, 0x00	; 0
    2b5c:	0e 94 88 26 	call	0x4d10	; 0x4d10 <LCD_moveCursor>
				LCD_displayString("Matched");
    2b60:	84 e5       	ldi	r24, 0x54	; 84
    2b62:	91 e0       	ldi	r25, 0x01	; 1
    2b64:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <LCD_displayString>
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	aa ef       	ldi	r26, 0xFA	; 250
    2b6e:	b4 e4       	ldi	r27, 0x44	; 68
    2b70:	8d ab       	std	Y+53, r24	; 0x35
    2b72:	9e ab       	std	Y+54, r25	; 0x36
    2b74:	af ab       	std	Y+55, r26	; 0x37
    2b76:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b78:	6d a9       	ldd	r22, Y+53	; 0x35
    2b7a:	7e a9       	ldd	r23, Y+54	; 0x36
    2b7c:	8f a9       	ldd	r24, Y+55	; 0x37
    2b7e:	98 ad       	ldd	r25, Y+56	; 0x38
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	4a e7       	ldi	r20, 0x7A	; 122
    2b86:	53 e4       	ldi	r21, 0x43	; 67
    2b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	89 ab       	std	Y+49, r24	; 0x31
    2b92:	9a ab       	std	Y+50, r25	; 0x32
    2b94:	ab ab       	std	Y+51, r26	; 0x33
    2b96:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b98:	69 a9       	ldd	r22, Y+49	; 0x31
    2b9a:	7a a9       	ldd	r23, Y+50	; 0x32
    2b9c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b9e:	9c a9       	ldd	r25, Y+52	; 0x34
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	40 e8       	ldi	r20, 0x80	; 128
    2ba6:	5f e3       	ldi	r21, 0x3F	; 63
    2ba8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bac:	88 23       	and	r24, r24
    2bae:	2c f4       	brge	.+10     	; 0x2bba <main+0x416>
		__ticks = 1;
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	98 ab       	std	Y+48, r25	; 0x30
    2bb6:	8f a7       	std	Y+47, r24	; 0x2f
    2bb8:	3f c0       	rjmp	.+126    	; 0x2c38 <main+0x494>
	else if (__tmp > 65535)
    2bba:	69 a9       	ldd	r22, Y+49	; 0x31
    2bbc:	7a a9       	ldd	r23, Y+50	; 0x32
    2bbe:	8b a9       	ldd	r24, Y+51	; 0x33
    2bc0:	9c a9       	ldd	r25, Y+52	; 0x34
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	3f ef       	ldi	r19, 0xFF	; 255
    2bc6:	4f e7       	ldi	r20, 0x7F	; 127
    2bc8:	57 e4       	ldi	r21, 0x47	; 71
    2bca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bce:	18 16       	cp	r1, r24
    2bd0:	4c f5       	brge	.+82     	; 0x2c24 <main+0x480>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd2:	6d a9       	ldd	r22, Y+53	; 0x35
    2bd4:	7e a9       	ldd	r23, Y+54	; 0x36
    2bd6:	8f a9       	ldd	r24, Y+55	; 0x37
    2bd8:	98 ad       	ldd	r25, Y+56	; 0x38
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	40 e2       	ldi	r20, 0x20	; 32
    2be0:	51 e4       	ldi	r21, 0x41	; 65
    2be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	bc 01       	movw	r22, r24
    2bec:	cd 01       	movw	r24, r26
    2bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	98 ab       	std	Y+48, r25	; 0x30
    2bf8:	8f a7       	std	Y+47, r24	; 0x2f
    2bfa:	0f c0       	rjmp	.+30     	; 0x2c1a <main+0x476>
    2bfc:	89 e1       	ldi	r24, 0x19	; 25
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	9e a7       	std	Y+46, r25	; 0x2e
    2c02:	8d a7       	std	Y+45, r24	; 0x2d
    2c04:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c06:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	f1 f7       	brne	.-4      	; 0x2c08 <main+0x464>
    2c0c:	9e a7       	std	Y+46, r25	; 0x2e
    2c0e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c10:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c12:	98 a9       	ldd	r25, Y+48	; 0x30
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	98 ab       	std	Y+48, r25	; 0x30
    2c18:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c1c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c1e:	00 97       	sbiw	r24, 0x00	; 0
    2c20:	69 f7       	brne	.-38     	; 0x2bfc <main+0x458>
    2c22:	14 c0       	rjmp	.+40     	; 0x2c4c <main+0x4a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c24:	69 a9       	ldd	r22, Y+49	; 0x31
    2c26:	7a a9       	ldd	r23, Y+50	; 0x32
    2c28:	8b a9       	ldd	r24, Y+51	; 0x33
    2c2a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	98 ab       	std	Y+48, r25	; 0x30
    2c36:	8f a7       	std	Y+47, r24	; 0x2f
    2c38:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c3a:	98 a9       	ldd	r25, Y+48	; 0x30
    2c3c:	9c a7       	std	Y+44, r25	; 0x2c
    2c3e:	8b a7       	std	Y+43, r24	; 0x2b
    2c40:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c42:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	f1 f7       	brne	.-4      	; 0x2c44 <main+0x4a0>
    2c48:	9c a7       	std	Y+44, r25	; 0x2c
    2c4a:	8b a7       	std	Y+43, r24	; 0x2b
	while(1)
	{

		uint8 choice;

		choice = Main_options(); 	// MAIN MENU  ALWAYS READY & RETURNS + OR -
    2c4c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <Main_options>
    2c50:	fe 01       	movw	r30, r28
    2c52:	eb 5a       	subi	r30, 0xAB	; 171
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	80 83       	st	Z, r24

		switch (choice)
    2c58:	fe 01       	movw	r30, r28
    2c5a:	eb 5a       	subi	r30, 0xAB	; 171
    2c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5e:	80 81       	ld	r24, Z
    2c60:	28 2f       	mov	r18, r24
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	a0 96       	adiw	r28, 0x20	; 32
    2c66:	3f af       	std	Y+63, r19	; 0x3f
    2c68:	2e af       	std	Y+62, r18	; 0x3e
    2c6a:	a0 97       	sbiw	r28, 0x20	; 32
    2c6c:	a0 96       	adiw	r28, 0x20	; 32
    2c6e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c70:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c72:	a0 97       	sbiw	r28, 0x20	; 32
    2c74:	8b 32       	cpi	r24, 0x2B	; 43
    2c76:	91 05       	cpc	r25, r1
    2c78:	49 f0       	breq	.+18     	; 0x2c8c <main+0x4e8>
    2c7a:	a0 96       	adiw	r28, 0x20	; 32
    2c7c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2c7e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2c80:	a0 97       	sbiw	r28, 0x20	; 32
    2c82:	ed 32       	cpi	r30, 0x2D	; 45
    2c84:	f1 05       	cpc	r31, r1
    2c86:	09 f4       	brne	.+2      	; 0x2c8a <main+0x4e6>
    2c88:	f2 c0       	rjmp	.+484    	; 0x2e6e <main+0x6ca>
    2c8a:	e0 cf       	rjmp	.-64     	; 0x2c4c <main+0x4a8>
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	aa e7       	ldi	r26, 0x7A	; 122
    2c92:	b4 e4       	ldi	r27, 0x44	; 68
    2c94:	8f a3       	std	Y+39, r24	; 0x27
    2c96:	98 a7       	std	Y+40, r25	; 0x28
    2c98:	a9 a7       	std	Y+41, r26	; 0x29
    2c9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c9c:	6f a1       	ldd	r22, Y+39	; 0x27
    2c9e:	78 a5       	ldd	r23, Y+40	; 0x28
    2ca0:	89 a5       	ldd	r24, Y+41	; 0x29
    2ca2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	4a e7       	ldi	r20, 0x7A	; 122
    2caa:	53 e4       	ldi	r21, 0x43	; 67
    2cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	8b a3       	std	Y+35, r24	; 0x23
    2cb6:	9c a3       	std	Y+36, r25	; 0x24
    2cb8:	ad a3       	std	Y+37, r26	; 0x25
    2cba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cbc:	6b a1       	ldd	r22, Y+35	; 0x23
    2cbe:	7c a1       	ldd	r23, Y+36	; 0x24
    2cc0:	8d a1       	ldd	r24, Y+37	; 0x25
    2cc2:	9e a1       	ldd	r25, Y+38	; 0x26
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	40 e8       	ldi	r20, 0x80	; 128
    2cca:	5f e3       	ldi	r21, 0x3F	; 63
    2ccc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cd0:	88 23       	and	r24, r24
    2cd2:	2c f4       	brge	.+10     	; 0x2cde <main+0x53a>
		__ticks = 1;
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	9a a3       	std	Y+34, r25	; 0x22
    2cda:	89 a3       	std	Y+33, r24	; 0x21
    2cdc:	3f c0       	rjmp	.+126    	; 0x2d5c <main+0x5b8>
	else if (__tmp > 65535)
    2cde:	6b a1       	ldd	r22, Y+35	; 0x23
    2ce0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ce2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ce4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	3f ef       	ldi	r19, 0xFF	; 255
    2cea:	4f e7       	ldi	r20, 0x7F	; 127
    2cec:	57 e4       	ldi	r21, 0x47	; 71
    2cee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cf2:	18 16       	cp	r1, r24
    2cf4:	4c f5       	brge	.+82     	; 0x2d48 <main+0x5a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf6:	6f a1       	ldd	r22, Y+39	; 0x27
    2cf8:	78 a5       	ldd	r23, Y+40	; 0x28
    2cfa:	89 a5       	ldd	r24, Y+41	; 0x29
    2cfc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	40 e2       	ldi	r20, 0x20	; 32
    2d04:	51 e4       	ldi	r21, 0x41	; 65
    2d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0a:	dc 01       	movw	r26, r24
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	bc 01       	movw	r22, r24
    2d10:	cd 01       	movw	r24, r26
    2d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	9a a3       	std	Y+34, r25	; 0x22
    2d1c:	89 a3       	std	Y+33, r24	; 0x21
    2d1e:	0f c0       	rjmp	.+30     	; 0x2d3e <main+0x59a>
    2d20:	89 e1       	ldi	r24, 0x19	; 25
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	98 a3       	std	Y+32, r25	; 0x20
    2d26:	8f 8f       	std	Y+31, r24	; 0x1f
    2d28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d2a:	98 a1       	ldd	r25, Y+32	; 0x20
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
    2d2e:	f1 f7       	brne	.-4      	; 0x2d2c <main+0x588>
    2d30:	98 a3       	std	Y+32, r25	; 0x20
    2d32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d34:	89 a1       	ldd	r24, Y+33	; 0x21
    2d36:	9a a1       	ldd	r25, Y+34	; 0x22
    2d38:	01 97       	sbiw	r24, 0x01	; 1
    2d3a:	9a a3       	std	Y+34, r25	; 0x22
    2d3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d3e:	89 a1       	ldd	r24, Y+33	; 0x21
    2d40:	9a a1       	ldd	r25, Y+34	; 0x22
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	69 f7       	brne	.-38     	; 0x2d20 <main+0x57c>
    2d46:	14 c0       	rjmp	.+40     	; 0x2d70 <main+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d48:	6b a1       	ldd	r22, Y+35	; 0x23
    2d4a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d4c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d4e:	9e a1       	ldd	r25, Y+38	; 0x26
    2d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	9a a3       	std	Y+34, r25	; 0x22
    2d5a:	89 a3       	std	Y+33, r24	; 0x21
    2d5c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d5e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d60:	9e 8f       	std	Y+30, r25	; 0x1e
    2d62:	8d 8f       	std	Y+29, r24	; 0x1d
    2d64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d68:	01 97       	sbiw	r24, 0x01	; 1
    2d6a:	f1 f7       	brne	.-4      	; 0x2d68 <main+0x5c4>
    2d6c:	9e 8f       	std	Y+30, r25	; 0x1e
    2d6e:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			case '+':
				_delay_ms(1000);
				LCD_clearScreen();
    2d70:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
				LCD_displayString("Enterd +");
    2d74:	8c e5       	ldi	r24, 0x5C	; 92
    2d76:	91 e0       	ldi	r25, 0x01	; 1
    2d78:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <LCD_displayString>
    2d7c:	80 e0       	ldi	r24, 0x00	; 0
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	aa ef       	ldi	r26, 0xFA	; 250
    2d82:	b3 e4       	ldi	r27, 0x43	; 67
    2d84:	89 8f       	std	Y+25, r24	; 0x19
    2d86:	9a 8f       	std	Y+26, r25	; 0x1a
    2d88:	ab 8f       	std	Y+27, r26	; 0x1b
    2d8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d8c:	69 8d       	ldd	r22, Y+25	; 0x19
    2d8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	4a e7       	ldi	r20, 0x7A	; 122
    2d9a:	53 e4       	ldi	r21, 0x43	; 67
    2d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	8d 8b       	std	Y+21, r24	; 0x15
    2da6:	9e 8b       	std	Y+22, r25	; 0x16
    2da8:	af 8b       	std	Y+23, r26	; 0x17
    2daa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dac:	6d 89       	ldd	r22, Y+21	; 0x15
    2dae:	7e 89       	ldd	r23, Y+22	; 0x16
    2db0:	8f 89       	ldd	r24, Y+23	; 0x17
    2db2:	98 8d       	ldd	r25, Y+24	; 0x18
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	40 e8       	ldi	r20, 0x80	; 128
    2dba:	5f e3       	ldi	r21, 0x3F	; 63
    2dbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dc0:	88 23       	and	r24, r24
    2dc2:	2c f4       	brge	.+10     	; 0x2dce <main+0x62a>
		__ticks = 1;
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	9c 8b       	std	Y+20, r25	; 0x14
    2dca:	8b 8b       	std	Y+19, r24	; 0x13
    2dcc:	3f c0       	rjmp	.+126    	; 0x2e4c <main+0x6a8>
	else if (__tmp > 65535)
    2dce:	6d 89       	ldd	r22, Y+21	; 0x15
    2dd0:	7e 89       	ldd	r23, Y+22	; 0x16
    2dd2:	8f 89       	ldd	r24, Y+23	; 0x17
    2dd4:	98 8d       	ldd	r25, Y+24	; 0x18
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	3f ef       	ldi	r19, 0xFF	; 255
    2dda:	4f e7       	ldi	r20, 0x7F	; 127
    2ddc:	57 e4       	ldi	r21, 0x47	; 71
    2dde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2de2:	18 16       	cp	r1, r24
    2de4:	4c f5       	brge	.+82     	; 0x2e38 <main+0x694>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de6:	69 8d       	ldd	r22, Y+25	; 0x19
    2de8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	40 e2       	ldi	r20, 0x20	; 32
    2df4:	51 e4       	ldi	r21, 0x41	; 65
    2df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	bc 01       	movw	r22, r24
    2e00:	cd 01       	movw	r24, r26
    2e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	9c 8b       	std	Y+20, r25	; 0x14
    2e0c:	8b 8b       	std	Y+19, r24	; 0x13
    2e0e:	0f c0       	rjmp	.+30     	; 0x2e2e <main+0x68a>
    2e10:	89 e1       	ldi	r24, 0x19	; 25
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	9a 8b       	std	Y+18, r25	; 0x12
    2e16:	89 8b       	std	Y+17, r24	; 0x11
    2e18:	89 89       	ldd	r24, Y+17	; 0x11
    2e1a:	9a 89       	ldd	r25, Y+18	; 0x12
    2e1c:	01 97       	sbiw	r24, 0x01	; 1
    2e1e:	f1 f7       	brne	.-4      	; 0x2e1c <main+0x678>
    2e20:	9a 8b       	std	Y+18, r25	; 0x12
    2e22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e24:	8b 89       	ldd	r24, Y+19	; 0x13
    2e26:	9c 89       	ldd	r25, Y+20	; 0x14
    2e28:	01 97       	sbiw	r24, 0x01	; 1
    2e2a:	9c 8b       	std	Y+20, r25	; 0x14
    2e2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e30:	9c 89       	ldd	r25, Y+20	; 0x14
    2e32:	00 97       	sbiw	r24, 0x00	; 0
    2e34:	69 f7       	brne	.-38     	; 0x2e10 <main+0x66c>
    2e36:	14 c0       	rjmp	.+40     	; 0x2e60 <main+0x6bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e38:	6d 89       	ldd	r22, Y+21	; 0x15
    2e3a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e3c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e3e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	9c 8b       	std	Y+20, r25	; 0x14
    2e4a:	8b 8b       	std	Y+19, r24	; 0x13
    2e4c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e4e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e50:	98 8b       	std	Y+16, r25	; 0x10
    2e52:	8f 87       	std	Y+15, r24	; 0x0f
    2e54:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e56:	98 89       	ldd	r25, Y+16	; 0x10
    2e58:	01 97       	sbiw	r24, 0x01	; 1
    2e5a:	f1 f7       	brne	.-4      	; 0x2e58 <main+0x6b4>
    2e5c:	98 8b       	std	Y+16, r25	; 0x10
    2e5e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				LCD_clearScreen();
    2e60:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
				Open_door(Pass1_Arry); //FUCNTION FOR OPEN DOORS
    2e64:	88 e8       	ldi	r24, 0x88	; 136
    2e66:	91 e0       	ldi	r25, 0x01	; 1
    2e68:	0e 94 12 0c 	call	0x1824	; 0x1824 <Open_door>
    2e6c:	ef ce       	rjmp	.-546    	; 0x2c4c <main+0x4a8>
			break;

			case '-':
				LCD_clearScreen();
    2e6e:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
				LCD_displayString("Enterd -");
    2e72:	85 e6       	ldi	r24, 0x65	; 101
    2e74:	91 e0       	ldi	r25, 0x01	; 1
    2e76:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <LCD_displayString>
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	aa ef       	ldi	r26, 0xFA	; 250
    2e80:	b3 e4       	ldi	r27, 0x43	; 67
    2e82:	8b 87       	std	Y+11, r24	; 0x0b
    2e84:	9c 87       	std	Y+12, r25	; 0x0c
    2e86:	ad 87       	std	Y+13, r26	; 0x0d
    2e88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	4a e7       	ldi	r20, 0x7A	; 122
    2e98:	53 e4       	ldi	r21, 0x43	; 67
    2e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	8f 83       	std	Y+7, r24	; 0x07
    2ea4:	98 87       	std	Y+8, r25	; 0x08
    2ea6:	a9 87       	std	Y+9, r26	; 0x09
    2ea8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    2eac:	78 85       	ldd	r23, Y+8	; 0x08
    2eae:	89 85       	ldd	r24, Y+9	; 0x09
    2eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	40 e8       	ldi	r20, 0x80	; 128
    2eb8:	5f e3       	ldi	r21, 0x3F	; 63
    2eba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ebe:	88 23       	and	r24, r24
    2ec0:	2c f4       	brge	.+10     	; 0x2ecc <main+0x728>
		__ticks = 1;
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	9e 83       	std	Y+6, r25	; 0x06
    2ec8:	8d 83       	std	Y+5, r24	; 0x05
    2eca:	3f c0       	rjmp	.+126    	; 0x2f4a <main+0x7a6>
	else if (__tmp > 65535)
    2ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ece:	78 85       	ldd	r23, Y+8	; 0x08
    2ed0:	89 85       	ldd	r24, Y+9	; 0x09
    2ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	3f ef       	ldi	r19, 0xFF	; 255
    2ed8:	4f e7       	ldi	r20, 0x7F	; 127
    2eda:	57 e4       	ldi	r21, 0x47	; 71
    2edc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ee0:	18 16       	cp	r1, r24
    2ee2:	4c f5       	brge	.+82     	; 0x2f36 <main+0x792>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	40 e2       	ldi	r20, 0x20	; 32
    2ef2:	51 e4       	ldi	r21, 0x41	; 65
    2ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	bc 01       	movw	r22, r24
    2efe:	cd 01       	movw	r24, r26
    2f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	9e 83       	std	Y+6, r25	; 0x06
    2f0a:	8d 83       	std	Y+5, r24	; 0x05
    2f0c:	0f c0       	rjmp	.+30     	; 0x2f2c <main+0x788>
    2f0e:	89 e1       	ldi	r24, 0x19	; 25
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	9c 83       	std	Y+4, r25	; 0x04
    2f14:	8b 83       	std	Y+3, r24	; 0x03
    2f16:	8b 81       	ldd	r24, Y+3	; 0x03
    2f18:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1a:	01 97       	sbiw	r24, 0x01	; 1
    2f1c:	f1 f7       	brne	.-4      	; 0x2f1a <main+0x776>
    2f1e:	9c 83       	std	Y+4, r25	; 0x04
    2f20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f22:	8d 81       	ldd	r24, Y+5	; 0x05
    2f24:	9e 81       	ldd	r25, Y+6	; 0x06
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	9e 83       	std	Y+6, r25	; 0x06
    2f2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f30:	00 97       	sbiw	r24, 0x00	; 0
    2f32:	69 f7       	brne	.-38     	; 0x2f0e <main+0x76a>
    2f34:	14 c0       	rjmp	.+40     	; 0x2f5e <main+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f36:	6f 81       	ldd	r22, Y+7	; 0x07
    2f38:	78 85       	ldd	r23, Y+8	; 0x08
    2f3a:	89 85       	ldd	r24, Y+9	; 0x09
    2f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	9e 83       	std	Y+6, r25	; 0x06
    2f48:	8d 83       	std	Y+5, r24	; 0x05
    2f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4e:	9a 83       	std	Y+2, r25	; 0x02
    2f50:	89 83       	std	Y+1, r24	; 0x01
    2f52:	89 81       	ldd	r24, Y+1	; 0x01
    2f54:	9a 81       	ldd	r25, Y+2	; 0x02
    2f56:	01 97       	sbiw	r24, 0x01	; 1
    2f58:	f1 f7       	brne	.-4      	; 0x2f56 <main+0x7b2>
    2f5a:	9a 83       	std	Y+2, r25	; 0x02
    2f5c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				LCD_clearScreen();
    2f5e:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <LCD_clearScreen>
			Change_password(Pass1_Arry); //FUNCTION TO TAKE TWO PASS AND SAVE NEW ONE
    2f62:	88 e8       	ldi	r24, 0x88	; 136
    2f64:	91 e0       	ldi	r25, 0x01	; 1
    2f66:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <Change_password>
    2f6a:	70 ce       	rjmp	.-800    	; 0x2c4c <main+0x4a8>

00002f6c <Timer_1_delay>:

/*
 * : Delay the code execution for a specific time interval
 */
void Timer_1_delay(uint32 delay)
{
    2f6c:	df 93       	push	r29
    2f6e:	cf 93       	push	r28
    2f70:	00 d0       	rcall	.+0      	; 0x2f72 <Timer_1_delay+0x6>
    2f72:	00 d0       	rcall	.+0      	; 0x2f74 <Timer_1_delay+0x8>
    2f74:	cd b7       	in	r28, 0x3d	; 61
    2f76:	de b7       	in	r29, 0x3e	; 62
    2f78:	69 83       	std	Y+1, r22	; 0x01
    2f7a:	7a 83       	std	Y+2, r23	; 0x02
    2f7c:	8b 83       	std	Y+3, r24	; 0x03
    2f7e:	9c 83       	std	Y+4, r25	; 0x04

	//Initialize timer1 with the configuration structure
	Timer_1_init(&Timer1_ConfigStruct);
    2f80:	86 e7       	ldi	r24, 0x76	; 118
    2f82:	91 e0       	ldi	r25, 0x01	; 1
    2f84:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <Timer_1_init>

	//Set the callback function for timer1
	Timer_1_setCallBack(&Timer_1_CallBack);
    2f88:	82 ee       	ldi	r24, 0xE2	; 226
    2f8a:	97 e1       	ldi	r25, 0x17	; 23
    2f8c:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <Timer_1_setCallBack>

	//Stay in the loop as long as the required number of delay seconds hasn't elapsed
	while(seconds != delay);
    2f90:	80 91 85 01 	lds	r24, 0x0185
    2f94:	28 2f       	mov	r18, r24
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	40 e0       	ldi	r20, 0x00	; 0
    2f9a:	50 e0       	ldi	r21, 0x00	; 0
    2f9c:	89 81       	ldd	r24, Y+1	; 0x01
    2f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa0:	ab 81       	ldd	r26, Y+3	; 0x03
    2fa2:	bc 81       	ldd	r27, Y+4	; 0x04
    2fa4:	28 17       	cp	r18, r24
    2fa6:	39 07       	cpc	r19, r25
    2fa8:	4a 07       	cpc	r20, r26
    2faa:	5b 07       	cpc	r21, r27
    2fac:	89 f7       	brne	.-30     	; 0x2f90 <Timer_1_delay+0x24>

	//Deinitialize timer1
	Timer_1_deInit();
    2fae:	0e 94 df 27 	call	0x4fbe	; 0x4fbe <Timer_1_deInit>

	//Reset the seconds variable
	seconds = 0;
    2fb2:	10 92 85 01 	sts	0x0185, r1
}
    2fb6:	0f 90       	pop	r0
    2fb8:	0f 90       	pop	r0
    2fba:	0f 90       	pop	r0
    2fbc:	0f 90       	pop	r0
    2fbe:	cf 91       	pop	r28
    2fc0:	df 91       	pop	r29
    2fc2:	08 95       	ret

00002fc4 <Timer_1_CallBack>:

/*
 * Description: increment the seconds variable each time the function is called
 */
void Timer_1_CallBack(void)
{
    2fc4:	df 93       	push	r29
    2fc6:	cf 93       	push	r28
    2fc8:	cd b7       	in	r28, 0x3d	; 61
    2fca:	de b7       	in	r29, 0x3e	; 62
	seconds++;
    2fcc:	80 91 85 01 	lds	r24, 0x0185
    2fd0:	8f 5f       	subi	r24, 0xFF	; 255
    2fd2:	80 93 85 01 	sts	0x0185, r24
}
    2fd6:	cf 91       	pop	r28
    2fd8:	df 91       	pop	r29
    2fda:	08 95       	ret

00002fdc <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2fdc:	df 93       	push	r29
    2fde:	cf 93       	push	r28
    2fe0:	00 d0       	rcall	.+0      	; 0x2fe2 <GPIO_setupPinDirection+0x6>
    2fe2:	00 d0       	rcall	.+0      	; 0x2fe4 <GPIO_setupPinDirection+0x8>
    2fe4:	0f 92       	push	r0
    2fe6:	cd b7       	in	r28, 0x3d	; 61
    2fe8:	de b7       	in	r29, 0x3e	; 62
    2fea:	89 83       	std	Y+1, r24	; 0x01
    2fec:	6a 83       	std	Y+2, r22	; 0x02
    2fee:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff2:	88 30       	cpi	r24, 0x08	; 8
    2ff4:	08 f0       	brcs	.+2      	; 0x2ff8 <GPIO_setupPinDirection+0x1c>
    2ff6:	d5 c0       	rjmp	.+426    	; 0x31a2 <GPIO_setupPinDirection+0x1c6>
    2ff8:	89 81       	ldd	r24, Y+1	; 0x01
    2ffa:	84 30       	cpi	r24, 0x04	; 4
    2ffc:	08 f0       	brcs	.+2      	; 0x3000 <GPIO_setupPinDirection+0x24>
    2ffe:	d1 c0       	rjmp	.+418    	; 0x31a2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    3000:	89 81       	ldd	r24, Y+1	; 0x01
    3002:	28 2f       	mov	r18, r24
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	3d 83       	std	Y+5, r19	; 0x05
    3008:	2c 83       	std	Y+4, r18	; 0x04
    300a:	8c 81       	ldd	r24, Y+4	; 0x04
    300c:	9d 81       	ldd	r25, Y+5	; 0x05
    300e:	81 30       	cpi	r24, 0x01	; 1
    3010:	91 05       	cpc	r25, r1
    3012:	09 f4       	brne	.+2      	; 0x3016 <GPIO_setupPinDirection+0x3a>
    3014:	43 c0       	rjmp	.+134    	; 0x309c <GPIO_setupPinDirection+0xc0>
    3016:	2c 81       	ldd	r18, Y+4	; 0x04
    3018:	3d 81       	ldd	r19, Y+5	; 0x05
    301a:	22 30       	cpi	r18, 0x02	; 2
    301c:	31 05       	cpc	r19, r1
    301e:	2c f4       	brge	.+10     	; 0x302a <GPIO_setupPinDirection+0x4e>
    3020:	8c 81       	ldd	r24, Y+4	; 0x04
    3022:	9d 81       	ldd	r25, Y+5	; 0x05
    3024:	00 97       	sbiw	r24, 0x00	; 0
    3026:	71 f0       	breq	.+28     	; 0x3044 <GPIO_setupPinDirection+0x68>
    3028:	bc c0       	rjmp	.+376    	; 0x31a2 <GPIO_setupPinDirection+0x1c6>
    302a:	2c 81       	ldd	r18, Y+4	; 0x04
    302c:	3d 81       	ldd	r19, Y+5	; 0x05
    302e:	22 30       	cpi	r18, 0x02	; 2
    3030:	31 05       	cpc	r19, r1
    3032:	09 f4       	brne	.+2      	; 0x3036 <GPIO_setupPinDirection+0x5a>
    3034:	5f c0       	rjmp	.+190    	; 0x30f4 <GPIO_setupPinDirection+0x118>
    3036:	8c 81       	ldd	r24, Y+4	; 0x04
    3038:	9d 81       	ldd	r25, Y+5	; 0x05
    303a:	83 30       	cpi	r24, 0x03	; 3
    303c:	91 05       	cpc	r25, r1
    303e:	09 f4       	brne	.+2      	; 0x3042 <GPIO_setupPinDirection+0x66>
    3040:	85 c0       	rjmp	.+266    	; 0x314c <GPIO_setupPinDirection+0x170>
    3042:	af c0       	rjmp	.+350    	; 0x31a2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    3044:	8b 81       	ldd	r24, Y+3	; 0x03
    3046:	81 30       	cpi	r24, 0x01	; 1
    3048:	a1 f4       	brne	.+40     	; 0x3072 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    304a:	aa e3       	ldi	r26, 0x3A	; 58
    304c:	b0 e0       	ldi	r27, 0x00	; 0
    304e:	ea e3       	ldi	r30, 0x3A	; 58
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	80 81       	ld	r24, Z
    3054:	48 2f       	mov	r20, r24
    3056:	8a 81       	ldd	r24, Y+2	; 0x02
    3058:	28 2f       	mov	r18, r24
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	02 2e       	mov	r0, r18
    3062:	02 c0       	rjmp	.+4      	; 0x3068 <GPIO_setupPinDirection+0x8c>
    3064:	88 0f       	add	r24, r24
    3066:	99 1f       	adc	r25, r25
    3068:	0a 94       	dec	r0
    306a:	e2 f7       	brpl	.-8      	; 0x3064 <GPIO_setupPinDirection+0x88>
    306c:	84 2b       	or	r24, r20
    306e:	8c 93       	st	X, r24
    3070:	98 c0       	rjmp	.+304    	; 0x31a2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    3072:	aa e3       	ldi	r26, 0x3A	; 58
    3074:	b0 e0       	ldi	r27, 0x00	; 0
    3076:	ea e3       	ldi	r30, 0x3A	; 58
    3078:	f0 e0       	ldi	r31, 0x00	; 0
    307a:	80 81       	ld	r24, Z
    307c:	48 2f       	mov	r20, r24
    307e:	8a 81       	ldd	r24, Y+2	; 0x02
    3080:	28 2f       	mov	r18, r24
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	02 2e       	mov	r0, r18
    308a:	02 c0       	rjmp	.+4      	; 0x3090 <GPIO_setupPinDirection+0xb4>
    308c:	88 0f       	add	r24, r24
    308e:	99 1f       	adc	r25, r25
    3090:	0a 94       	dec	r0
    3092:	e2 f7       	brpl	.-8      	; 0x308c <GPIO_setupPinDirection+0xb0>
    3094:	80 95       	com	r24
    3096:	84 23       	and	r24, r20
    3098:	8c 93       	st	X, r24
    309a:	83 c0       	rjmp	.+262    	; 0x31a2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    309c:	8b 81       	ldd	r24, Y+3	; 0x03
    309e:	81 30       	cpi	r24, 0x01	; 1
    30a0:	a1 f4       	brne	.+40     	; 0x30ca <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    30a2:	a7 e3       	ldi	r26, 0x37	; 55
    30a4:	b0 e0       	ldi	r27, 0x00	; 0
    30a6:	e7 e3       	ldi	r30, 0x37	; 55
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	80 81       	ld	r24, Z
    30ac:	48 2f       	mov	r20, r24
    30ae:	8a 81       	ldd	r24, Y+2	; 0x02
    30b0:	28 2f       	mov	r18, r24
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	02 2e       	mov	r0, r18
    30ba:	02 c0       	rjmp	.+4      	; 0x30c0 <GPIO_setupPinDirection+0xe4>
    30bc:	88 0f       	add	r24, r24
    30be:	99 1f       	adc	r25, r25
    30c0:	0a 94       	dec	r0
    30c2:	e2 f7       	brpl	.-8      	; 0x30bc <GPIO_setupPinDirection+0xe0>
    30c4:	84 2b       	or	r24, r20
    30c6:	8c 93       	st	X, r24
    30c8:	6c c0       	rjmp	.+216    	; 0x31a2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    30ca:	a7 e3       	ldi	r26, 0x37	; 55
    30cc:	b0 e0       	ldi	r27, 0x00	; 0
    30ce:	e7 e3       	ldi	r30, 0x37	; 55
    30d0:	f0 e0       	ldi	r31, 0x00	; 0
    30d2:	80 81       	ld	r24, Z
    30d4:	48 2f       	mov	r20, r24
    30d6:	8a 81       	ldd	r24, Y+2	; 0x02
    30d8:	28 2f       	mov	r18, r24
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	02 2e       	mov	r0, r18
    30e2:	02 c0       	rjmp	.+4      	; 0x30e8 <GPIO_setupPinDirection+0x10c>
    30e4:	88 0f       	add	r24, r24
    30e6:	99 1f       	adc	r25, r25
    30e8:	0a 94       	dec	r0
    30ea:	e2 f7       	brpl	.-8      	; 0x30e4 <GPIO_setupPinDirection+0x108>
    30ec:	80 95       	com	r24
    30ee:	84 23       	and	r24, r20
    30f0:	8c 93       	st	X, r24
    30f2:	57 c0       	rjmp	.+174    	; 0x31a2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    30f4:	8b 81       	ldd	r24, Y+3	; 0x03
    30f6:	81 30       	cpi	r24, 0x01	; 1
    30f8:	a1 f4       	brne	.+40     	; 0x3122 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    30fa:	a4 e3       	ldi	r26, 0x34	; 52
    30fc:	b0 e0       	ldi	r27, 0x00	; 0
    30fe:	e4 e3       	ldi	r30, 0x34	; 52
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	80 81       	ld	r24, Z
    3104:	48 2f       	mov	r20, r24
    3106:	8a 81       	ldd	r24, Y+2	; 0x02
    3108:	28 2f       	mov	r18, r24
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	02 2e       	mov	r0, r18
    3112:	02 c0       	rjmp	.+4      	; 0x3118 <GPIO_setupPinDirection+0x13c>
    3114:	88 0f       	add	r24, r24
    3116:	99 1f       	adc	r25, r25
    3118:	0a 94       	dec	r0
    311a:	e2 f7       	brpl	.-8      	; 0x3114 <GPIO_setupPinDirection+0x138>
    311c:	84 2b       	or	r24, r20
    311e:	8c 93       	st	X, r24
    3120:	40 c0       	rjmp	.+128    	; 0x31a2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    3122:	a4 e3       	ldi	r26, 0x34	; 52
    3124:	b0 e0       	ldi	r27, 0x00	; 0
    3126:	e4 e3       	ldi	r30, 0x34	; 52
    3128:	f0 e0       	ldi	r31, 0x00	; 0
    312a:	80 81       	ld	r24, Z
    312c:	48 2f       	mov	r20, r24
    312e:	8a 81       	ldd	r24, Y+2	; 0x02
    3130:	28 2f       	mov	r18, r24
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	02 2e       	mov	r0, r18
    313a:	02 c0       	rjmp	.+4      	; 0x3140 <GPIO_setupPinDirection+0x164>
    313c:	88 0f       	add	r24, r24
    313e:	99 1f       	adc	r25, r25
    3140:	0a 94       	dec	r0
    3142:	e2 f7       	brpl	.-8      	; 0x313c <GPIO_setupPinDirection+0x160>
    3144:	80 95       	com	r24
    3146:	84 23       	and	r24, r20
    3148:	8c 93       	st	X, r24
    314a:	2b c0       	rjmp	.+86     	; 0x31a2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    314c:	8b 81       	ldd	r24, Y+3	; 0x03
    314e:	81 30       	cpi	r24, 0x01	; 1
    3150:	a1 f4       	brne	.+40     	; 0x317a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    3152:	a1 e3       	ldi	r26, 0x31	; 49
    3154:	b0 e0       	ldi	r27, 0x00	; 0
    3156:	e1 e3       	ldi	r30, 0x31	; 49
    3158:	f0 e0       	ldi	r31, 0x00	; 0
    315a:	80 81       	ld	r24, Z
    315c:	48 2f       	mov	r20, r24
    315e:	8a 81       	ldd	r24, Y+2	; 0x02
    3160:	28 2f       	mov	r18, r24
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	02 2e       	mov	r0, r18
    316a:	02 c0       	rjmp	.+4      	; 0x3170 <GPIO_setupPinDirection+0x194>
    316c:	88 0f       	add	r24, r24
    316e:	99 1f       	adc	r25, r25
    3170:	0a 94       	dec	r0
    3172:	e2 f7       	brpl	.-8      	; 0x316c <GPIO_setupPinDirection+0x190>
    3174:	84 2b       	or	r24, r20
    3176:	8c 93       	st	X, r24
    3178:	14 c0       	rjmp	.+40     	; 0x31a2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    317a:	a1 e3       	ldi	r26, 0x31	; 49
    317c:	b0 e0       	ldi	r27, 0x00	; 0
    317e:	e1 e3       	ldi	r30, 0x31	; 49
    3180:	f0 e0       	ldi	r31, 0x00	; 0
    3182:	80 81       	ld	r24, Z
    3184:	48 2f       	mov	r20, r24
    3186:	8a 81       	ldd	r24, Y+2	; 0x02
    3188:	28 2f       	mov	r18, r24
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	02 2e       	mov	r0, r18
    3192:	02 c0       	rjmp	.+4      	; 0x3198 <GPIO_setupPinDirection+0x1bc>
    3194:	88 0f       	add	r24, r24
    3196:	99 1f       	adc	r25, r25
    3198:	0a 94       	dec	r0
    319a:	e2 f7       	brpl	.-8      	; 0x3194 <GPIO_setupPinDirection+0x1b8>
    319c:	80 95       	com	r24
    319e:	84 23       	and	r24, r20
    31a0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    31a2:	0f 90       	pop	r0
    31a4:	0f 90       	pop	r0
    31a6:	0f 90       	pop	r0
    31a8:	0f 90       	pop	r0
    31aa:	0f 90       	pop	r0
    31ac:	cf 91       	pop	r28
    31ae:	df 91       	pop	r29
    31b0:	08 95       	ret

000031b2 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    31b2:	df 93       	push	r29
    31b4:	cf 93       	push	r28
    31b6:	00 d0       	rcall	.+0      	; 0x31b8 <GPIO_writePin+0x6>
    31b8:	00 d0       	rcall	.+0      	; 0x31ba <GPIO_writePin+0x8>
    31ba:	0f 92       	push	r0
    31bc:	cd b7       	in	r28, 0x3d	; 61
    31be:	de b7       	in	r29, 0x3e	; 62
    31c0:	89 83       	std	Y+1, r24	; 0x01
    31c2:	6a 83       	std	Y+2, r22	; 0x02
    31c4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    31c6:	8a 81       	ldd	r24, Y+2	; 0x02
    31c8:	88 30       	cpi	r24, 0x08	; 8
    31ca:	08 f0       	brcs	.+2      	; 0x31ce <GPIO_writePin+0x1c>
    31cc:	d5 c0       	rjmp	.+426    	; 0x3378 <GPIO_writePin+0x1c6>
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
    31d0:	84 30       	cpi	r24, 0x04	; 4
    31d2:	08 f0       	brcs	.+2      	; 0x31d6 <GPIO_writePin+0x24>
    31d4:	d1 c0       	rjmp	.+418    	; 0x3378 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	28 2f       	mov	r18, r24
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	3d 83       	std	Y+5, r19	; 0x05
    31de:	2c 83       	std	Y+4, r18	; 0x04
    31e0:	8c 81       	ldd	r24, Y+4	; 0x04
    31e2:	9d 81       	ldd	r25, Y+5	; 0x05
    31e4:	81 30       	cpi	r24, 0x01	; 1
    31e6:	91 05       	cpc	r25, r1
    31e8:	09 f4       	brne	.+2      	; 0x31ec <GPIO_writePin+0x3a>
    31ea:	43 c0       	rjmp	.+134    	; 0x3272 <GPIO_writePin+0xc0>
    31ec:	2c 81       	ldd	r18, Y+4	; 0x04
    31ee:	3d 81       	ldd	r19, Y+5	; 0x05
    31f0:	22 30       	cpi	r18, 0x02	; 2
    31f2:	31 05       	cpc	r19, r1
    31f4:	2c f4       	brge	.+10     	; 0x3200 <GPIO_writePin+0x4e>
    31f6:	8c 81       	ldd	r24, Y+4	; 0x04
    31f8:	9d 81       	ldd	r25, Y+5	; 0x05
    31fa:	00 97       	sbiw	r24, 0x00	; 0
    31fc:	71 f0       	breq	.+28     	; 0x321a <GPIO_writePin+0x68>
    31fe:	bc c0       	rjmp	.+376    	; 0x3378 <GPIO_writePin+0x1c6>
    3200:	2c 81       	ldd	r18, Y+4	; 0x04
    3202:	3d 81       	ldd	r19, Y+5	; 0x05
    3204:	22 30       	cpi	r18, 0x02	; 2
    3206:	31 05       	cpc	r19, r1
    3208:	09 f4       	brne	.+2      	; 0x320c <GPIO_writePin+0x5a>
    320a:	5f c0       	rjmp	.+190    	; 0x32ca <GPIO_writePin+0x118>
    320c:	8c 81       	ldd	r24, Y+4	; 0x04
    320e:	9d 81       	ldd	r25, Y+5	; 0x05
    3210:	83 30       	cpi	r24, 0x03	; 3
    3212:	91 05       	cpc	r25, r1
    3214:	09 f4       	brne	.+2      	; 0x3218 <GPIO_writePin+0x66>
    3216:	85 c0       	rjmp	.+266    	; 0x3322 <GPIO_writePin+0x170>
    3218:	af c0       	rjmp	.+350    	; 0x3378 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    321a:	8b 81       	ldd	r24, Y+3	; 0x03
    321c:	81 30       	cpi	r24, 0x01	; 1
    321e:	a1 f4       	brne	.+40     	; 0x3248 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    3220:	ab e3       	ldi	r26, 0x3B	; 59
    3222:	b0 e0       	ldi	r27, 0x00	; 0
    3224:	eb e3       	ldi	r30, 0x3B	; 59
    3226:	f0 e0       	ldi	r31, 0x00	; 0
    3228:	80 81       	ld	r24, Z
    322a:	48 2f       	mov	r20, r24
    322c:	8a 81       	ldd	r24, Y+2	; 0x02
    322e:	28 2f       	mov	r18, r24
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	02 2e       	mov	r0, r18
    3238:	02 c0       	rjmp	.+4      	; 0x323e <GPIO_writePin+0x8c>
    323a:	88 0f       	add	r24, r24
    323c:	99 1f       	adc	r25, r25
    323e:	0a 94       	dec	r0
    3240:	e2 f7       	brpl	.-8      	; 0x323a <GPIO_writePin+0x88>
    3242:	84 2b       	or	r24, r20
    3244:	8c 93       	st	X, r24
    3246:	98 c0       	rjmp	.+304    	; 0x3378 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    3248:	ab e3       	ldi	r26, 0x3B	; 59
    324a:	b0 e0       	ldi	r27, 0x00	; 0
    324c:	eb e3       	ldi	r30, 0x3B	; 59
    324e:	f0 e0       	ldi	r31, 0x00	; 0
    3250:	80 81       	ld	r24, Z
    3252:	48 2f       	mov	r20, r24
    3254:	8a 81       	ldd	r24, Y+2	; 0x02
    3256:	28 2f       	mov	r18, r24
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	02 2e       	mov	r0, r18
    3260:	02 c0       	rjmp	.+4      	; 0x3266 <GPIO_writePin+0xb4>
    3262:	88 0f       	add	r24, r24
    3264:	99 1f       	adc	r25, r25
    3266:	0a 94       	dec	r0
    3268:	e2 f7       	brpl	.-8      	; 0x3262 <GPIO_writePin+0xb0>
    326a:	80 95       	com	r24
    326c:	84 23       	and	r24, r20
    326e:	8c 93       	st	X, r24
    3270:	83 c0       	rjmp	.+262    	; 0x3378 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    3272:	8b 81       	ldd	r24, Y+3	; 0x03
    3274:	81 30       	cpi	r24, 0x01	; 1
    3276:	a1 f4       	brne	.+40     	; 0x32a0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    3278:	a8 e3       	ldi	r26, 0x38	; 56
    327a:	b0 e0       	ldi	r27, 0x00	; 0
    327c:	e8 e3       	ldi	r30, 0x38	; 56
    327e:	f0 e0       	ldi	r31, 0x00	; 0
    3280:	80 81       	ld	r24, Z
    3282:	48 2f       	mov	r20, r24
    3284:	8a 81       	ldd	r24, Y+2	; 0x02
    3286:	28 2f       	mov	r18, r24
    3288:	30 e0       	ldi	r19, 0x00	; 0
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	02 2e       	mov	r0, r18
    3290:	02 c0       	rjmp	.+4      	; 0x3296 <GPIO_writePin+0xe4>
    3292:	88 0f       	add	r24, r24
    3294:	99 1f       	adc	r25, r25
    3296:	0a 94       	dec	r0
    3298:	e2 f7       	brpl	.-8      	; 0x3292 <GPIO_writePin+0xe0>
    329a:	84 2b       	or	r24, r20
    329c:	8c 93       	st	X, r24
    329e:	6c c0       	rjmp	.+216    	; 0x3378 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    32a0:	a8 e3       	ldi	r26, 0x38	; 56
    32a2:	b0 e0       	ldi	r27, 0x00	; 0
    32a4:	e8 e3       	ldi	r30, 0x38	; 56
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	80 81       	ld	r24, Z
    32aa:	48 2f       	mov	r20, r24
    32ac:	8a 81       	ldd	r24, Y+2	; 0x02
    32ae:	28 2f       	mov	r18, r24
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	81 e0       	ldi	r24, 0x01	; 1
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	02 2e       	mov	r0, r18
    32b8:	02 c0       	rjmp	.+4      	; 0x32be <GPIO_writePin+0x10c>
    32ba:	88 0f       	add	r24, r24
    32bc:	99 1f       	adc	r25, r25
    32be:	0a 94       	dec	r0
    32c0:	e2 f7       	brpl	.-8      	; 0x32ba <GPIO_writePin+0x108>
    32c2:	80 95       	com	r24
    32c4:	84 23       	and	r24, r20
    32c6:	8c 93       	st	X, r24
    32c8:	57 c0       	rjmp	.+174    	; 0x3378 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    32ca:	8b 81       	ldd	r24, Y+3	; 0x03
    32cc:	81 30       	cpi	r24, 0x01	; 1
    32ce:	a1 f4       	brne	.+40     	; 0x32f8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    32d0:	a5 e3       	ldi	r26, 0x35	; 53
    32d2:	b0 e0       	ldi	r27, 0x00	; 0
    32d4:	e5 e3       	ldi	r30, 0x35	; 53
    32d6:	f0 e0       	ldi	r31, 0x00	; 0
    32d8:	80 81       	ld	r24, Z
    32da:	48 2f       	mov	r20, r24
    32dc:	8a 81       	ldd	r24, Y+2	; 0x02
    32de:	28 2f       	mov	r18, r24
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	02 2e       	mov	r0, r18
    32e8:	02 c0       	rjmp	.+4      	; 0x32ee <GPIO_writePin+0x13c>
    32ea:	88 0f       	add	r24, r24
    32ec:	99 1f       	adc	r25, r25
    32ee:	0a 94       	dec	r0
    32f0:	e2 f7       	brpl	.-8      	; 0x32ea <GPIO_writePin+0x138>
    32f2:	84 2b       	or	r24, r20
    32f4:	8c 93       	st	X, r24
    32f6:	40 c0       	rjmp	.+128    	; 0x3378 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    32f8:	a5 e3       	ldi	r26, 0x35	; 53
    32fa:	b0 e0       	ldi	r27, 0x00	; 0
    32fc:	e5 e3       	ldi	r30, 0x35	; 53
    32fe:	f0 e0       	ldi	r31, 0x00	; 0
    3300:	80 81       	ld	r24, Z
    3302:	48 2f       	mov	r20, r24
    3304:	8a 81       	ldd	r24, Y+2	; 0x02
    3306:	28 2f       	mov	r18, r24
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	02 2e       	mov	r0, r18
    3310:	02 c0       	rjmp	.+4      	; 0x3316 <GPIO_writePin+0x164>
    3312:	88 0f       	add	r24, r24
    3314:	99 1f       	adc	r25, r25
    3316:	0a 94       	dec	r0
    3318:	e2 f7       	brpl	.-8      	; 0x3312 <GPIO_writePin+0x160>
    331a:	80 95       	com	r24
    331c:	84 23       	and	r24, r20
    331e:	8c 93       	st	X, r24
    3320:	2b c0       	rjmp	.+86     	; 0x3378 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    3322:	8b 81       	ldd	r24, Y+3	; 0x03
    3324:	81 30       	cpi	r24, 0x01	; 1
    3326:	a1 f4       	brne	.+40     	; 0x3350 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    3328:	a2 e3       	ldi	r26, 0x32	; 50
    332a:	b0 e0       	ldi	r27, 0x00	; 0
    332c:	e2 e3       	ldi	r30, 0x32	; 50
    332e:	f0 e0       	ldi	r31, 0x00	; 0
    3330:	80 81       	ld	r24, Z
    3332:	48 2f       	mov	r20, r24
    3334:	8a 81       	ldd	r24, Y+2	; 0x02
    3336:	28 2f       	mov	r18, r24
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	81 e0       	ldi	r24, 0x01	; 1
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	02 2e       	mov	r0, r18
    3340:	02 c0       	rjmp	.+4      	; 0x3346 <GPIO_writePin+0x194>
    3342:	88 0f       	add	r24, r24
    3344:	99 1f       	adc	r25, r25
    3346:	0a 94       	dec	r0
    3348:	e2 f7       	brpl	.-8      	; 0x3342 <GPIO_writePin+0x190>
    334a:	84 2b       	or	r24, r20
    334c:	8c 93       	st	X, r24
    334e:	14 c0       	rjmp	.+40     	; 0x3378 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    3350:	a2 e3       	ldi	r26, 0x32	; 50
    3352:	b0 e0       	ldi	r27, 0x00	; 0
    3354:	e2 e3       	ldi	r30, 0x32	; 50
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	80 81       	ld	r24, Z
    335a:	48 2f       	mov	r20, r24
    335c:	8a 81       	ldd	r24, Y+2	; 0x02
    335e:	28 2f       	mov	r18, r24
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	81 e0       	ldi	r24, 0x01	; 1
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	02 2e       	mov	r0, r18
    3368:	02 c0       	rjmp	.+4      	; 0x336e <GPIO_writePin+0x1bc>
    336a:	88 0f       	add	r24, r24
    336c:	99 1f       	adc	r25, r25
    336e:	0a 94       	dec	r0
    3370:	e2 f7       	brpl	.-8      	; 0x336a <GPIO_writePin+0x1b8>
    3372:	80 95       	com	r24
    3374:	84 23       	and	r24, r20
    3376:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    3378:	0f 90       	pop	r0
    337a:	0f 90       	pop	r0
    337c:	0f 90       	pop	r0
    337e:	0f 90       	pop	r0
    3380:	0f 90       	pop	r0
    3382:	cf 91       	pop	r28
    3384:	df 91       	pop	r29
    3386:	08 95       	ret

00003388 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    3388:	df 93       	push	r29
    338a:	cf 93       	push	r28
    338c:	00 d0       	rcall	.+0      	; 0x338e <GPIO_readPin+0x6>
    338e:	00 d0       	rcall	.+0      	; 0x3390 <GPIO_readPin+0x8>
    3390:	0f 92       	push	r0
    3392:	cd b7       	in	r28, 0x3d	; 61
    3394:	de b7       	in	r29, 0x3e	; 62
    3396:	8a 83       	std	Y+2, r24	; 0x02
    3398:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    339a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    339c:	8b 81       	ldd	r24, Y+3	; 0x03
    339e:	88 30       	cpi	r24, 0x08	; 8
    33a0:	08 f0       	brcs	.+2      	; 0x33a4 <GPIO_readPin+0x1c>
    33a2:	84 c0       	rjmp	.+264    	; 0x34ac <GPIO_readPin+0x124>
    33a4:	8a 81       	ldd	r24, Y+2	; 0x02
    33a6:	84 30       	cpi	r24, 0x04	; 4
    33a8:	08 f0       	brcs	.+2      	; 0x33ac <GPIO_readPin+0x24>
    33aa:	80 c0       	rjmp	.+256    	; 0x34ac <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    33ac:	8a 81       	ldd	r24, Y+2	; 0x02
    33ae:	28 2f       	mov	r18, r24
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	3d 83       	std	Y+5, r19	; 0x05
    33b4:	2c 83       	std	Y+4, r18	; 0x04
    33b6:	4c 81       	ldd	r20, Y+4	; 0x04
    33b8:	5d 81       	ldd	r21, Y+5	; 0x05
    33ba:	41 30       	cpi	r20, 0x01	; 1
    33bc:	51 05       	cpc	r21, r1
    33be:	79 f1       	breq	.+94     	; 0x341e <GPIO_readPin+0x96>
    33c0:	8c 81       	ldd	r24, Y+4	; 0x04
    33c2:	9d 81       	ldd	r25, Y+5	; 0x05
    33c4:	82 30       	cpi	r24, 0x02	; 2
    33c6:	91 05       	cpc	r25, r1
    33c8:	34 f4       	brge	.+12     	; 0x33d6 <GPIO_readPin+0x4e>
    33ca:	2c 81       	ldd	r18, Y+4	; 0x04
    33cc:	3d 81       	ldd	r19, Y+5	; 0x05
    33ce:	21 15       	cp	r18, r1
    33d0:	31 05       	cpc	r19, r1
    33d2:	69 f0       	breq	.+26     	; 0x33ee <GPIO_readPin+0x66>
    33d4:	6b c0       	rjmp	.+214    	; 0x34ac <GPIO_readPin+0x124>
    33d6:	4c 81       	ldd	r20, Y+4	; 0x04
    33d8:	5d 81       	ldd	r21, Y+5	; 0x05
    33da:	42 30       	cpi	r20, 0x02	; 2
    33dc:	51 05       	cpc	r21, r1
    33de:	b9 f1       	breq	.+110    	; 0x344e <GPIO_readPin+0xc6>
    33e0:	8c 81       	ldd	r24, Y+4	; 0x04
    33e2:	9d 81       	ldd	r25, Y+5	; 0x05
    33e4:	83 30       	cpi	r24, 0x03	; 3
    33e6:	91 05       	cpc	r25, r1
    33e8:	09 f4       	brne	.+2      	; 0x33ec <GPIO_readPin+0x64>
    33ea:	49 c0       	rjmp	.+146    	; 0x347e <GPIO_readPin+0xf6>
    33ec:	5f c0       	rjmp	.+190    	; 0x34ac <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    33ee:	e9 e3       	ldi	r30, 0x39	; 57
    33f0:	f0 e0       	ldi	r31, 0x00	; 0
    33f2:	80 81       	ld	r24, Z
    33f4:	28 2f       	mov	r18, r24
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	8b 81       	ldd	r24, Y+3	; 0x03
    33fa:	88 2f       	mov	r24, r24
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	a9 01       	movw	r20, r18
    3400:	02 c0       	rjmp	.+4      	; 0x3406 <GPIO_readPin+0x7e>
    3402:	55 95       	asr	r21
    3404:	47 95       	ror	r20
    3406:	8a 95       	dec	r24
    3408:	e2 f7       	brpl	.-8      	; 0x3402 <GPIO_readPin+0x7a>
    340a:	ca 01       	movw	r24, r20
    340c:	81 70       	andi	r24, 0x01	; 1
    340e:	90 70       	andi	r25, 0x00	; 0
    3410:	88 23       	and	r24, r24
    3412:	19 f0       	breq	.+6      	; 0x341a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    3414:	81 e0       	ldi	r24, 0x01	; 1
    3416:	89 83       	std	Y+1, r24	; 0x01
    3418:	49 c0       	rjmp	.+146    	; 0x34ac <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    341a:	19 82       	std	Y+1, r1	; 0x01
    341c:	47 c0       	rjmp	.+142    	; 0x34ac <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    341e:	e6 e3       	ldi	r30, 0x36	; 54
    3420:	f0 e0       	ldi	r31, 0x00	; 0
    3422:	80 81       	ld	r24, Z
    3424:	28 2f       	mov	r18, r24
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	8b 81       	ldd	r24, Y+3	; 0x03
    342a:	88 2f       	mov	r24, r24
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	a9 01       	movw	r20, r18
    3430:	02 c0       	rjmp	.+4      	; 0x3436 <GPIO_readPin+0xae>
    3432:	55 95       	asr	r21
    3434:	47 95       	ror	r20
    3436:	8a 95       	dec	r24
    3438:	e2 f7       	brpl	.-8      	; 0x3432 <GPIO_readPin+0xaa>
    343a:	ca 01       	movw	r24, r20
    343c:	81 70       	andi	r24, 0x01	; 1
    343e:	90 70       	andi	r25, 0x00	; 0
    3440:	88 23       	and	r24, r24
    3442:	19 f0       	breq	.+6      	; 0x344a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	89 83       	std	Y+1, r24	; 0x01
    3448:	31 c0       	rjmp	.+98     	; 0x34ac <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    344a:	19 82       	std	Y+1, r1	; 0x01
    344c:	2f c0       	rjmp	.+94     	; 0x34ac <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    344e:	e3 e3       	ldi	r30, 0x33	; 51
    3450:	f0 e0       	ldi	r31, 0x00	; 0
    3452:	80 81       	ld	r24, Z
    3454:	28 2f       	mov	r18, r24
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	8b 81       	ldd	r24, Y+3	; 0x03
    345a:	88 2f       	mov	r24, r24
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	a9 01       	movw	r20, r18
    3460:	02 c0       	rjmp	.+4      	; 0x3466 <GPIO_readPin+0xde>
    3462:	55 95       	asr	r21
    3464:	47 95       	ror	r20
    3466:	8a 95       	dec	r24
    3468:	e2 f7       	brpl	.-8      	; 0x3462 <GPIO_readPin+0xda>
    346a:	ca 01       	movw	r24, r20
    346c:	81 70       	andi	r24, 0x01	; 1
    346e:	90 70       	andi	r25, 0x00	; 0
    3470:	88 23       	and	r24, r24
    3472:	19 f0       	breq	.+6      	; 0x347a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    3474:	81 e0       	ldi	r24, 0x01	; 1
    3476:	89 83       	std	Y+1, r24	; 0x01
    3478:	19 c0       	rjmp	.+50     	; 0x34ac <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    347a:	19 82       	std	Y+1, r1	; 0x01
    347c:	17 c0       	rjmp	.+46     	; 0x34ac <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    347e:	e0 e3       	ldi	r30, 0x30	; 48
    3480:	f0 e0       	ldi	r31, 0x00	; 0
    3482:	80 81       	ld	r24, Z
    3484:	28 2f       	mov	r18, r24
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	8b 81       	ldd	r24, Y+3	; 0x03
    348a:	88 2f       	mov	r24, r24
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	a9 01       	movw	r20, r18
    3490:	02 c0       	rjmp	.+4      	; 0x3496 <GPIO_readPin+0x10e>
    3492:	55 95       	asr	r21
    3494:	47 95       	ror	r20
    3496:	8a 95       	dec	r24
    3498:	e2 f7       	brpl	.-8      	; 0x3492 <GPIO_readPin+0x10a>
    349a:	ca 01       	movw	r24, r20
    349c:	81 70       	andi	r24, 0x01	; 1
    349e:	90 70       	andi	r25, 0x00	; 0
    34a0:	88 23       	and	r24, r24
    34a2:	19 f0       	breq	.+6      	; 0x34aa <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    34a4:	81 e0       	ldi	r24, 0x01	; 1
    34a6:	89 83       	std	Y+1, r24	; 0x01
    34a8:	01 c0       	rjmp	.+2      	; 0x34ac <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    34aa:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    34ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    34ae:	0f 90       	pop	r0
    34b0:	0f 90       	pop	r0
    34b2:	0f 90       	pop	r0
    34b4:	0f 90       	pop	r0
    34b6:	0f 90       	pop	r0
    34b8:	cf 91       	pop	r28
    34ba:	df 91       	pop	r29
    34bc:	08 95       	ret

000034be <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    34be:	df 93       	push	r29
    34c0:	cf 93       	push	r28
    34c2:	00 d0       	rcall	.+0      	; 0x34c4 <GPIO_setupPortDirection+0x6>
    34c4:	00 d0       	rcall	.+0      	; 0x34c6 <GPIO_setupPortDirection+0x8>
    34c6:	cd b7       	in	r28, 0x3d	; 61
    34c8:	de b7       	in	r29, 0x3e	; 62
    34ca:	89 83       	std	Y+1, r24	; 0x01
    34cc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    34ce:	89 81       	ldd	r24, Y+1	; 0x01
    34d0:	84 30       	cpi	r24, 0x04	; 4
    34d2:	90 f5       	brcc	.+100    	; 0x3538 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    34d4:	89 81       	ldd	r24, Y+1	; 0x01
    34d6:	28 2f       	mov	r18, r24
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	3c 83       	std	Y+4, r19	; 0x04
    34dc:	2b 83       	std	Y+3, r18	; 0x03
    34de:	8b 81       	ldd	r24, Y+3	; 0x03
    34e0:	9c 81       	ldd	r25, Y+4	; 0x04
    34e2:	81 30       	cpi	r24, 0x01	; 1
    34e4:	91 05       	cpc	r25, r1
    34e6:	d1 f0       	breq	.+52     	; 0x351c <GPIO_setupPortDirection+0x5e>
    34e8:	2b 81       	ldd	r18, Y+3	; 0x03
    34ea:	3c 81       	ldd	r19, Y+4	; 0x04
    34ec:	22 30       	cpi	r18, 0x02	; 2
    34ee:	31 05       	cpc	r19, r1
    34f0:	2c f4       	brge	.+10     	; 0x34fc <GPIO_setupPortDirection+0x3e>
    34f2:	8b 81       	ldd	r24, Y+3	; 0x03
    34f4:	9c 81       	ldd	r25, Y+4	; 0x04
    34f6:	00 97       	sbiw	r24, 0x00	; 0
    34f8:	61 f0       	breq	.+24     	; 0x3512 <GPIO_setupPortDirection+0x54>
    34fa:	1e c0       	rjmp	.+60     	; 0x3538 <GPIO_setupPortDirection+0x7a>
    34fc:	2b 81       	ldd	r18, Y+3	; 0x03
    34fe:	3c 81       	ldd	r19, Y+4	; 0x04
    3500:	22 30       	cpi	r18, 0x02	; 2
    3502:	31 05       	cpc	r19, r1
    3504:	81 f0       	breq	.+32     	; 0x3526 <GPIO_setupPortDirection+0x68>
    3506:	8b 81       	ldd	r24, Y+3	; 0x03
    3508:	9c 81       	ldd	r25, Y+4	; 0x04
    350a:	83 30       	cpi	r24, 0x03	; 3
    350c:	91 05       	cpc	r25, r1
    350e:	81 f0       	breq	.+32     	; 0x3530 <GPIO_setupPortDirection+0x72>
    3510:	13 c0       	rjmp	.+38     	; 0x3538 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    3512:	ea e3       	ldi	r30, 0x3A	; 58
    3514:	f0 e0       	ldi	r31, 0x00	; 0
    3516:	8a 81       	ldd	r24, Y+2	; 0x02
    3518:	80 83       	st	Z, r24
    351a:	0e c0       	rjmp	.+28     	; 0x3538 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    351c:	e7 e3       	ldi	r30, 0x37	; 55
    351e:	f0 e0       	ldi	r31, 0x00	; 0
    3520:	8a 81       	ldd	r24, Y+2	; 0x02
    3522:	80 83       	st	Z, r24
    3524:	09 c0       	rjmp	.+18     	; 0x3538 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    3526:	e4 e3       	ldi	r30, 0x34	; 52
    3528:	f0 e0       	ldi	r31, 0x00	; 0
    352a:	8a 81       	ldd	r24, Y+2	; 0x02
    352c:	80 83       	st	Z, r24
    352e:	04 c0       	rjmp	.+8      	; 0x3538 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    3530:	e1 e3       	ldi	r30, 0x31	; 49
    3532:	f0 e0       	ldi	r31, 0x00	; 0
    3534:	8a 81       	ldd	r24, Y+2	; 0x02
    3536:	80 83       	st	Z, r24
			break;
		}
	}
}
    3538:	0f 90       	pop	r0
    353a:	0f 90       	pop	r0
    353c:	0f 90       	pop	r0
    353e:	0f 90       	pop	r0
    3540:	cf 91       	pop	r28
    3542:	df 91       	pop	r29
    3544:	08 95       	ret

00003546 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    3546:	df 93       	push	r29
    3548:	cf 93       	push	r28
    354a:	00 d0       	rcall	.+0      	; 0x354c <GPIO_writePort+0x6>
    354c:	00 d0       	rcall	.+0      	; 0x354e <GPIO_writePort+0x8>
    354e:	cd b7       	in	r28, 0x3d	; 61
    3550:	de b7       	in	r29, 0x3e	; 62
    3552:	89 83       	std	Y+1, r24	; 0x01
    3554:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    3556:	89 81       	ldd	r24, Y+1	; 0x01
    3558:	84 30       	cpi	r24, 0x04	; 4
    355a:	90 f5       	brcc	.+100    	; 0x35c0 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    355c:	89 81       	ldd	r24, Y+1	; 0x01
    355e:	28 2f       	mov	r18, r24
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	3c 83       	std	Y+4, r19	; 0x04
    3564:	2b 83       	std	Y+3, r18	; 0x03
    3566:	8b 81       	ldd	r24, Y+3	; 0x03
    3568:	9c 81       	ldd	r25, Y+4	; 0x04
    356a:	81 30       	cpi	r24, 0x01	; 1
    356c:	91 05       	cpc	r25, r1
    356e:	d1 f0       	breq	.+52     	; 0x35a4 <GPIO_writePort+0x5e>
    3570:	2b 81       	ldd	r18, Y+3	; 0x03
    3572:	3c 81       	ldd	r19, Y+4	; 0x04
    3574:	22 30       	cpi	r18, 0x02	; 2
    3576:	31 05       	cpc	r19, r1
    3578:	2c f4       	brge	.+10     	; 0x3584 <GPIO_writePort+0x3e>
    357a:	8b 81       	ldd	r24, Y+3	; 0x03
    357c:	9c 81       	ldd	r25, Y+4	; 0x04
    357e:	00 97       	sbiw	r24, 0x00	; 0
    3580:	61 f0       	breq	.+24     	; 0x359a <GPIO_writePort+0x54>
    3582:	1e c0       	rjmp	.+60     	; 0x35c0 <GPIO_writePort+0x7a>
    3584:	2b 81       	ldd	r18, Y+3	; 0x03
    3586:	3c 81       	ldd	r19, Y+4	; 0x04
    3588:	22 30       	cpi	r18, 0x02	; 2
    358a:	31 05       	cpc	r19, r1
    358c:	81 f0       	breq	.+32     	; 0x35ae <GPIO_writePort+0x68>
    358e:	8b 81       	ldd	r24, Y+3	; 0x03
    3590:	9c 81       	ldd	r25, Y+4	; 0x04
    3592:	83 30       	cpi	r24, 0x03	; 3
    3594:	91 05       	cpc	r25, r1
    3596:	81 f0       	breq	.+32     	; 0x35b8 <GPIO_writePort+0x72>
    3598:	13 c0       	rjmp	.+38     	; 0x35c0 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    359a:	eb e3       	ldi	r30, 0x3B	; 59
    359c:	f0 e0       	ldi	r31, 0x00	; 0
    359e:	8a 81       	ldd	r24, Y+2	; 0x02
    35a0:	80 83       	st	Z, r24
    35a2:	0e c0       	rjmp	.+28     	; 0x35c0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    35a4:	e8 e3       	ldi	r30, 0x38	; 56
    35a6:	f0 e0       	ldi	r31, 0x00	; 0
    35a8:	8a 81       	ldd	r24, Y+2	; 0x02
    35aa:	80 83       	st	Z, r24
    35ac:	09 c0       	rjmp	.+18     	; 0x35c0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    35ae:	e5 e3       	ldi	r30, 0x35	; 53
    35b0:	f0 e0       	ldi	r31, 0x00	; 0
    35b2:	8a 81       	ldd	r24, Y+2	; 0x02
    35b4:	80 83       	st	Z, r24
    35b6:	04 c0       	rjmp	.+8      	; 0x35c0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    35b8:	e2 e3       	ldi	r30, 0x32	; 50
    35ba:	f0 e0       	ldi	r31, 0x00	; 0
    35bc:	8a 81       	ldd	r24, Y+2	; 0x02
    35be:	80 83       	st	Z, r24
			break;
		}
	}
}
    35c0:	0f 90       	pop	r0
    35c2:	0f 90       	pop	r0
    35c4:	0f 90       	pop	r0
    35c6:	0f 90       	pop	r0
    35c8:	cf 91       	pop	r28
    35ca:	df 91       	pop	r29
    35cc:	08 95       	ret

000035ce <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    35ce:	df 93       	push	r29
    35d0:	cf 93       	push	r28
    35d2:	00 d0       	rcall	.+0      	; 0x35d4 <GPIO_readPort+0x6>
    35d4:	00 d0       	rcall	.+0      	; 0x35d6 <GPIO_readPort+0x8>
    35d6:	cd b7       	in	r28, 0x3d	; 61
    35d8:	de b7       	in	r29, 0x3e	; 62
    35da:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    35dc:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    35de:	8a 81       	ldd	r24, Y+2	; 0x02
    35e0:	84 30       	cpi	r24, 0x04	; 4
    35e2:	90 f5       	brcc	.+100    	; 0x3648 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    35e4:	8a 81       	ldd	r24, Y+2	; 0x02
    35e6:	28 2f       	mov	r18, r24
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	3c 83       	std	Y+4, r19	; 0x04
    35ec:	2b 83       	std	Y+3, r18	; 0x03
    35ee:	8b 81       	ldd	r24, Y+3	; 0x03
    35f0:	9c 81       	ldd	r25, Y+4	; 0x04
    35f2:	81 30       	cpi	r24, 0x01	; 1
    35f4:	91 05       	cpc	r25, r1
    35f6:	d1 f0       	breq	.+52     	; 0x362c <GPIO_readPort+0x5e>
    35f8:	2b 81       	ldd	r18, Y+3	; 0x03
    35fa:	3c 81       	ldd	r19, Y+4	; 0x04
    35fc:	22 30       	cpi	r18, 0x02	; 2
    35fe:	31 05       	cpc	r19, r1
    3600:	2c f4       	brge	.+10     	; 0x360c <GPIO_readPort+0x3e>
    3602:	8b 81       	ldd	r24, Y+3	; 0x03
    3604:	9c 81       	ldd	r25, Y+4	; 0x04
    3606:	00 97       	sbiw	r24, 0x00	; 0
    3608:	61 f0       	breq	.+24     	; 0x3622 <GPIO_readPort+0x54>
    360a:	1e c0       	rjmp	.+60     	; 0x3648 <GPIO_readPort+0x7a>
    360c:	2b 81       	ldd	r18, Y+3	; 0x03
    360e:	3c 81       	ldd	r19, Y+4	; 0x04
    3610:	22 30       	cpi	r18, 0x02	; 2
    3612:	31 05       	cpc	r19, r1
    3614:	81 f0       	breq	.+32     	; 0x3636 <GPIO_readPort+0x68>
    3616:	8b 81       	ldd	r24, Y+3	; 0x03
    3618:	9c 81       	ldd	r25, Y+4	; 0x04
    361a:	83 30       	cpi	r24, 0x03	; 3
    361c:	91 05       	cpc	r25, r1
    361e:	81 f0       	breq	.+32     	; 0x3640 <GPIO_readPort+0x72>
    3620:	13 c0       	rjmp	.+38     	; 0x3648 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    3622:	e9 e3       	ldi	r30, 0x39	; 57
    3624:	f0 e0       	ldi	r31, 0x00	; 0
    3626:	80 81       	ld	r24, Z
    3628:	89 83       	std	Y+1, r24	; 0x01
    362a:	0e c0       	rjmp	.+28     	; 0x3648 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    362c:	e6 e3       	ldi	r30, 0x36	; 54
    362e:	f0 e0       	ldi	r31, 0x00	; 0
    3630:	80 81       	ld	r24, Z
    3632:	89 83       	std	Y+1, r24	; 0x01
    3634:	09 c0       	rjmp	.+18     	; 0x3648 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    3636:	e3 e3       	ldi	r30, 0x33	; 51
    3638:	f0 e0       	ldi	r31, 0x00	; 0
    363a:	80 81       	ld	r24, Z
    363c:	89 83       	std	Y+1, r24	; 0x01
    363e:	04 c0       	rjmp	.+8      	; 0x3648 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    3640:	e0 e3       	ldi	r30, 0x30	; 48
    3642:	f0 e0       	ldi	r31, 0x00	; 0
    3644:	80 81       	ld	r24, Z
    3646:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    3648:	89 81       	ldd	r24, Y+1	; 0x01
}
    364a:	0f 90       	pop	r0
    364c:	0f 90       	pop	r0
    364e:	0f 90       	pop	r0
    3650:	0f 90       	pop	r0
    3652:	cf 91       	pop	r28
    3654:	df 91       	pop	r29
    3656:	08 95       	ret

00003658 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    3658:	df 93       	push	r29
    365a:	cf 93       	push	r28
    365c:	cd b7       	in	r28, 0x3d	; 61
    365e:	de b7       	in	r29, 0x3e	; 62
    3660:	60 97       	sbiw	r28, 0x10	; 16
    3662:	0f b6       	in	r0, 0x3f	; 63
    3664:	f8 94       	cli
    3666:	de bf       	out	0x3e, r29	; 62
    3668:	0f be       	out	0x3f, r0	; 63
    366a:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    366c:	80 e0       	ldi	r24, 0x00	; 0
    366e:	60 e0       	ldi	r22, 0x00	; 0
    3670:	40 e0       	ldi	r20, 0x00	; 0
    3672:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    3676:	80 e0       	ldi	r24, 0x00	; 0
    3678:	61 e0       	ldi	r22, 0x01	; 1
    367a:	40 e0       	ldi	r20, 0x00	; 0
    367c:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    3680:	80 e0       	ldi	r24, 0x00	; 0
    3682:	62 e0       	ldi	r22, 0x02	; 2
    3684:	40 e0       	ldi	r20, 0x00	; 0
    3686:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    368a:	80 e0       	ldi	r24, 0x00	; 0
    368c:	63 e0       	ldi	r22, 0x03	; 3
    368e:	40 e0       	ldi	r20, 0x00	; 0
    3690:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    3694:	80 e0       	ldi	r24, 0x00	; 0
    3696:	64 e0       	ldi	r22, 0x04	; 4
    3698:	40 e0       	ldi	r20, 0x00	; 0
    369a:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    369e:	80 e0       	ldi	r24, 0x00	; 0
    36a0:	65 e0       	ldi	r22, 0x05	; 5
    36a2:	40 e0       	ldi	r20, 0x00	; 0
    36a4:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    36a8:	80 e0       	ldi	r24, 0x00	; 0
    36aa:	66 e0       	ldi	r22, 0x06	; 6
    36ac:	40 e0       	ldi	r20, 0x00	; 0
    36ae:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    36b2:	80 e0       	ldi	r24, 0x00	; 0
    36b4:	67 e0       	ldi	r22, 0x07	; 7
    36b6:	40 e0       	ldi	r20, 0x00	; 0
    36b8:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    36bc:	1f 86       	std	Y+15, r1	; 0x0f
    36be:	ab c0       	rjmp	.+342    	; 0x3816 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	6f 85       	ldd	r22, Y+15	; 0x0f
    36c4:	41 e0       	ldi	r20, 0x01	; 1
    36c6:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	6f 85       	ldd	r22, Y+15	; 0x0f
    36ce:	40 e0       	ldi	r20, 0x00	; 0
    36d0:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    36d4:	18 8a       	std	Y+16, r1	; 0x10
    36d6:	22 c0       	rjmp	.+68     	; 0x371c <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    36d8:	88 89       	ldd	r24, Y+16	; 0x10
    36da:	98 2f       	mov	r25, r24
    36dc:	9c 5f       	subi	r25, 0xFC	; 252
    36de:	80 e0       	ldi	r24, 0x00	; 0
    36e0:	69 2f       	mov	r22, r25
    36e2:	0e 94 c4 19 	call	0x3388	; 0x3388 <GPIO_readPin>
    36e6:	88 23       	and	r24, r24
    36e8:	b1 f4       	brne	.+44     	; 0x3716 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    36ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ec:	88 2f       	mov	r24, r24
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	88 0f       	add	r24, r24
    36f2:	99 1f       	adc	r25, r25
    36f4:	88 0f       	add	r24, r24
    36f6:	99 1f       	adc	r25, r25
    36f8:	98 2f       	mov	r25, r24
    36fa:	88 89       	ldd	r24, Y+16	; 0x10
    36fc:	89 0f       	add	r24, r25
    36fe:	8f 5f       	subi	r24, 0xFF	; 255
    3700:	0e 94 10 1c 	call	0x3820	; 0x3820 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    3704:	60 96       	adiw	r28, 0x10	; 16
    3706:	0f b6       	in	r0, 0x3f	; 63
    3708:	f8 94       	cli
    370a:	de bf       	out	0x3e, r29	; 62
    370c:	0f be       	out	0x3f, r0	; 63
    370e:	cd bf       	out	0x3d, r28	; 61
    3710:	cf 91       	pop	r28
    3712:	df 91       	pop	r29
    3714:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    3716:	88 89       	ldd	r24, Y+16	; 0x10
    3718:	8f 5f       	subi	r24, 0xFF	; 255
    371a:	88 8b       	std	Y+16, r24	; 0x10
    371c:	88 89       	ldd	r24, Y+16	; 0x10
    371e:	84 30       	cpi	r24, 0x04	; 4
    3720:	d8 f2       	brcs	.-74     	; 0x36d8 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    3722:	80 e0       	ldi	r24, 0x00	; 0
    3724:	6f 85       	ldd	r22, Y+15	; 0x0f
    3726:	40 e0       	ldi	r20, 0x00	; 0
    3728:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <GPIO_setupPinDirection>
    372c:	80 e0       	ldi	r24, 0x00	; 0
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	a0 ea       	ldi	r26, 0xA0	; 160
    3732:	b0 e4       	ldi	r27, 0x40	; 64
    3734:	8b 87       	std	Y+11, r24	; 0x0b
    3736:	9c 87       	std	Y+12, r25	; 0x0c
    3738:	ad 87       	std	Y+13, r26	; 0x0d
    373a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    373c:	6b 85       	ldd	r22, Y+11	; 0x0b
    373e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3740:	8d 85       	ldd	r24, Y+13	; 0x0d
    3742:	9e 85       	ldd	r25, Y+14	; 0x0e
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	30 e0       	ldi	r19, 0x00	; 0
    3748:	4a e7       	ldi	r20, 0x7A	; 122
    374a:	53 e4       	ldi	r21, 0x43	; 67
    374c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3750:	dc 01       	movw	r26, r24
    3752:	cb 01       	movw	r24, r22
    3754:	8f 83       	std	Y+7, r24	; 0x07
    3756:	98 87       	std	Y+8, r25	; 0x08
    3758:	a9 87       	std	Y+9, r26	; 0x09
    375a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    375c:	6f 81       	ldd	r22, Y+7	; 0x07
    375e:	78 85       	ldd	r23, Y+8	; 0x08
    3760:	89 85       	ldd	r24, Y+9	; 0x09
    3762:	9a 85       	ldd	r25, Y+10	; 0x0a
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	40 e8       	ldi	r20, 0x80	; 128
    376a:	5f e3       	ldi	r21, 0x3F	; 63
    376c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3770:	88 23       	and	r24, r24
    3772:	2c f4       	brge	.+10     	; 0x377e <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	9e 83       	std	Y+6, r25	; 0x06
    377a:	8d 83       	std	Y+5, r24	; 0x05
    377c:	3f c0       	rjmp	.+126    	; 0x37fc <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    377e:	6f 81       	ldd	r22, Y+7	; 0x07
    3780:	78 85       	ldd	r23, Y+8	; 0x08
    3782:	89 85       	ldd	r24, Y+9	; 0x09
    3784:	9a 85       	ldd	r25, Y+10	; 0x0a
    3786:	20 e0       	ldi	r18, 0x00	; 0
    3788:	3f ef       	ldi	r19, 0xFF	; 255
    378a:	4f e7       	ldi	r20, 0x7F	; 127
    378c:	57 e4       	ldi	r21, 0x47	; 71
    378e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3792:	18 16       	cp	r1, r24
    3794:	4c f5       	brge	.+82     	; 0x37e8 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3796:	6b 85       	ldd	r22, Y+11	; 0x0b
    3798:	7c 85       	ldd	r23, Y+12	; 0x0c
    379a:	8d 85       	ldd	r24, Y+13	; 0x0d
    379c:	9e 85       	ldd	r25, Y+14	; 0x0e
    379e:	20 e0       	ldi	r18, 0x00	; 0
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	40 e2       	ldi	r20, 0x20	; 32
    37a4:	51 e4       	ldi	r21, 0x41	; 65
    37a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	bc 01       	movw	r22, r24
    37b0:	cd 01       	movw	r24, r26
    37b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b6:	dc 01       	movw	r26, r24
    37b8:	cb 01       	movw	r24, r22
    37ba:	9e 83       	std	Y+6, r25	; 0x06
    37bc:	8d 83       	std	Y+5, r24	; 0x05
    37be:	0f c0       	rjmp	.+30     	; 0x37de <KEYPAD_getPressedKey+0x186>
    37c0:	89 e1       	ldi	r24, 0x19	; 25
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	9c 83       	std	Y+4, r25	; 0x04
    37c6:	8b 83       	std	Y+3, r24	; 0x03
    37c8:	8b 81       	ldd	r24, Y+3	; 0x03
    37ca:	9c 81       	ldd	r25, Y+4	; 0x04
    37cc:	01 97       	sbiw	r24, 0x01	; 1
    37ce:	f1 f7       	brne	.-4      	; 0x37cc <KEYPAD_getPressedKey+0x174>
    37d0:	9c 83       	std	Y+4, r25	; 0x04
    37d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37d4:	8d 81       	ldd	r24, Y+5	; 0x05
    37d6:	9e 81       	ldd	r25, Y+6	; 0x06
    37d8:	01 97       	sbiw	r24, 0x01	; 1
    37da:	9e 83       	std	Y+6, r25	; 0x06
    37dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37de:	8d 81       	ldd	r24, Y+5	; 0x05
    37e0:	9e 81       	ldd	r25, Y+6	; 0x06
    37e2:	00 97       	sbiw	r24, 0x00	; 0
    37e4:	69 f7       	brne	.-38     	; 0x37c0 <KEYPAD_getPressedKey+0x168>
    37e6:	14 c0       	rjmp	.+40     	; 0x3810 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37e8:	6f 81       	ldd	r22, Y+7	; 0x07
    37ea:	78 85       	ldd	r23, Y+8	; 0x08
    37ec:	89 85       	ldd	r24, Y+9	; 0x09
    37ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    37f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f4:	dc 01       	movw	r26, r24
    37f6:	cb 01       	movw	r24, r22
    37f8:	9e 83       	std	Y+6, r25	; 0x06
    37fa:	8d 83       	std	Y+5, r24	; 0x05
    37fc:	8d 81       	ldd	r24, Y+5	; 0x05
    37fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3800:	9a 83       	std	Y+2, r25	; 0x02
    3802:	89 83       	std	Y+1, r24	; 0x01
    3804:	89 81       	ldd	r24, Y+1	; 0x01
    3806:	9a 81       	ldd	r25, Y+2	; 0x02
    3808:	01 97       	sbiw	r24, 0x01	; 1
    380a:	f1 f7       	brne	.-4      	; 0x3808 <KEYPAD_getPressedKey+0x1b0>
    380c:	9a 83       	std	Y+2, r25	; 0x02
    380e:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    3810:	8f 85       	ldd	r24, Y+15	; 0x0f
    3812:	8f 5f       	subi	r24, 0xFF	; 255
    3814:	8f 87       	std	Y+15, r24	; 0x0f
    3816:	8f 85       	ldd	r24, Y+15	; 0x0f
    3818:	84 30       	cpi	r24, 0x04	; 4
    381a:	08 f4       	brcc	.+2      	; 0x381e <KEYPAD_getPressedKey+0x1c6>
    381c:	51 cf       	rjmp	.-350    	; 0x36c0 <KEYPAD_getPressedKey+0x68>
    381e:	4e cf       	rjmp	.-356    	; 0x36bc <KEYPAD_getPressedKey+0x64>

00003820 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    3820:	df 93       	push	r29
    3822:	cf 93       	push	r28
    3824:	00 d0       	rcall	.+0      	; 0x3826 <KEYPAD_4x4_adjustKeyNumber+0x6>
    3826:	00 d0       	rcall	.+0      	; 0x3828 <KEYPAD_4x4_adjustKeyNumber+0x8>
    3828:	cd b7       	in	r28, 0x3d	; 61
    382a:	de b7       	in	r29, 0x3e	; 62
    382c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    382e:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    3830:	8a 81       	ldd	r24, Y+2	; 0x02
    3832:	28 2f       	mov	r18, r24
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	3c 83       	std	Y+4, r19	; 0x04
    3838:	2b 83       	std	Y+3, r18	; 0x03
    383a:	8b 81       	ldd	r24, Y+3	; 0x03
    383c:	9c 81       	ldd	r25, Y+4	; 0x04
    383e:	88 30       	cpi	r24, 0x08	; 8
    3840:	91 05       	cpc	r25, r1
    3842:	09 f4       	brne	.+2      	; 0x3846 <KEYPAD_4x4_adjustKeyNumber+0x26>
    3844:	70 c0       	rjmp	.+224    	; 0x3926 <KEYPAD_4x4_adjustKeyNumber+0x106>
    3846:	2b 81       	ldd	r18, Y+3	; 0x03
    3848:	3c 81       	ldd	r19, Y+4	; 0x04
    384a:	29 30       	cpi	r18, 0x09	; 9
    384c:	31 05       	cpc	r19, r1
    384e:	5c f5       	brge	.+86     	; 0x38a6 <KEYPAD_4x4_adjustKeyNumber+0x86>
    3850:	8b 81       	ldd	r24, Y+3	; 0x03
    3852:	9c 81       	ldd	r25, Y+4	; 0x04
    3854:	84 30       	cpi	r24, 0x04	; 4
    3856:	91 05       	cpc	r25, r1
    3858:	09 f4       	brne	.+2      	; 0x385c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    385a:	59 c0       	rjmp	.+178    	; 0x390e <KEYPAD_4x4_adjustKeyNumber+0xee>
    385c:	2b 81       	ldd	r18, Y+3	; 0x03
    385e:	3c 81       	ldd	r19, Y+4	; 0x04
    3860:	25 30       	cpi	r18, 0x05	; 5
    3862:	31 05       	cpc	r19, r1
    3864:	9c f4       	brge	.+38     	; 0x388c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    3866:	8b 81       	ldd	r24, Y+3	; 0x03
    3868:	9c 81       	ldd	r25, Y+4	; 0x04
    386a:	82 30       	cpi	r24, 0x02	; 2
    386c:	91 05       	cpc	r25, r1
    386e:	09 f4       	brne	.+2      	; 0x3872 <KEYPAD_4x4_adjustKeyNumber+0x52>
    3870:	48 c0       	rjmp	.+144    	; 0x3902 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    3872:	2b 81       	ldd	r18, Y+3	; 0x03
    3874:	3c 81       	ldd	r19, Y+4	; 0x04
    3876:	23 30       	cpi	r18, 0x03	; 3
    3878:	31 05       	cpc	r19, r1
    387a:	0c f0       	brlt	.+2      	; 0x387e <KEYPAD_4x4_adjustKeyNumber+0x5e>
    387c:	45 c0       	rjmp	.+138    	; 0x3908 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    387e:	8b 81       	ldd	r24, Y+3	; 0x03
    3880:	9c 81       	ldd	r25, Y+4	; 0x04
    3882:	81 30       	cpi	r24, 0x01	; 1
    3884:	91 05       	cpc	r25, r1
    3886:	09 f4       	brne	.+2      	; 0x388a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    3888:	39 c0       	rjmp	.+114    	; 0x38fc <KEYPAD_4x4_adjustKeyNumber+0xdc>
    388a:	67 c0       	rjmp	.+206    	; 0x395a <KEYPAD_4x4_adjustKeyNumber+0x13a>
    388c:	2b 81       	ldd	r18, Y+3	; 0x03
    388e:	3c 81       	ldd	r19, Y+4	; 0x04
    3890:	26 30       	cpi	r18, 0x06	; 6
    3892:	31 05       	cpc	r19, r1
    3894:	09 f4       	brne	.+2      	; 0x3898 <KEYPAD_4x4_adjustKeyNumber+0x78>
    3896:	41 c0       	rjmp	.+130    	; 0x391a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    3898:	8b 81       	ldd	r24, Y+3	; 0x03
    389a:	9c 81       	ldd	r25, Y+4	; 0x04
    389c:	87 30       	cpi	r24, 0x07	; 7
    389e:	91 05       	cpc	r25, r1
    38a0:	0c f0       	brlt	.+2      	; 0x38a4 <KEYPAD_4x4_adjustKeyNumber+0x84>
    38a2:	3e c0       	rjmp	.+124    	; 0x3920 <KEYPAD_4x4_adjustKeyNumber+0x100>
    38a4:	37 c0       	rjmp	.+110    	; 0x3914 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    38a6:	2b 81       	ldd	r18, Y+3	; 0x03
    38a8:	3c 81       	ldd	r19, Y+4	; 0x04
    38aa:	2c 30       	cpi	r18, 0x0C	; 12
    38ac:	31 05       	cpc	r19, r1
    38ae:	09 f4       	brne	.+2      	; 0x38b2 <KEYPAD_4x4_adjustKeyNumber+0x92>
    38b0:	46 c0       	rjmp	.+140    	; 0x393e <KEYPAD_4x4_adjustKeyNumber+0x11e>
    38b2:	8b 81       	ldd	r24, Y+3	; 0x03
    38b4:	9c 81       	ldd	r25, Y+4	; 0x04
    38b6:	8d 30       	cpi	r24, 0x0D	; 13
    38b8:	91 05       	cpc	r25, r1
    38ba:	5c f4       	brge	.+22     	; 0x38d2 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    38bc:	2b 81       	ldd	r18, Y+3	; 0x03
    38be:	3c 81       	ldd	r19, Y+4	; 0x04
    38c0:	2a 30       	cpi	r18, 0x0A	; 10
    38c2:	31 05       	cpc	r19, r1
    38c4:	b1 f1       	breq	.+108    	; 0x3932 <KEYPAD_4x4_adjustKeyNumber+0x112>
    38c6:	8b 81       	ldd	r24, Y+3	; 0x03
    38c8:	9c 81       	ldd	r25, Y+4	; 0x04
    38ca:	8b 30       	cpi	r24, 0x0B	; 11
    38cc:	91 05       	cpc	r25, r1
    38ce:	a4 f5       	brge	.+104    	; 0x3938 <KEYPAD_4x4_adjustKeyNumber+0x118>
    38d0:	2d c0       	rjmp	.+90     	; 0x392c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    38d2:	2b 81       	ldd	r18, Y+3	; 0x03
    38d4:	3c 81       	ldd	r19, Y+4	; 0x04
    38d6:	2e 30       	cpi	r18, 0x0E	; 14
    38d8:	31 05       	cpc	r19, r1
    38da:	b9 f1       	breq	.+110    	; 0x394a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    38dc:	8b 81       	ldd	r24, Y+3	; 0x03
    38de:	9c 81       	ldd	r25, Y+4	; 0x04
    38e0:	8e 30       	cpi	r24, 0x0E	; 14
    38e2:	91 05       	cpc	r25, r1
    38e4:	7c f1       	brlt	.+94     	; 0x3944 <KEYPAD_4x4_adjustKeyNumber+0x124>
    38e6:	2b 81       	ldd	r18, Y+3	; 0x03
    38e8:	3c 81       	ldd	r19, Y+4	; 0x04
    38ea:	2f 30       	cpi	r18, 0x0F	; 15
    38ec:	31 05       	cpc	r19, r1
    38ee:	79 f1       	breq	.+94     	; 0x394e <KEYPAD_4x4_adjustKeyNumber+0x12e>
    38f0:	8b 81       	ldd	r24, Y+3	; 0x03
    38f2:	9c 81       	ldd	r25, Y+4	; 0x04
    38f4:	80 31       	cpi	r24, 0x10	; 16
    38f6:	91 05       	cpc	r25, r1
    38f8:	69 f1       	breq	.+90     	; 0x3954 <KEYPAD_4x4_adjustKeyNumber+0x134>
    38fa:	2f c0       	rjmp	.+94     	; 0x395a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    38fc:	87 e0       	ldi	r24, 0x07	; 7
    38fe:	89 83       	std	Y+1, r24	; 0x01
    3900:	2e c0       	rjmp	.+92     	; 0x395e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    3902:	88 e0       	ldi	r24, 0x08	; 8
    3904:	89 83       	std	Y+1, r24	; 0x01
    3906:	2b c0       	rjmp	.+86     	; 0x395e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    3908:	89 e0       	ldi	r24, 0x09	; 9
    390a:	89 83       	std	Y+1, r24	; 0x01
    390c:	28 c0       	rjmp	.+80     	; 0x395e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    390e:	85 e2       	ldi	r24, 0x25	; 37
    3910:	89 83       	std	Y+1, r24	; 0x01
    3912:	25 c0       	rjmp	.+74     	; 0x395e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    3914:	84 e0       	ldi	r24, 0x04	; 4
    3916:	89 83       	std	Y+1, r24	; 0x01
    3918:	22 c0       	rjmp	.+68     	; 0x395e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    391a:	85 e0       	ldi	r24, 0x05	; 5
    391c:	89 83       	std	Y+1, r24	; 0x01
    391e:	1f c0       	rjmp	.+62     	; 0x395e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    3920:	86 e0       	ldi	r24, 0x06	; 6
    3922:	89 83       	std	Y+1, r24	; 0x01
    3924:	1c c0       	rjmp	.+56     	; 0x395e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    3926:	8a e2       	ldi	r24, 0x2A	; 42
    3928:	89 83       	std	Y+1, r24	; 0x01
    392a:	19 c0       	rjmp	.+50     	; 0x395e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	89 83       	std	Y+1, r24	; 0x01
    3930:	16 c0       	rjmp	.+44     	; 0x395e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    3932:	82 e0       	ldi	r24, 0x02	; 2
    3934:	89 83       	std	Y+1, r24	; 0x01
    3936:	13 c0       	rjmp	.+38     	; 0x395e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    3938:	83 e0       	ldi	r24, 0x03	; 3
    393a:	89 83       	std	Y+1, r24	; 0x01
    393c:	10 c0       	rjmp	.+32     	; 0x395e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    393e:	8d e2       	ldi	r24, 0x2D	; 45
    3940:	89 83       	std	Y+1, r24	; 0x01
    3942:	0d c0       	rjmp	.+26     	; 0x395e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    3944:	8d e0       	ldi	r24, 0x0D	; 13
    3946:	89 83       	std	Y+1, r24	; 0x01
    3948:	0a c0       	rjmp	.+20     	; 0x395e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    394a:	19 82       	std	Y+1, r1	; 0x01
    394c:	08 c0       	rjmp	.+16     	; 0x395e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    394e:	8d e3       	ldi	r24, 0x3D	; 61
    3950:	89 83       	std	Y+1, r24	; 0x01
    3952:	05 c0       	rjmp	.+10     	; 0x395e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    3954:	8b e2       	ldi	r24, 0x2B	; 43
    3956:	89 83       	std	Y+1, r24	; 0x01
    3958:	02 c0       	rjmp	.+4      	; 0x395e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    395a:	8a 81       	ldd	r24, Y+2	; 0x02
    395c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    395e:	89 81       	ldd	r24, Y+1	; 0x01
} 
    3960:	0f 90       	pop	r0
    3962:	0f 90       	pop	r0
    3964:	0f 90       	pop	r0
    3966:	0f 90       	pop	r0
    3968:	cf 91       	pop	r28
    396a:	df 91       	pop	r29
    396c:	08 95       	ret

0000396e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    396e:	df 93       	push	r29
    3970:	cf 93       	push	r28
    3972:	cd b7       	in	r28, 0x3d	; 61
    3974:	de b7       	in	r29, 0x3e	; 62
    3976:	2e 97       	sbiw	r28, 0x0e	; 14
    3978:	0f b6       	in	r0, 0x3f	; 63
    397a:	f8 94       	cli
    397c:	de bf       	out	0x3e, r29	; 62
    397e:	0f be       	out	0x3f, r0	; 63
    3980:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	62 e0       	ldi	r22, 0x02	; 2
    3986:	41 e0       	ldi	r20, 0x01	; 1
    3988:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	63 e0       	ldi	r22, 0x03	; 3
    3990:	41 e0       	ldi	r20, 0x01	; 1
    3992:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <GPIO_setupPinDirection>
    3996:	80 e0       	ldi	r24, 0x00	; 0
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	a0 ea       	ldi	r26, 0xA0	; 160
    399c:	b1 e4       	ldi	r27, 0x41	; 65
    399e:	8b 87       	std	Y+11, r24	; 0x0b
    39a0:	9c 87       	std	Y+12, r25	; 0x0c
    39a2:	ad 87       	std	Y+13, r26	; 0x0d
    39a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    39a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    39aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    39ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    39ae:	20 e0       	ldi	r18, 0x00	; 0
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	4a e7       	ldi	r20, 0x7A	; 122
    39b4:	53 e4       	ldi	r21, 0x43	; 67
    39b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	8f 83       	std	Y+7, r24	; 0x07
    39c0:	98 87       	std	Y+8, r25	; 0x08
    39c2:	a9 87       	std	Y+9, r26	; 0x09
    39c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39c6:	6f 81       	ldd	r22, Y+7	; 0x07
    39c8:	78 85       	ldd	r23, Y+8	; 0x08
    39ca:	89 85       	ldd	r24, Y+9	; 0x09
    39cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ce:	20 e0       	ldi	r18, 0x00	; 0
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	40 e8       	ldi	r20, 0x80	; 128
    39d4:	5f e3       	ldi	r21, 0x3F	; 63
    39d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39da:	88 23       	and	r24, r24
    39dc:	2c f4       	brge	.+10     	; 0x39e8 <LCD_init+0x7a>
		__ticks = 1;
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	9e 83       	std	Y+6, r25	; 0x06
    39e4:	8d 83       	std	Y+5, r24	; 0x05
    39e6:	3f c0       	rjmp	.+126    	; 0x3a66 <LCD_init+0xf8>
	else if (__tmp > 65535)
    39e8:	6f 81       	ldd	r22, Y+7	; 0x07
    39ea:	78 85       	ldd	r23, Y+8	; 0x08
    39ec:	89 85       	ldd	r24, Y+9	; 0x09
    39ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	3f ef       	ldi	r19, 0xFF	; 255
    39f4:	4f e7       	ldi	r20, 0x7F	; 127
    39f6:	57 e4       	ldi	r21, 0x47	; 71
    39f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39fc:	18 16       	cp	r1, r24
    39fe:	4c f5       	brge	.+82     	; 0x3a52 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a00:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a02:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a04:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a06:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a08:	20 e0       	ldi	r18, 0x00	; 0
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	40 e2       	ldi	r20, 0x20	; 32
    3a0e:	51 e4       	ldi	r21, 0x41	; 65
    3a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a14:	dc 01       	movw	r26, r24
    3a16:	cb 01       	movw	r24, r22
    3a18:	bc 01       	movw	r22, r24
    3a1a:	cd 01       	movw	r24, r26
    3a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a20:	dc 01       	movw	r26, r24
    3a22:	cb 01       	movw	r24, r22
    3a24:	9e 83       	std	Y+6, r25	; 0x06
    3a26:	8d 83       	std	Y+5, r24	; 0x05
    3a28:	0f c0       	rjmp	.+30     	; 0x3a48 <LCD_init+0xda>
    3a2a:	89 e1       	ldi	r24, 0x19	; 25
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	9c 83       	std	Y+4, r25	; 0x04
    3a30:	8b 83       	std	Y+3, r24	; 0x03
    3a32:	8b 81       	ldd	r24, Y+3	; 0x03
    3a34:	9c 81       	ldd	r25, Y+4	; 0x04
    3a36:	01 97       	sbiw	r24, 0x01	; 1
    3a38:	f1 f7       	brne	.-4      	; 0x3a36 <LCD_init+0xc8>
    3a3a:	9c 83       	std	Y+4, r25	; 0x04
    3a3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a40:	9e 81       	ldd	r25, Y+6	; 0x06
    3a42:	01 97       	sbiw	r24, 0x01	; 1
    3a44:	9e 83       	std	Y+6, r25	; 0x06
    3a46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a48:	8d 81       	ldd	r24, Y+5	; 0x05
    3a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a4c:	00 97       	sbiw	r24, 0x00	; 0
    3a4e:	69 f7       	brne	.-38     	; 0x3a2a <LCD_init+0xbc>
    3a50:	14 c0       	rjmp	.+40     	; 0x3a7a <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a52:	6f 81       	ldd	r22, Y+7	; 0x07
    3a54:	78 85       	ldd	r23, Y+8	; 0x08
    3a56:	89 85       	ldd	r24, Y+9	; 0x09
    3a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a5e:	dc 01       	movw	r26, r24
    3a60:	cb 01       	movw	r24, r22
    3a62:	9e 83       	std	Y+6, r25	; 0x06
    3a64:	8d 83       	std	Y+5, r24	; 0x05
    3a66:	8d 81       	ldd	r24, Y+5	; 0x05
    3a68:	9e 81       	ldd	r25, Y+6	; 0x06
    3a6a:	9a 83       	std	Y+2, r25	; 0x02
    3a6c:	89 83       	std	Y+1, r24	; 0x01
    3a6e:	89 81       	ldd	r24, Y+1	; 0x01
    3a70:	9a 81       	ldd	r25, Y+2	; 0x02
    3a72:	01 97       	sbiw	r24, 0x01	; 1
    3a74:	f1 f7       	brne	.-4      	; 0x3a72 <LCD_init+0x104>
    3a76:	9a 83       	std	Y+2, r25	; 0x02
    3a78:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    3a7a:	81 e0       	ldi	r24, 0x01	; 1
    3a7c:	64 e0       	ldi	r22, 0x04	; 4
    3a7e:	41 e0       	ldi	r20, 0x01	; 1
    3a80:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    3a84:	81 e0       	ldi	r24, 0x01	; 1
    3a86:	65 e0       	ldi	r22, 0x05	; 5
    3a88:	41 e0       	ldi	r20, 0x01	; 1
    3a8a:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    3a8e:	81 e0       	ldi	r24, 0x01	; 1
    3a90:	66 e0       	ldi	r22, 0x06	; 6
    3a92:	41 e0       	ldi	r20, 0x01	; 1
    3a94:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    3a98:	81 e0       	ldi	r24, 0x01	; 1
    3a9a:	67 e0       	ldi	r22, 0x07	; 7
    3a9c:	41 e0       	ldi	r20, 0x01	; 1
    3a9e:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    3aa2:	83 e3       	ldi	r24, 0x33	; 51
    3aa4:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    3aa8:	82 e3       	ldi	r24, 0x32	; 50
    3aaa:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    3aae:	88 e2       	ldi	r24, 0x28	; 40
    3ab0:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    3ab4:	8c e0       	ldi	r24, 0x0C	; 12
    3ab6:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    3aba:	81 e0       	ldi	r24, 0x01	; 1
    3abc:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <LCD_sendCommand>
}
    3ac0:	2e 96       	adiw	r28, 0x0e	; 14
    3ac2:	0f b6       	in	r0, 0x3f	; 63
    3ac4:	f8 94       	cli
    3ac6:	de bf       	out	0x3e, r29	; 62
    3ac8:	0f be       	out	0x3f, r0	; 63
    3aca:	cd bf       	out	0x3d, r28	; 61
    3acc:	cf 91       	pop	r28
    3ace:	df 91       	pop	r29
    3ad0:	08 95       	ret

00003ad2 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    3ad2:	0f 93       	push	r16
    3ad4:	1f 93       	push	r17
    3ad6:	df 93       	push	r29
    3ad8:	cf 93       	push	r28
    3ada:	cd b7       	in	r28, 0x3d	; 61
    3adc:	de b7       	in	r29, 0x3e	; 62
    3ade:	c3 56       	subi	r28, 0x63	; 99
    3ae0:	d0 40       	sbci	r29, 0x00	; 0
    3ae2:	0f b6       	in	r0, 0x3f	; 63
    3ae4:	f8 94       	cli
    3ae6:	de bf       	out	0x3e, r29	; 62
    3ae8:	0f be       	out	0x3f, r0	; 63
    3aea:	cd bf       	out	0x3d, r28	; 61
    3aec:	fe 01       	movw	r30, r28
    3aee:	ed 59       	subi	r30, 0x9D	; 157
    3af0:	ff 4f       	sbci	r31, 0xFF	; 255
    3af2:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    3af4:	81 e0       	ldi	r24, 0x01	; 1
    3af6:	62 e0       	ldi	r22, 0x02	; 2
    3af8:	40 e0       	ldi	r20, 0x00	; 0
    3afa:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
    3afe:	fe 01       	movw	r30, r28
    3b00:	e1 5a       	subi	r30, 0xA1	; 161
    3b02:	ff 4f       	sbci	r31, 0xFF	; 255
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	a0 e8       	ldi	r26, 0x80	; 128
    3b0a:	bf e3       	ldi	r27, 0x3F	; 63
    3b0c:	80 83       	st	Z, r24
    3b0e:	91 83       	std	Z+1, r25	; 0x01
    3b10:	a2 83       	std	Z+2, r26	; 0x02
    3b12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b14:	8e 01       	movw	r16, r28
    3b16:	05 5a       	subi	r16, 0xA5	; 165
    3b18:	1f 4f       	sbci	r17, 0xFF	; 255
    3b1a:	fe 01       	movw	r30, r28
    3b1c:	e1 5a       	subi	r30, 0xA1	; 161
    3b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b20:	60 81       	ld	r22, Z
    3b22:	71 81       	ldd	r23, Z+1	; 0x01
    3b24:	82 81       	ldd	r24, Z+2	; 0x02
    3b26:	93 81       	ldd	r25, Z+3	; 0x03
    3b28:	20 e0       	ldi	r18, 0x00	; 0
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	4a e7       	ldi	r20, 0x7A	; 122
    3b2e:	53 e4       	ldi	r21, 0x43	; 67
    3b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b34:	dc 01       	movw	r26, r24
    3b36:	cb 01       	movw	r24, r22
    3b38:	f8 01       	movw	r30, r16
    3b3a:	80 83       	st	Z, r24
    3b3c:	91 83       	std	Z+1, r25	; 0x01
    3b3e:	a2 83       	std	Z+2, r26	; 0x02
    3b40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b42:	fe 01       	movw	r30, r28
    3b44:	e5 5a       	subi	r30, 0xA5	; 165
    3b46:	ff 4f       	sbci	r31, 0xFF	; 255
    3b48:	60 81       	ld	r22, Z
    3b4a:	71 81       	ldd	r23, Z+1	; 0x01
    3b4c:	82 81       	ldd	r24, Z+2	; 0x02
    3b4e:	93 81       	ldd	r25, Z+3	; 0x03
    3b50:	20 e0       	ldi	r18, 0x00	; 0
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	40 e8       	ldi	r20, 0x80	; 128
    3b56:	5f e3       	ldi	r21, 0x3F	; 63
    3b58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b5c:	88 23       	and	r24, r24
    3b5e:	44 f4       	brge	.+16     	; 0x3b70 <LCD_sendCommand+0x9e>
		__ticks = 1;
    3b60:	fe 01       	movw	r30, r28
    3b62:	e7 5a       	subi	r30, 0xA7	; 167
    3b64:	ff 4f       	sbci	r31, 0xFF	; 255
    3b66:	81 e0       	ldi	r24, 0x01	; 1
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	91 83       	std	Z+1, r25	; 0x01
    3b6c:	80 83       	st	Z, r24
    3b6e:	64 c0       	rjmp	.+200    	; 0x3c38 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    3b70:	fe 01       	movw	r30, r28
    3b72:	e5 5a       	subi	r30, 0xA5	; 165
    3b74:	ff 4f       	sbci	r31, 0xFF	; 255
    3b76:	60 81       	ld	r22, Z
    3b78:	71 81       	ldd	r23, Z+1	; 0x01
    3b7a:	82 81       	ldd	r24, Z+2	; 0x02
    3b7c:	93 81       	ldd	r25, Z+3	; 0x03
    3b7e:	20 e0       	ldi	r18, 0x00	; 0
    3b80:	3f ef       	ldi	r19, 0xFF	; 255
    3b82:	4f e7       	ldi	r20, 0x7F	; 127
    3b84:	57 e4       	ldi	r21, 0x47	; 71
    3b86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b8a:	18 16       	cp	r1, r24
    3b8c:	0c f0       	brlt	.+2      	; 0x3b90 <LCD_sendCommand+0xbe>
    3b8e:	43 c0       	rjmp	.+134    	; 0x3c16 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b90:	fe 01       	movw	r30, r28
    3b92:	e1 5a       	subi	r30, 0xA1	; 161
    3b94:	ff 4f       	sbci	r31, 0xFF	; 255
    3b96:	60 81       	ld	r22, Z
    3b98:	71 81       	ldd	r23, Z+1	; 0x01
    3b9a:	82 81       	ldd	r24, Z+2	; 0x02
    3b9c:	93 81       	ldd	r25, Z+3	; 0x03
    3b9e:	20 e0       	ldi	r18, 0x00	; 0
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	40 e2       	ldi	r20, 0x20	; 32
    3ba4:	51 e4       	ldi	r21, 0x41	; 65
    3ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3baa:	dc 01       	movw	r26, r24
    3bac:	cb 01       	movw	r24, r22
    3bae:	8e 01       	movw	r16, r28
    3bb0:	07 5a       	subi	r16, 0xA7	; 167
    3bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    3bb4:	bc 01       	movw	r22, r24
    3bb6:	cd 01       	movw	r24, r26
    3bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bbc:	dc 01       	movw	r26, r24
    3bbe:	cb 01       	movw	r24, r22
    3bc0:	f8 01       	movw	r30, r16
    3bc2:	91 83       	std	Z+1, r25	; 0x01
    3bc4:	80 83       	st	Z, r24
    3bc6:	1f c0       	rjmp	.+62     	; 0x3c06 <LCD_sendCommand+0x134>
    3bc8:	fe 01       	movw	r30, r28
    3bca:	e9 5a       	subi	r30, 0xA9	; 169
    3bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bce:	89 e1       	ldi	r24, 0x19	; 25
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	91 83       	std	Z+1, r25	; 0x01
    3bd4:	80 83       	st	Z, r24
    3bd6:	fe 01       	movw	r30, r28
    3bd8:	e9 5a       	subi	r30, 0xA9	; 169
    3bda:	ff 4f       	sbci	r31, 0xFF	; 255
    3bdc:	80 81       	ld	r24, Z
    3bde:	91 81       	ldd	r25, Z+1	; 0x01
    3be0:	01 97       	sbiw	r24, 0x01	; 1
    3be2:	f1 f7       	brne	.-4      	; 0x3be0 <LCD_sendCommand+0x10e>
    3be4:	fe 01       	movw	r30, r28
    3be6:	e9 5a       	subi	r30, 0xA9	; 169
    3be8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bea:	91 83       	std	Z+1, r25	; 0x01
    3bec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bee:	de 01       	movw	r26, r28
    3bf0:	a7 5a       	subi	r26, 0xA7	; 167
    3bf2:	bf 4f       	sbci	r27, 0xFF	; 255
    3bf4:	fe 01       	movw	r30, r28
    3bf6:	e7 5a       	subi	r30, 0xA7	; 167
    3bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfa:	80 81       	ld	r24, Z
    3bfc:	91 81       	ldd	r25, Z+1	; 0x01
    3bfe:	01 97       	sbiw	r24, 0x01	; 1
    3c00:	11 96       	adiw	r26, 0x01	; 1
    3c02:	9c 93       	st	X, r25
    3c04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c06:	fe 01       	movw	r30, r28
    3c08:	e7 5a       	subi	r30, 0xA7	; 167
    3c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0c:	80 81       	ld	r24, Z
    3c0e:	91 81       	ldd	r25, Z+1	; 0x01
    3c10:	00 97       	sbiw	r24, 0x00	; 0
    3c12:	d1 f6       	brne	.-76     	; 0x3bc8 <LCD_sendCommand+0xf6>
    3c14:	27 c0       	rjmp	.+78     	; 0x3c64 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c16:	8e 01       	movw	r16, r28
    3c18:	07 5a       	subi	r16, 0xA7	; 167
    3c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c1c:	fe 01       	movw	r30, r28
    3c1e:	e5 5a       	subi	r30, 0xA5	; 165
    3c20:	ff 4f       	sbci	r31, 0xFF	; 255
    3c22:	60 81       	ld	r22, Z
    3c24:	71 81       	ldd	r23, Z+1	; 0x01
    3c26:	82 81       	ldd	r24, Z+2	; 0x02
    3c28:	93 81       	ldd	r25, Z+3	; 0x03
    3c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c2e:	dc 01       	movw	r26, r24
    3c30:	cb 01       	movw	r24, r22
    3c32:	f8 01       	movw	r30, r16
    3c34:	91 83       	std	Z+1, r25	; 0x01
    3c36:	80 83       	st	Z, r24
    3c38:	de 01       	movw	r26, r28
    3c3a:	ab 5a       	subi	r26, 0xAB	; 171
    3c3c:	bf 4f       	sbci	r27, 0xFF	; 255
    3c3e:	fe 01       	movw	r30, r28
    3c40:	e7 5a       	subi	r30, 0xA7	; 167
    3c42:	ff 4f       	sbci	r31, 0xFF	; 255
    3c44:	80 81       	ld	r24, Z
    3c46:	91 81       	ldd	r25, Z+1	; 0x01
    3c48:	8d 93       	st	X+, r24
    3c4a:	9c 93       	st	X, r25
    3c4c:	fe 01       	movw	r30, r28
    3c4e:	eb 5a       	subi	r30, 0xAB	; 171
    3c50:	ff 4f       	sbci	r31, 0xFF	; 255
    3c52:	80 81       	ld	r24, Z
    3c54:	91 81       	ldd	r25, Z+1	; 0x01
    3c56:	01 97       	sbiw	r24, 0x01	; 1
    3c58:	f1 f7       	brne	.-4      	; 0x3c56 <LCD_sendCommand+0x184>
    3c5a:	fe 01       	movw	r30, r28
    3c5c:	eb 5a       	subi	r30, 0xAB	; 171
    3c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c60:	91 83       	std	Z+1, r25	; 0x01
    3c62:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3c64:	81 e0       	ldi	r24, 0x01	; 1
    3c66:	63 e0       	ldi	r22, 0x03	; 3
    3c68:	41 e0       	ldi	r20, 0x01	; 1
    3c6a:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
    3c6e:	fe 01       	movw	r30, r28
    3c70:	ef 5a       	subi	r30, 0xAF	; 175
    3c72:	ff 4f       	sbci	r31, 0xFF	; 255
    3c74:	80 e0       	ldi	r24, 0x00	; 0
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	a0 e8       	ldi	r26, 0x80	; 128
    3c7a:	bf e3       	ldi	r27, 0x3F	; 63
    3c7c:	80 83       	st	Z, r24
    3c7e:	91 83       	std	Z+1, r25	; 0x01
    3c80:	a2 83       	std	Z+2, r26	; 0x02
    3c82:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c84:	8e 01       	movw	r16, r28
    3c86:	03 5b       	subi	r16, 0xB3	; 179
    3c88:	1f 4f       	sbci	r17, 0xFF	; 255
    3c8a:	fe 01       	movw	r30, r28
    3c8c:	ef 5a       	subi	r30, 0xAF	; 175
    3c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c90:	60 81       	ld	r22, Z
    3c92:	71 81       	ldd	r23, Z+1	; 0x01
    3c94:	82 81       	ldd	r24, Z+2	; 0x02
    3c96:	93 81       	ldd	r25, Z+3	; 0x03
    3c98:	20 e0       	ldi	r18, 0x00	; 0
    3c9a:	30 e0       	ldi	r19, 0x00	; 0
    3c9c:	4a e7       	ldi	r20, 0x7A	; 122
    3c9e:	53 e4       	ldi	r21, 0x43	; 67
    3ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca4:	dc 01       	movw	r26, r24
    3ca6:	cb 01       	movw	r24, r22
    3ca8:	f8 01       	movw	r30, r16
    3caa:	80 83       	st	Z, r24
    3cac:	91 83       	std	Z+1, r25	; 0x01
    3cae:	a2 83       	std	Z+2, r26	; 0x02
    3cb0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cb2:	fe 01       	movw	r30, r28
    3cb4:	e3 5b       	subi	r30, 0xB3	; 179
    3cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb8:	60 81       	ld	r22, Z
    3cba:	71 81       	ldd	r23, Z+1	; 0x01
    3cbc:	82 81       	ldd	r24, Z+2	; 0x02
    3cbe:	93 81       	ldd	r25, Z+3	; 0x03
    3cc0:	20 e0       	ldi	r18, 0x00	; 0
    3cc2:	30 e0       	ldi	r19, 0x00	; 0
    3cc4:	40 e8       	ldi	r20, 0x80	; 128
    3cc6:	5f e3       	ldi	r21, 0x3F	; 63
    3cc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ccc:	88 23       	and	r24, r24
    3cce:	44 f4       	brge	.+16     	; 0x3ce0 <LCD_sendCommand+0x20e>
		__ticks = 1;
    3cd0:	fe 01       	movw	r30, r28
    3cd2:	e5 5b       	subi	r30, 0xB5	; 181
    3cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd6:	81 e0       	ldi	r24, 0x01	; 1
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
    3cda:	91 83       	std	Z+1, r25	; 0x01
    3cdc:	80 83       	st	Z, r24
    3cde:	64 c0       	rjmp	.+200    	; 0x3da8 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    3ce0:	fe 01       	movw	r30, r28
    3ce2:	e3 5b       	subi	r30, 0xB3	; 179
    3ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce6:	60 81       	ld	r22, Z
    3ce8:	71 81       	ldd	r23, Z+1	; 0x01
    3cea:	82 81       	ldd	r24, Z+2	; 0x02
    3cec:	93 81       	ldd	r25, Z+3	; 0x03
    3cee:	20 e0       	ldi	r18, 0x00	; 0
    3cf0:	3f ef       	ldi	r19, 0xFF	; 255
    3cf2:	4f e7       	ldi	r20, 0x7F	; 127
    3cf4:	57 e4       	ldi	r21, 0x47	; 71
    3cf6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3cfa:	18 16       	cp	r1, r24
    3cfc:	0c f0       	brlt	.+2      	; 0x3d00 <LCD_sendCommand+0x22e>
    3cfe:	43 c0       	rjmp	.+134    	; 0x3d86 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d00:	fe 01       	movw	r30, r28
    3d02:	ef 5a       	subi	r30, 0xAF	; 175
    3d04:	ff 4f       	sbci	r31, 0xFF	; 255
    3d06:	60 81       	ld	r22, Z
    3d08:	71 81       	ldd	r23, Z+1	; 0x01
    3d0a:	82 81       	ldd	r24, Z+2	; 0x02
    3d0c:	93 81       	ldd	r25, Z+3	; 0x03
    3d0e:	20 e0       	ldi	r18, 0x00	; 0
    3d10:	30 e0       	ldi	r19, 0x00	; 0
    3d12:	40 e2       	ldi	r20, 0x20	; 32
    3d14:	51 e4       	ldi	r21, 0x41	; 65
    3d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d1a:	dc 01       	movw	r26, r24
    3d1c:	cb 01       	movw	r24, r22
    3d1e:	8e 01       	movw	r16, r28
    3d20:	05 5b       	subi	r16, 0xB5	; 181
    3d22:	1f 4f       	sbci	r17, 0xFF	; 255
    3d24:	bc 01       	movw	r22, r24
    3d26:	cd 01       	movw	r24, r26
    3d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d2c:	dc 01       	movw	r26, r24
    3d2e:	cb 01       	movw	r24, r22
    3d30:	f8 01       	movw	r30, r16
    3d32:	91 83       	std	Z+1, r25	; 0x01
    3d34:	80 83       	st	Z, r24
    3d36:	1f c0       	rjmp	.+62     	; 0x3d76 <LCD_sendCommand+0x2a4>
    3d38:	fe 01       	movw	r30, r28
    3d3a:	e7 5b       	subi	r30, 0xB7	; 183
    3d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3e:	89 e1       	ldi	r24, 0x19	; 25
    3d40:	90 e0       	ldi	r25, 0x00	; 0
    3d42:	91 83       	std	Z+1, r25	; 0x01
    3d44:	80 83       	st	Z, r24
    3d46:	fe 01       	movw	r30, r28
    3d48:	e7 5b       	subi	r30, 0xB7	; 183
    3d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4c:	80 81       	ld	r24, Z
    3d4e:	91 81       	ldd	r25, Z+1	; 0x01
    3d50:	01 97       	sbiw	r24, 0x01	; 1
    3d52:	f1 f7       	brne	.-4      	; 0x3d50 <LCD_sendCommand+0x27e>
    3d54:	fe 01       	movw	r30, r28
    3d56:	e7 5b       	subi	r30, 0xB7	; 183
    3d58:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5a:	91 83       	std	Z+1, r25	; 0x01
    3d5c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d5e:	de 01       	movw	r26, r28
    3d60:	a5 5b       	subi	r26, 0xB5	; 181
    3d62:	bf 4f       	sbci	r27, 0xFF	; 255
    3d64:	fe 01       	movw	r30, r28
    3d66:	e5 5b       	subi	r30, 0xB5	; 181
    3d68:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6a:	80 81       	ld	r24, Z
    3d6c:	91 81       	ldd	r25, Z+1	; 0x01
    3d6e:	01 97       	sbiw	r24, 0x01	; 1
    3d70:	11 96       	adiw	r26, 0x01	; 1
    3d72:	9c 93       	st	X, r25
    3d74:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d76:	fe 01       	movw	r30, r28
    3d78:	e5 5b       	subi	r30, 0xB5	; 181
    3d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7c:	80 81       	ld	r24, Z
    3d7e:	91 81       	ldd	r25, Z+1	; 0x01
    3d80:	00 97       	sbiw	r24, 0x00	; 0
    3d82:	d1 f6       	brne	.-76     	; 0x3d38 <LCD_sendCommand+0x266>
    3d84:	27 c0       	rjmp	.+78     	; 0x3dd4 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d86:	8e 01       	movw	r16, r28
    3d88:	05 5b       	subi	r16, 0xB5	; 181
    3d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d8c:	fe 01       	movw	r30, r28
    3d8e:	e3 5b       	subi	r30, 0xB3	; 179
    3d90:	ff 4f       	sbci	r31, 0xFF	; 255
    3d92:	60 81       	ld	r22, Z
    3d94:	71 81       	ldd	r23, Z+1	; 0x01
    3d96:	82 81       	ldd	r24, Z+2	; 0x02
    3d98:	93 81       	ldd	r25, Z+3	; 0x03
    3d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d9e:	dc 01       	movw	r26, r24
    3da0:	cb 01       	movw	r24, r22
    3da2:	f8 01       	movw	r30, r16
    3da4:	91 83       	std	Z+1, r25	; 0x01
    3da6:	80 83       	st	Z, r24
    3da8:	de 01       	movw	r26, r28
    3daa:	a9 5b       	subi	r26, 0xB9	; 185
    3dac:	bf 4f       	sbci	r27, 0xFF	; 255
    3dae:	fe 01       	movw	r30, r28
    3db0:	e5 5b       	subi	r30, 0xB5	; 181
    3db2:	ff 4f       	sbci	r31, 0xFF	; 255
    3db4:	80 81       	ld	r24, Z
    3db6:	91 81       	ldd	r25, Z+1	; 0x01
    3db8:	8d 93       	st	X+, r24
    3dba:	9c 93       	st	X, r25
    3dbc:	fe 01       	movw	r30, r28
    3dbe:	e9 5b       	subi	r30, 0xB9	; 185
    3dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc2:	80 81       	ld	r24, Z
    3dc4:	91 81       	ldd	r25, Z+1	; 0x01
    3dc6:	01 97       	sbiw	r24, 0x01	; 1
    3dc8:	f1 f7       	brne	.-4      	; 0x3dc6 <LCD_sendCommand+0x2f4>
    3dca:	fe 01       	movw	r30, r28
    3dcc:	e9 5b       	subi	r30, 0xB9	; 185
    3dce:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd0:	91 83       	std	Z+1, r25	; 0x01
    3dd2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    3dd4:	fe 01       	movw	r30, r28
    3dd6:	ed 59       	subi	r30, 0x9D	; 157
    3dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dda:	80 81       	ld	r24, Z
    3ddc:	88 2f       	mov	r24, r24
    3dde:	90 e0       	ldi	r25, 0x00	; 0
    3de0:	80 71       	andi	r24, 0x10	; 16
    3de2:	90 70       	andi	r25, 0x00	; 0
    3de4:	95 95       	asr	r25
    3de6:	87 95       	ror	r24
    3de8:	95 95       	asr	r25
    3dea:	87 95       	ror	r24
    3dec:	95 95       	asr	r25
    3dee:	87 95       	ror	r24
    3df0:	95 95       	asr	r25
    3df2:	87 95       	ror	r24
    3df4:	98 2f       	mov	r25, r24
    3df6:	81 e0       	ldi	r24, 0x01	; 1
    3df8:	64 e0       	ldi	r22, 0x04	; 4
    3dfa:	49 2f       	mov	r20, r25
    3dfc:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    3e00:	fe 01       	movw	r30, r28
    3e02:	ed 59       	subi	r30, 0x9D	; 157
    3e04:	ff 4f       	sbci	r31, 0xFF	; 255
    3e06:	80 81       	ld	r24, Z
    3e08:	88 2f       	mov	r24, r24
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	80 72       	andi	r24, 0x20	; 32
    3e0e:	90 70       	andi	r25, 0x00	; 0
    3e10:	95 95       	asr	r25
    3e12:	87 95       	ror	r24
    3e14:	95 95       	asr	r25
    3e16:	87 95       	ror	r24
    3e18:	95 95       	asr	r25
    3e1a:	87 95       	ror	r24
    3e1c:	95 95       	asr	r25
    3e1e:	87 95       	ror	r24
    3e20:	95 95       	asr	r25
    3e22:	87 95       	ror	r24
    3e24:	98 2f       	mov	r25, r24
    3e26:	81 e0       	ldi	r24, 0x01	; 1
    3e28:	65 e0       	ldi	r22, 0x05	; 5
    3e2a:	49 2f       	mov	r20, r25
    3e2c:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    3e30:	fe 01       	movw	r30, r28
    3e32:	ed 59       	subi	r30, 0x9D	; 157
    3e34:	ff 4f       	sbci	r31, 0xFF	; 255
    3e36:	80 81       	ld	r24, Z
    3e38:	88 2f       	mov	r24, r24
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	80 74       	andi	r24, 0x40	; 64
    3e3e:	90 70       	andi	r25, 0x00	; 0
    3e40:	08 2e       	mov	r0, r24
    3e42:	89 2f       	mov	r24, r25
    3e44:	00 0c       	add	r0, r0
    3e46:	88 1f       	adc	r24, r24
    3e48:	99 0b       	sbc	r25, r25
    3e4a:	00 0c       	add	r0, r0
    3e4c:	88 1f       	adc	r24, r24
    3e4e:	99 1f       	adc	r25, r25
    3e50:	98 2f       	mov	r25, r24
    3e52:	81 e0       	ldi	r24, 0x01	; 1
    3e54:	66 e0       	ldi	r22, 0x06	; 6
    3e56:	49 2f       	mov	r20, r25
    3e58:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    3e5c:	fe 01       	movw	r30, r28
    3e5e:	ed 59       	subi	r30, 0x9D	; 157
    3e60:	ff 4f       	sbci	r31, 0xFF	; 255
    3e62:	80 81       	ld	r24, Z
    3e64:	98 2f       	mov	r25, r24
    3e66:	99 1f       	adc	r25, r25
    3e68:	99 27       	eor	r25, r25
    3e6a:	99 1f       	adc	r25, r25
    3e6c:	81 e0       	ldi	r24, 0x01	; 1
    3e6e:	67 e0       	ldi	r22, 0x07	; 7
    3e70:	49 2f       	mov	r20, r25
    3e72:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
    3e76:	fe 01       	movw	r30, r28
    3e78:	ed 5b       	subi	r30, 0xBD	; 189
    3e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7c:	80 e0       	ldi	r24, 0x00	; 0
    3e7e:	90 e0       	ldi	r25, 0x00	; 0
    3e80:	a0 e8       	ldi	r26, 0x80	; 128
    3e82:	bf e3       	ldi	r27, 0x3F	; 63
    3e84:	80 83       	st	Z, r24
    3e86:	91 83       	std	Z+1, r25	; 0x01
    3e88:	a2 83       	std	Z+2, r26	; 0x02
    3e8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e8c:	8e 01       	movw	r16, r28
    3e8e:	01 5c       	subi	r16, 0xC1	; 193
    3e90:	1f 4f       	sbci	r17, 0xFF	; 255
    3e92:	fe 01       	movw	r30, r28
    3e94:	ed 5b       	subi	r30, 0xBD	; 189
    3e96:	ff 4f       	sbci	r31, 0xFF	; 255
    3e98:	60 81       	ld	r22, Z
    3e9a:	71 81       	ldd	r23, Z+1	; 0x01
    3e9c:	82 81       	ldd	r24, Z+2	; 0x02
    3e9e:	93 81       	ldd	r25, Z+3	; 0x03
    3ea0:	20 e0       	ldi	r18, 0x00	; 0
    3ea2:	30 e0       	ldi	r19, 0x00	; 0
    3ea4:	4a e7       	ldi	r20, 0x7A	; 122
    3ea6:	53 e4       	ldi	r21, 0x43	; 67
    3ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eac:	dc 01       	movw	r26, r24
    3eae:	cb 01       	movw	r24, r22
    3eb0:	f8 01       	movw	r30, r16
    3eb2:	80 83       	st	Z, r24
    3eb4:	91 83       	std	Z+1, r25	; 0x01
    3eb6:	a2 83       	std	Z+2, r26	; 0x02
    3eb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3eba:	fe 01       	movw	r30, r28
    3ebc:	ff 96       	adiw	r30, 0x3f	; 63
    3ebe:	60 81       	ld	r22, Z
    3ec0:	71 81       	ldd	r23, Z+1	; 0x01
    3ec2:	82 81       	ldd	r24, Z+2	; 0x02
    3ec4:	93 81       	ldd	r25, Z+3	; 0x03
    3ec6:	20 e0       	ldi	r18, 0x00	; 0
    3ec8:	30 e0       	ldi	r19, 0x00	; 0
    3eca:	40 e8       	ldi	r20, 0x80	; 128
    3ecc:	5f e3       	ldi	r21, 0x3F	; 63
    3ece:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ed2:	88 23       	and	r24, r24
    3ed4:	2c f4       	brge	.+10     	; 0x3ee0 <LCD_sendCommand+0x40e>
		__ticks = 1;
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	9e af       	std	Y+62, r25	; 0x3e
    3edc:	8d af       	std	Y+61, r24	; 0x3d
    3ede:	46 c0       	rjmp	.+140    	; 0x3f6c <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    3ee0:	fe 01       	movw	r30, r28
    3ee2:	ff 96       	adiw	r30, 0x3f	; 63
    3ee4:	60 81       	ld	r22, Z
    3ee6:	71 81       	ldd	r23, Z+1	; 0x01
    3ee8:	82 81       	ldd	r24, Z+2	; 0x02
    3eea:	93 81       	ldd	r25, Z+3	; 0x03
    3eec:	20 e0       	ldi	r18, 0x00	; 0
    3eee:	3f ef       	ldi	r19, 0xFF	; 255
    3ef0:	4f e7       	ldi	r20, 0x7F	; 127
    3ef2:	57 e4       	ldi	r21, 0x47	; 71
    3ef4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ef8:	18 16       	cp	r1, r24
    3efa:	64 f5       	brge	.+88     	; 0x3f54 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3efc:	fe 01       	movw	r30, r28
    3efe:	ed 5b       	subi	r30, 0xBD	; 189
    3f00:	ff 4f       	sbci	r31, 0xFF	; 255
    3f02:	60 81       	ld	r22, Z
    3f04:	71 81       	ldd	r23, Z+1	; 0x01
    3f06:	82 81       	ldd	r24, Z+2	; 0x02
    3f08:	93 81       	ldd	r25, Z+3	; 0x03
    3f0a:	20 e0       	ldi	r18, 0x00	; 0
    3f0c:	30 e0       	ldi	r19, 0x00	; 0
    3f0e:	40 e2       	ldi	r20, 0x20	; 32
    3f10:	51 e4       	ldi	r21, 0x41	; 65
    3f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f16:	dc 01       	movw	r26, r24
    3f18:	cb 01       	movw	r24, r22
    3f1a:	bc 01       	movw	r22, r24
    3f1c:	cd 01       	movw	r24, r26
    3f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f22:	dc 01       	movw	r26, r24
    3f24:	cb 01       	movw	r24, r22
    3f26:	9e af       	std	Y+62, r25	; 0x3e
    3f28:	8d af       	std	Y+61, r24	; 0x3d
    3f2a:	0f c0       	rjmp	.+30     	; 0x3f4a <LCD_sendCommand+0x478>
    3f2c:	89 e1       	ldi	r24, 0x19	; 25
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	9c af       	std	Y+60, r25	; 0x3c
    3f32:	8b af       	std	Y+59, r24	; 0x3b
    3f34:	8b ad       	ldd	r24, Y+59	; 0x3b
    3f36:	9c ad       	ldd	r25, Y+60	; 0x3c
    3f38:	01 97       	sbiw	r24, 0x01	; 1
    3f3a:	f1 f7       	brne	.-4      	; 0x3f38 <LCD_sendCommand+0x466>
    3f3c:	9c af       	std	Y+60, r25	; 0x3c
    3f3e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f40:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f42:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f44:	01 97       	sbiw	r24, 0x01	; 1
    3f46:	9e af       	std	Y+62, r25	; 0x3e
    3f48:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f4e:	00 97       	sbiw	r24, 0x00	; 0
    3f50:	69 f7       	brne	.-38     	; 0x3f2c <LCD_sendCommand+0x45a>
    3f52:	16 c0       	rjmp	.+44     	; 0x3f80 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f54:	fe 01       	movw	r30, r28
    3f56:	ff 96       	adiw	r30, 0x3f	; 63
    3f58:	60 81       	ld	r22, Z
    3f5a:	71 81       	ldd	r23, Z+1	; 0x01
    3f5c:	82 81       	ldd	r24, Z+2	; 0x02
    3f5e:	93 81       	ldd	r25, Z+3	; 0x03
    3f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f64:	dc 01       	movw	r26, r24
    3f66:	cb 01       	movw	r24, r22
    3f68:	9e af       	std	Y+62, r25	; 0x3e
    3f6a:	8d af       	std	Y+61, r24	; 0x3d
    3f6c:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f6e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f70:	9a af       	std	Y+58, r25	; 0x3a
    3f72:	89 af       	std	Y+57, r24	; 0x39
    3f74:	89 ad       	ldd	r24, Y+57	; 0x39
    3f76:	9a ad       	ldd	r25, Y+58	; 0x3a
    3f78:	01 97       	sbiw	r24, 0x01	; 1
    3f7a:	f1 f7       	brne	.-4      	; 0x3f78 <LCD_sendCommand+0x4a6>
    3f7c:	9a af       	std	Y+58, r25	; 0x3a
    3f7e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3f80:	81 e0       	ldi	r24, 0x01	; 1
    3f82:	63 e0       	ldi	r22, 0x03	; 3
    3f84:	40 e0       	ldi	r20, 0x00	; 0
    3f86:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
    3f8a:	80 e0       	ldi	r24, 0x00	; 0
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	a0 e8       	ldi	r26, 0x80	; 128
    3f90:	bf e3       	ldi	r27, 0x3F	; 63
    3f92:	8d ab       	std	Y+53, r24	; 0x35
    3f94:	9e ab       	std	Y+54, r25	; 0x36
    3f96:	af ab       	std	Y+55, r26	; 0x37
    3f98:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f9a:	6d a9       	ldd	r22, Y+53	; 0x35
    3f9c:	7e a9       	ldd	r23, Y+54	; 0x36
    3f9e:	8f a9       	ldd	r24, Y+55	; 0x37
    3fa0:	98 ad       	ldd	r25, Y+56	; 0x38
    3fa2:	20 e0       	ldi	r18, 0x00	; 0
    3fa4:	30 e0       	ldi	r19, 0x00	; 0
    3fa6:	4a e7       	ldi	r20, 0x7A	; 122
    3fa8:	53 e4       	ldi	r21, 0x43	; 67
    3faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fae:	dc 01       	movw	r26, r24
    3fb0:	cb 01       	movw	r24, r22
    3fb2:	89 ab       	std	Y+49, r24	; 0x31
    3fb4:	9a ab       	std	Y+50, r25	; 0x32
    3fb6:	ab ab       	std	Y+51, r26	; 0x33
    3fb8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3fba:	69 a9       	ldd	r22, Y+49	; 0x31
    3fbc:	7a a9       	ldd	r23, Y+50	; 0x32
    3fbe:	8b a9       	ldd	r24, Y+51	; 0x33
    3fc0:	9c a9       	ldd	r25, Y+52	; 0x34
    3fc2:	20 e0       	ldi	r18, 0x00	; 0
    3fc4:	30 e0       	ldi	r19, 0x00	; 0
    3fc6:	40 e8       	ldi	r20, 0x80	; 128
    3fc8:	5f e3       	ldi	r21, 0x3F	; 63
    3fca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fce:	88 23       	and	r24, r24
    3fd0:	2c f4       	brge	.+10     	; 0x3fdc <LCD_sendCommand+0x50a>
		__ticks = 1;
    3fd2:	81 e0       	ldi	r24, 0x01	; 1
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	98 ab       	std	Y+48, r25	; 0x30
    3fd8:	8f a7       	std	Y+47, r24	; 0x2f
    3fda:	3f c0       	rjmp	.+126    	; 0x405a <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    3fdc:	69 a9       	ldd	r22, Y+49	; 0x31
    3fde:	7a a9       	ldd	r23, Y+50	; 0x32
    3fe0:	8b a9       	ldd	r24, Y+51	; 0x33
    3fe2:	9c a9       	ldd	r25, Y+52	; 0x34
    3fe4:	20 e0       	ldi	r18, 0x00	; 0
    3fe6:	3f ef       	ldi	r19, 0xFF	; 255
    3fe8:	4f e7       	ldi	r20, 0x7F	; 127
    3fea:	57 e4       	ldi	r21, 0x47	; 71
    3fec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ff0:	18 16       	cp	r1, r24
    3ff2:	4c f5       	brge	.+82     	; 0x4046 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ff4:	6d a9       	ldd	r22, Y+53	; 0x35
    3ff6:	7e a9       	ldd	r23, Y+54	; 0x36
    3ff8:	8f a9       	ldd	r24, Y+55	; 0x37
    3ffa:	98 ad       	ldd	r25, Y+56	; 0x38
    3ffc:	20 e0       	ldi	r18, 0x00	; 0
    3ffe:	30 e0       	ldi	r19, 0x00	; 0
    4000:	40 e2       	ldi	r20, 0x20	; 32
    4002:	51 e4       	ldi	r21, 0x41	; 65
    4004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4008:	dc 01       	movw	r26, r24
    400a:	cb 01       	movw	r24, r22
    400c:	bc 01       	movw	r22, r24
    400e:	cd 01       	movw	r24, r26
    4010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4014:	dc 01       	movw	r26, r24
    4016:	cb 01       	movw	r24, r22
    4018:	98 ab       	std	Y+48, r25	; 0x30
    401a:	8f a7       	std	Y+47, r24	; 0x2f
    401c:	0f c0       	rjmp	.+30     	; 0x403c <LCD_sendCommand+0x56a>
    401e:	89 e1       	ldi	r24, 0x19	; 25
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	9e a7       	std	Y+46, r25	; 0x2e
    4024:	8d a7       	std	Y+45, r24	; 0x2d
    4026:	8d a5       	ldd	r24, Y+45	; 0x2d
    4028:	9e a5       	ldd	r25, Y+46	; 0x2e
    402a:	01 97       	sbiw	r24, 0x01	; 1
    402c:	f1 f7       	brne	.-4      	; 0x402a <LCD_sendCommand+0x558>
    402e:	9e a7       	std	Y+46, r25	; 0x2e
    4030:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4032:	8f a5       	ldd	r24, Y+47	; 0x2f
    4034:	98 a9       	ldd	r25, Y+48	; 0x30
    4036:	01 97       	sbiw	r24, 0x01	; 1
    4038:	98 ab       	std	Y+48, r25	; 0x30
    403a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    403c:	8f a5       	ldd	r24, Y+47	; 0x2f
    403e:	98 a9       	ldd	r25, Y+48	; 0x30
    4040:	00 97       	sbiw	r24, 0x00	; 0
    4042:	69 f7       	brne	.-38     	; 0x401e <LCD_sendCommand+0x54c>
    4044:	14 c0       	rjmp	.+40     	; 0x406e <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4046:	69 a9       	ldd	r22, Y+49	; 0x31
    4048:	7a a9       	ldd	r23, Y+50	; 0x32
    404a:	8b a9       	ldd	r24, Y+51	; 0x33
    404c:	9c a9       	ldd	r25, Y+52	; 0x34
    404e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4052:	dc 01       	movw	r26, r24
    4054:	cb 01       	movw	r24, r22
    4056:	98 ab       	std	Y+48, r25	; 0x30
    4058:	8f a7       	std	Y+47, r24	; 0x2f
    405a:	8f a5       	ldd	r24, Y+47	; 0x2f
    405c:	98 a9       	ldd	r25, Y+48	; 0x30
    405e:	9c a7       	std	Y+44, r25	; 0x2c
    4060:	8b a7       	std	Y+43, r24	; 0x2b
    4062:	8b a5       	ldd	r24, Y+43	; 0x2b
    4064:	9c a5       	ldd	r25, Y+44	; 0x2c
    4066:	01 97       	sbiw	r24, 0x01	; 1
    4068:	f1 f7       	brne	.-4      	; 0x4066 <LCD_sendCommand+0x594>
    406a:	9c a7       	std	Y+44, r25	; 0x2c
    406c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    406e:	81 e0       	ldi	r24, 0x01	; 1
    4070:	63 e0       	ldi	r22, 0x03	; 3
    4072:	41 e0       	ldi	r20, 0x01	; 1
    4074:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
    4078:	80 e0       	ldi	r24, 0x00	; 0
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	a0 e8       	ldi	r26, 0x80	; 128
    407e:	bf e3       	ldi	r27, 0x3F	; 63
    4080:	8f a3       	std	Y+39, r24	; 0x27
    4082:	98 a7       	std	Y+40, r25	; 0x28
    4084:	a9 a7       	std	Y+41, r26	; 0x29
    4086:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4088:	6f a1       	ldd	r22, Y+39	; 0x27
    408a:	78 a5       	ldd	r23, Y+40	; 0x28
    408c:	89 a5       	ldd	r24, Y+41	; 0x29
    408e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4090:	20 e0       	ldi	r18, 0x00	; 0
    4092:	30 e0       	ldi	r19, 0x00	; 0
    4094:	4a e7       	ldi	r20, 0x7A	; 122
    4096:	53 e4       	ldi	r21, 0x43	; 67
    4098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    409c:	dc 01       	movw	r26, r24
    409e:	cb 01       	movw	r24, r22
    40a0:	8b a3       	std	Y+35, r24	; 0x23
    40a2:	9c a3       	std	Y+36, r25	; 0x24
    40a4:	ad a3       	std	Y+37, r26	; 0x25
    40a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    40a8:	6b a1       	ldd	r22, Y+35	; 0x23
    40aa:	7c a1       	ldd	r23, Y+36	; 0x24
    40ac:	8d a1       	ldd	r24, Y+37	; 0x25
    40ae:	9e a1       	ldd	r25, Y+38	; 0x26
    40b0:	20 e0       	ldi	r18, 0x00	; 0
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	40 e8       	ldi	r20, 0x80	; 128
    40b6:	5f e3       	ldi	r21, 0x3F	; 63
    40b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40bc:	88 23       	and	r24, r24
    40be:	2c f4       	brge	.+10     	; 0x40ca <LCD_sendCommand+0x5f8>
		__ticks = 1;
    40c0:	81 e0       	ldi	r24, 0x01	; 1
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	9a a3       	std	Y+34, r25	; 0x22
    40c6:	89 a3       	std	Y+33, r24	; 0x21
    40c8:	3f c0       	rjmp	.+126    	; 0x4148 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    40ca:	6b a1       	ldd	r22, Y+35	; 0x23
    40cc:	7c a1       	ldd	r23, Y+36	; 0x24
    40ce:	8d a1       	ldd	r24, Y+37	; 0x25
    40d0:	9e a1       	ldd	r25, Y+38	; 0x26
    40d2:	20 e0       	ldi	r18, 0x00	; 0
    40d4:	3f ef       	ldi	r19, 0xFF	; 255
    40d6:	4f e7       	ldi	r20, 0x7F	; 127
    40d8:	57 e4       	ldi	r21, 0x47	; 71
    40da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    40de:	18 16       	cp	r1, r24
    40e0:	4c f5       	brge	.+82     	; 0x4134 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40e2:	6f a1       	ldd	r22, Y+39	; 0x27
    40e4:	78 a5       	ldd	r23, Y+40	; 0x28
    40e6:	89 a5       	ldd	r24, Y+41	; 0x29
    40e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    40ea:	20 e0       	ldi	r18, 0x00	; 0
    40ec:	30 e0       	ldi	r19, 0x00	; 0
    40ee:	40 e2       	ldi	r20, 0x20	; 32
    40f0:	51 e4       	ldi	r21, 0x41	; 65
    40f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40f6:	dc 01       	movw	r26, r24
    40f8:	cb 01       	movw	r24, r22
    40fa:	bc 01       	movw	r22, r24
    40fc:	cd 01       	movw	r24, r26
    40fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4102:	dc 01       	movw	r26, r24
    4104:	cb 01       	movw	r24, r22
    4106:	9a a3       	std	Y+34, r25	; 0x22
    4108:	89 a3       	std	Y+33, r24	; 0x21
    410a:	0f c0       	rjmp	.+30     	; 0x412a <LCD_sendCommand+0x658>
    410c:	89 e1       	ldi	r24, 0x19	; 25
    410e:	90 e0       	ldi	r25, 0x00	; 0
    4110:	98 a3       	std	Y+32, r25	; 0x20
    4112:	8f 8f       	std	Y+31, r24	; 0x1f
    4114:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4116:	98 a1       	ldd	r25, Y+32	; 0x20
    4118:	01 97       	sbiw	r24, 0x01	; 1
    411a:	f1 f7       	brne	.-4      	; 0x4118 <LCD_sendCommand+0x646>
    411c:	98 a3       	std	Y+32, r25	; 0x20
    411e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4120:	89 a1       	ldd	r24, Y+33	; 0x21
    4122:	9a a1       	ldd	r25, Y+34	; 0x22
    4124:	01 97       	sbiw	r24, 0x01	; 1
    4126:	9a a3       	std	Y+34, r25	; 0x22
    4128:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    412a:	89 a1       	ldd	r24, Y+33	; 0x21
    412c:	9a a1       	ldd	r25, Y+34	; 0x22
    412e:	00 97       	sbiw	r24, 0x00	; 0
    4130:	69 f7       	brne	.-38     	; 0x410c <LCD_sendCommand+0x63a>
    4132:	14 c0       	rjmp	.+40     	; 0x415c <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4134:	6b a1       	ldd	r22, Y+35	; 0x23
    4136:	7c a1       	ldd	r23, Y+36	; 0x24
    4138:	8d a1       	ldd	r24, Y+37	; 0x25
    413a:	9e a1       	ldd	r25, Y+38	; 0x26
    413c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4140:	dc 01       	movw	r26, r24
    4142:	cb 01       	movw	r24, r22
    4144:	9a a3       	std	Y+34, r25	; 0x22
    4146:	89 a3       	std	Y+33, r24	; 0x21
    4148:	89 a1       	ldd	r24, Y+33	; 0x21
    414a:	9a a1       	ldd	r25, Y+34	; 0x22
    414c:	9e 8f       	std	Y+30, r25	; 0x1e
    414e:	8d 8f       	std	Y+29, r24	; 0x1d
    4150:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4152:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4154:	01 97       	sbiw	r24, 0x01	; 1
    4156:	f1 f7       	brne	.-4      	; 0x4154 <LCD_sendCommand+0x682>
    4158:	9e 8f       	std	Y+30, r25	; 0x1e
    415a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    415c:	fe 01       	movw	r30, r28
    415e:	ed 59       	subi	r30, 0x9D	; 157
    4160:	ff 4f       	sbci	r31, 0xFF	; 255
    4162:	80 81       	ld	r24, Z
    4164:	98 2f       	mov	r25, r24
    4166:	91 70       	andi	r25, 0x01	; 1
    4168:	81 e0       	ldi	r24, 0x01	; 1
    416a:	64 e0       	ldi	r22, 0x04	; 4
    416c:	49 2f       	mov	r20, r25
    416e:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    4172:	fe 01       	movw	r30, r28
    4174:	ed 59       	subi	r30, 0x9D	; 157
    4176:	ff 4f       	sbci	r31, 0xFF	; 255
    4178:	80 81       	ld	r24, Z
    417a:	88 2f       	mov	r24, r24
    417c:	90 e0       	ldi	r25, 0x00	; 0
    417e:	82 70       	andi	r24, 0x02	; 2
    4180:	90 70       	andi	r25, 0x00	; 0
    4182:	95 95       	asr	r25
    4184:	87 95       	ror	r24
    4186:	98 2f       	mov	r25, r24
    4188:	81 e0       	ldi	r24, 0x01	; 1
    418a:	65 e0       	ldi	r22, 0x05	; 5
    418c:	49 2f       	mov	r20, r25
    418e:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    4192:	fe 01       	movw	r30, r28
    4194:	ed 59       	subi	r30, 0x9D	; 157
    4196:	ff 4f       	sbci	r31, 0xFF	; 255
    4198:	80 81       	ld	r24, Z
    419a:	88 2f       	mov	r24, r24
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	84 70       	andi	r24, 0x04	; 4
    41a0:	90 70       	andi	r25, 0x00	; 0
    41a2:	95 95       	asr	r25
    41a4:	87 95       	ror	r24
    41a6:	95 95       	asr	r25
    41a8:	87 95       	ror	r24
    41aa:	98 2f       	mov	r25, r24
    41ac:	81 e0       	ldi	r24, 0x01	; 1
    41ae:	66 e0       	ldi	r22, 0x06	; 6
    41b0:	49 2f       	mov	r20, r25
    41b2:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    41b6:	fe 01       	movw	r30, r28
    41b8:	ed 59       	subi	r30, 0x9D	; 157
    41ba:	ff 4f       	sbci	r31, 0xFF	; 255
    41bc:	80 81       	ld	r24, Z
    41be:	88 2f       	mov	r24, r24
    41c0:	90 e0       	ldi	r25, 0x00	; 0
    41c2:	88 70       	andi	r24, 0x08	; 8
    41c4:	90 70       	andi	r25, 0x00	; 0
    41c6:	95 95       	asr	r25
    41c8:	87 95       	ror	r24
    41ca:	95 95       	asr	r25
    41cc:	87 95       	ror	r24
    41ce:	95 95       	asr	r25
    41d0:	87 95       	ror	r24
    41d2:	98 2f       	mov	r25, r24
    41d4:	81 e0       	ldi	r24, 0x01	; 1
    41d6:	67 e0       	ldi	r22, 0x07	; 7
    41d8:	49 2f       	mov	r20, r25
    41da:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
    41de:	80 e0       	ldi	r24, 0x00	; 0
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	a0 e8       	ldi	r26, 0x80	; 128
    41e4:	bf e3       	ldi	r27, 0x3F	; 63
    41e6:	89 8f       	std	Y+25, r24	; 0x19
    41e8:	9a 8f       	std	Y+26, r25	; 0x1a
    41ea:	ab 8f       	std	Y+27, r26	; 0x1b
    41ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41ee:	69 8d       	ldd	r22, Y+25	; 0x19
    41f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41f6:	20 e0       	ldi	r18, 0x00	; 0
    41f8:	30 e0       	ldi	r19, 0x00	; 0
    41fa:	4a e7       	ldi	r20, 0x7A	; 122
    41fc:	53 e4       	ldi	r21, 0x43	; 67
    41fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4202:	dc 01       	movw	r26, r24
    4204:	cb 01       	movw	r24, r22
    4206:	8d 8b       	std	Y+21, r24	; 0x15
    4208:	9e 8b       	std	Y+22, r25	; 0x16
    420a:	af 8b       	std	Y+23, r26	; 0x17
    420c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    420e:	6d 89       	ldd	r22, Y+21	; 0x15
    4210:	7e 89       	ldd	r23, Y+22	; 0x16
    4212:	8f 89       	ldd	r24, Y+23	; 0x17
    4214:	98 8d       	ldd	r25, Y+24	; 0x18
    4216:	20 e0       	ldi	r18, 0x00	; 0
    4218:	30 e0       	ldi	r19, 0x00	; 0
    421a:	40 e8       	ldi	r20, 0x80	; 128
    421c:	5f e3       	ldi	r21, 0x3F	; 63
    421e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4222:	88 23       	and	r24, r24
    4224:	2c f4       	brge	.+10     	; 0x4230 <LCD_sendCommand+0x75e>
		__ticks = 1;
    4226:	81 e0       	ldi	r24, 0x01	; 1
    4228:	90 e0       	ldi	r25, 0x00	; 0
    422a:	9c 8b       	std	Y+20, r25	; 0x14
    422c:	8b 8b       	std	Y+19, r24	; 0x13
    422e:	3f c0       	rjmp	.+126    	; 0x42ae <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    4230:	6d 89       	ldd	r22, Y+21	; 0x15
    4232:	7e 89       	ldd	r23, Y+22	; 0x16
    4234:	8f 89       	ldd	r24, Y+23	; 0x17
    4236:	98 8d       	ldd	r25, Y+24	; 0x18
    4238:	20 e0       	ldi	r18, 0x00	; 0
    423a:	3f ef       	ldi	r19, 0xFF	; 255
    423c:	4f e7       	ldi	r20, 0x7F	; 127
    423e:	57 e4       	ldi	r21, 0x47	; 71
    4240:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4244:	18 16       	cp	r1, r24
    4246:	4c f5       	brge	.+82     	; 0x429a <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4248:	69 8d       	ldd	r22, Y+25	; 0x19
    424a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    424c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    424e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4250:	20 e0       	ldi	r18, 0x00	; 0
    4252:	30 e0       	ldi	r19, 0x00	; 0
    4254:	40 e2       	ldi	r20, 0x20	; 32
    4256:	51 e4       	ldi	r21, 0x41	; 65
    4258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    425c:	dc 01       	movw	r26, r24
    425e:	cb 01       	movw	r24, r22
    4260:	bc 01       	movw	r22, r24
    4262:	cd 01       	movw	r24, r26
    4264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4268:	dc 01       	movw	r26, r24
    426a:	cb 01       	movw	r24, r22
    426c:	9c 8b       	std	Y+20, r25	; 0x14
    426e:	8b 8b       	std	Y+19, r24	; 0x13
    4270:	0f c0       	rjmp	.+30     	; 0x4290 <LCD_sendCommand+0x7be>
    4272:	89 e1       	ldi	r24, 0x19	; 25
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	9a 8b       	std	Y+18, r25	; 0x12
    4278:	89 8b       	std	Y+17, r24	; 0x11
    427a:	89 89       	ldd	r24, Y+17	; 0x11
    427c:	9a 89       	ldd	r25, Y+18	; 0x12
    427e:	01 97       	sbiw	r24, 0x01	; 1
    4280:	f1 f7       	brne	.-4      	; 0x427e <LCD_sendCommand+0x7ac>
    4282:	9a 8b       	std	Y+18, r25	; 0x12
    4284:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4286:	8b 89       	ldd	r24, Y+19	; 0x13
    4288:	9c 89       	ldd	r25, Y+20	; 0x14
    428a:	01 97       	sbiw	r24, 0x01	; 1
    428c:	9c 8b       	std	Y+20, r25	; 0x14
    428e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4290:	8b 89       	ldd	r24, Y+19	; 0x13
    4292:	9c 89       	ldd	r25, Y+20	; 0x14
    4294:	00 97       	sbiw	r24, 0x00	; 0
    4296:	69 f7       	brne	.-38     	; 0x4272 <LCD_sendCommand+0x7a0>
    4298:	14 c0       	rjmp	.+40     	; 0x42c2 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    429a:	6d 89       	ldd	r22, Y+21	; 0x15
    429c:	7e 89       	ldd	r23, Y+22	; 0x16
    429e:	8f 89       	ldd	r24, Y+23	; 0x17
    42a0:	98 8d       	ldd	r25, Y+24	; 0x18
    42a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42a6:	dc 01       	movw	r26, r24
    42a8:	cb 01       	movw	r24, r22
    42aa:	9c 8b       	std	Y+20, r25	; 0x14
    42ac:	8b 8b       	std	Y+19, r24	; 0x13
    42ae:	8b 89       	ldd	r24, Y+19	; 0x13
    42b0:	9c 89       	ldd	r25, Y+20	; 0x14
    42b2:	98 8b       	std	Y+16, r25	; 0x10
    42b4:	8f 87       	std	Y+15, r24	; 0x0f
    42b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    42b8:	98 89       	ldd	r25, Y+16	; 0x10
    42ba:	01 97       	sbiw	r24, 0x01	; 1
    42bc:	f1 f7       	brne	.-4      	; 0x42ba <LCD_sendCommand+0x7e8>
    42be:	98 8b       	std	Y+16, r25	; 0x10
    42c0:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    42c2:	81 e0       	ldi	r24, 0x01	; 1
    42c4:	63 e0       	ldi	r22, 0x03	; 3
    42c6:	40 e0       	ldi	r20, 0x00	; 0
    42c8:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
    42cc:	80 e0       	ldi	r24, 0x00	; 0
    42ce:	90 e0       	ldi	r25, 0x00	; 0
    42d0:	a0 e8       	ldi	r26, 0x80	; 128
    42d2:	bf e3       	ldi	r27, 0x3F	; 63
    42d4:	8b 87       	std	Y+11, r24	; 0x0b
    42d6:	9c 87       	std	Y+12, r25	; 0x0c
    42d8:	ad 87       	std	Y+13, r26	; 0x0d
    42da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    42de:	7c 85       	ldd	r23, Y+12	; 0x0c
    42e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    42e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    42e4:	20 e0       	ldi	r18, 0x00	; 0
    42e6:	30 e0       	ldi	r19, 0x00	; 0
    42e8:	4a e7       	ldi	r20, 0x7A	; 122
    42ea:	53 e4       	ldi	r21, 0x43	; 67
    42ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42f0:	dc 01       	movw	r26, r24
    42f2:	cb 01       	movw	r24, r22
    42f4:	8f 83       	std	Y+7, r24	; 0x07
    42f6:	98 87       	std	Y+8, r25	; 0x08
    42f8:	a9 87       	std	Y+9, r26	; 0x09
    42fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42fc:	6f 81       	ldd	r22, Y+7	; 0x07
    42fe:	78 85       	ldd	r23, Y+8	; 0x08
    4300:	89 85       	ldd	r24, Y+9	; 0x09
    4302:	9a 85       	ldd	r25, Y+10	; 0x0a
    4304:	20 e0       	ldi	r18, 0x00	; 0
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	40 e8       	ldi	r20, 0x80	; 128
    430a:	5f e3       	ldi	r21, 0x3F	; 63
    430c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4310:	88 23       	and	r24, r24
    4312:	2c f4       	brge	.+10     	; 0x431e <LCD_sendCommand+0x84c>
		__ticks = 1;
    4314:	81 e0       	ldi	r24, 0x01	; 1
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	9e 83       	std	Y+6, r25	; 0x06
    431a:	8d 83       	std	Y+5, r24	; 0x05
    431c:	3f c0       	rjmp	.+126    	; 0x439c <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    431e:	6f 81       	ldd	r22, Y+7	; 0x07
    4320:	78 85       	ldd	r23, Y+8	; 0x08
    4322:	89 85       	ldd	r24, Y+9	; 0x09
    4324:	9a 85       	ldd	r25, Y+10	; 0x0a
    4326:	20 e0       	ldi	r18, 0x00	; 0
    4328:	3f ef       	ldi	r19, 0xFF	; 255
    432a:	4f e7       	ldi	r20, 0x7F	; 127
    432c:	57 e4       	ldi	r21, 0x47	; 71
    432e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4332:	18 16       	cp	r1, r24
    4334:	4c f5       	brge	.+82     	; 0x4388 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4336:	6b 85       	ldd	r22, Y+11	; 0x0b
    4338:	7c 85       	ldd	r23, Y+12	; 0x0c
    433a:	8d 85       	ldd	r24, Y+13	; 0x0d
    433c:	9e 85       	ldd	r25, Y+14	; 0x0e
    433e:	20 e0       	ldi	r18, 0x00	; 0
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	40 e2       	ldi	r20, 0x20	; 32
    4344:	51 e4       	ldi	r21, 0x41	; 65
    4346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    434a:	dc 01       	movw	r26, r24
    434c:	cb 01       	movw	r24, r22
    434e:	bc 01       	movw	r22, r24
    4350:	cd 01       	movw	r24, r26
    4352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4356:	dc 01       	movw	r26, r24
    4358:	cb 01       	movw	r24, r22
    435a:	9e 83       	std	Y+6, r25	; 0x06
    435c:	8d 83       	std	Y+5, r24	; 0x05
    435e:	0f c0       	rjmp	.+30     	; 0x437e <LCD_sendCommand+0x8ac>
    4360:	89 e1       	ldi	r24, 0x19	; 25
    4362:	90 e0       	ldi	r25, 0x00	; 0
    4364:	9c 83       	std	Y+4, r25	; 0x04
    4366:	8b 83       	std	Y+3, r24	; 0x03
    4368:	8b 81       	ldd	r24, Y+3	; 0x03
    436a:	9c 81       	ldd	r25, Y+4	; 0x04
    436c:	01 97       	sbiw	r24, 0x01	; 1
    436e:	f1 f7       	brne	.-4      	; 0x436c <LCD_sendCommand+0x89a>
    4370:	9c 83       	std	Y+4, r25	; 0x04
    4372:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4374:	8d 81       	ldd	r24, Y+5	; 0x05
    4376:	9e 81       	ldd	r25, Y+6	; 0x06
    4378:	01 97       	sbiw	r24, 0x01	; 1
    437a:	9e 83       	std	Y+6, r25	; 0x06
    437c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    437e:	8d 81       	ldd	r24, Y+5	; 0x05
    4380:	9e 81       	ldd	r25, Y+6	; 0x06
    4382:	00 97       	sbiw	r24, 0x00	; 0
    4384:	69 f7       	brne	.-38     	; 0x4360 <LCD_sendCommand+0x88e>
    4386:	14 c0       	rjmp	.+40     	; 0x43b0 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4388:	6f 81       	ldd	r22, Y+7	; 0x07
    438a:	78 85       	ldd	r23, Y+8	; 0x08
    438c:	89 85       	ldd	r24, Y+9	; 0x09
    438e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4394:	dc 01       	movw	r26, r24
    4396:	cb 01       	movw	r24, r22
    4398:	9e 83       	std	Y+6, r25	; 0x06
    439a:	8d 83       	std	Y+5, r24	; 0x05
    439c:	8d 81       	ldd	r24, Y+5	; 0x05
    439e:	9e 81       	ldd	r25, Y+6	; 0x06
    43a0:	9a 83       	std	Y+2, r25	; 0x02
    43a2:	89 83       	std	Y+1, r24	; 0x01
    43a4:	89 81       	ldd	r24, Y+1	; 0x01
    43a6:	9a 81       	ldd	r25, Y+2	; 0x02
    43a8:	01 97       	sbiw	r24, 0x01	; 1
    43aa:	f1 f7       	brne	.-4      	; 0x43a8 <LCD_sendCommand+0x8d6>
    43ac:	9a 83       	std	Y+2, r25	; 0x02
    43ae:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    43b0:	cd 59       	subi	r28, 0x9D	; 157
    43b2:	df 4f       	sbci	r29, 0xFF	; 255
    43b4:	0f b6       	in	r0, 0x3f	; 63
    43b6:	f8 94       	cli
    43b8:	de bf       	out	0x3e, r29	; 62
    43ba:	0f be       	out	0x3f, r0	; 63
    43bc:	cd bf       	out	0x3d, r28	; 61
    43be:	cf 91       	pop	r28
    43c0:	df 91       	pop	r29
    43c2:	1f 91       	pop	r17
    43c4:	0f 91       	pop	r16
    43c6:	08 95       	ret

000043c8 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    43c8:	0f 93       	push	r16
    43ca:	1f 93       	push	r17
    43cc:	df 93       	push	r29
    43ce:	cf 93       	push	r28
    43d0:	cd b7       	in	r28, 0x3d	; 61
    43d2:	de b7       	in	r29, 0x3e	; 62
    43d4:	c3 56       	subi	r28, 0x63	; 99
    43d6:	d0 40       	sbci	r29, 0x00	; 0
    43d8:	0f b6       	in	r0, 0x3f	; 63
    43da:	f8 94       	cli
    43dc:	de bf       	out	0x3e, r29	; 62
    43de:	0f be       	out	0x3f, r0	; 63
    43e0:	cd bf       	out	0x3d, r28	; 61
    43e2:	fe 01       	movw	r30, r28
    43e4:	ed 59       	subi	r30, 0x9D	; 157
    43e6:	ff 4f       	sbci	r31, 0xFF	; 255
    43e8:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    43ea:	81 e0       	ldi	r24, 0x01	; 1
    43ec:	62 e0       	ldi	r22, 0x02	; 2
    43ee:	41 e0       	ldi	r20, 0x01	; 1
    43f0:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
    43f4:	fe 01       	movw	r30, r28
    43f6:	e1 5a       	subi	r30, 0xA1	; 161
    43f8:	ff 4f       	sbci	r31, 0xFF	; 255
    43fa:	80 e0       	ldi	r24, 0x00	; 0
    43fc:	90 e0       	ldi	r25, 0x00	; 0
    43fe:	a0 e8       	ldi	r26, 0x80	; 128
    4400:	bf e3       	ldi	r27, 0x3F	; 63
    4402:	80 83       	st	Z, r24
    4404:	91 83       	std	Z+1, r25	; 0x01
    4406:	a2 83       	std	Z+2, r26	; 0x02
    4408:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    440a:	8e 01       	movw	r16, r28
    440c:	05 5a       	subi	r16, 0xA5	; 165
    440e:	1f 4f       	sbci	r17, 0xFF	; 255
    4410:	fe 01       	movw	r30, r28
    4412:	e1 5a       	subi	r30, 0xA1	; 161
    4414:	ff 4f       	sbci	r31, 0xFF	; 255
    4416:	60 81       	ld	r22, Z
    4418:	71 81       	ldd	r23, Z+1	; 0x01
    441a:	82 81       	ldd	r24, Z+2	; 0x02
    441c:	93 81       	ldd	r25, Z+3	; 0x03
    441e:	20 e0       	ldi	r18, 0x00	; 0
    4420:	30 e0       	ldi	r19, 0x00	; 0
    4422:	4a e7       	ldi	r20, 0x7A	; 122
    4424:	53 e4       	ldi	r21, 0x43	; 67
    4426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    442a:	dc 01       	movw	r26, r24
    442c:	cb 01       	movw	r24, r22
    442e:	f8 01       	movw	r30, r16
    4430:	80 83       	st	Z, r24
    4432:	91 83       	std	Z+1, r25	; 0x01
    4434:	a2 83       	std	Z+2, r26	; 0x02
    4436:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4438:	fe 01       	movw	r30, r28
    443a:	e5 5a       	subi	r30, 0xA5	; 165
    443c:	ff 4f       	sbci	r31, 0xFF	; 255
    443e:	60 81       	ld	r22, Z
    4440:	71 81       	ldd	r23, Z+1	; 0x01
    4442:	82 81       	ldd	r24, Z+2	; 0x02
    4444:	93 81       	ldd	r25, Z+3	; 0x03
    4446:	20 e0       	ldi	r18, 0x00	; 0
    4448:	30 e0       	ldi	r19, 0x00	; 0
    444a:	40 e8       	ldi	r20, 0x80	; 128
    444c:	5f e3       	ldi	r21, 0x3F	; 63
    444e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4452:	88 23       	and	r24, r24
    4454:	44 f4       	brge	.+16     	; 0x4466 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    4456:	fe 01       	movw	r30, r28
    4458:	e7 5a       	subi	r30, 0xA7	; 167
    445a:	ff 4f       	sbci	r31, 0xFF	; 255
    445c:	81 e0       	ldi	r24, 0x01	; 1
    445e:	90 e0       	ldi	r25, 0x00	; 0
    4460:	91 83       	std	Z+1, r25	; 0x01
    4462:	80 83       	st	Z, r24
    4464:	64 c0       	rjmp	.+200    	; 0x452e <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    4466:	fe 01       	movw	r30, r28
    4468:	e5 5a       	subi	r30, 0xA5	; 165
    446a:	ff 4f       	sbci	r31, 0xFF	; 255
    446c:	60 81       	ld	r22, Z
    446e:	71 81       	ldd	r23, Z+1	; 0x01
    4470:	82 81       	ldd	r24, Z+2	; 0x02
    4472:	93 81       	ldd	r25, Z+3	; 0x03
    4474:	20 e0       	ldi	r18, 0x00	; 0
    4476:	3f ef       	ldi	r19, 0xFF	; 255
    4478:	4f e7       	ldi	r20, 0x7F	; 127
    447a:	57 e4       	ldi	r21, 0x47	; 71
    447c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4480:	18 16       	cp	r1, r24
    4482:	0c f0       	brlt	.+2      	; 0x4486 <LCD_displayCharacter+0xbe>
    4484:	43 c0       	rjmp	.+134    	; 0x450c <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4486:	fe 01       	movw	r30, r28
    4488:	e1 5a       	subi	r30, 0xA1	; 161
    448a:	ff 4f       	sbci	r31, 0xFF	; 255
    448c:	60 81       	ld	r22, Z
    448e:	71 81       	ldd	r23, Z+1	; 0x01
    4490:	82 81       	ldd	r24, Z+2	; 0x02
    4492:	93 81       	ldd	r25, Z+3	; 0x03
    4494:	20 e0       	ldi	r18, 0x00	; 0
    4496:	30 e0       	ldi	r19, 0x00	; 0
    4498:	40 e2       	ldi	r20, 0x20	; 32
    449a:	51 e4       	ldi	r21, 0x41	; 65
    449c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44a0:	dc 01       	movw	r26, r24
    44a2:	cb 01       	movw	r24, r22
    44a4:	8e 01       	movw	r16, r28
    44a6:	07 5a       	subi	r16, 0xA7	; 167
    44a8:	1f 4f       	sbci	r17, 0xFF	; 255
    44aa:	bc 01       	movw	r22, r24
    44ac:	cd 01       	movw	r24, r26
    44ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44b2:	dc 01       	movw	r26, r24
    44b4:	cb 01       	movw	r24, r22
    44b6:	f8 01       	movw	r30, r16
    44b8:	91 83       	std	Z+1, r25	; 0x01
    44ba:	80 83       	st	Z, r24
    44bc:	1f c0       	rjmp	.+62     	; 0x44fc <LCD_displayCharacter+0x134>
    44be:	fe 01       	movw	r30, r28
    44c0:	e9 5a       	subi	r30, 0xA9	; 169
    44c2:	ff 4f       	sbci	r31, 0xFF	; 255
    44c4:	89 e1       	ldi	r24, 0x19	; 25
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	91 83       	std	Z+1, r25	; 0x01
    44ca:	80 83       	st	Z, r24
    44cc:	fe 01       	movw	r30, r28
    44ce:	e9 5a       	subi	r30, 0xA9	; 169
    44d0:	ff 4f       	sbci	r31, 0xFF	; 255
    44d2:	80 81       	ld	r24, Z
    44d4:	91 81       	ldd	r25, Z+1	; 0x01
    44d6:	01 97       	sbiw	r24, 0x01	; 1
    44d8:	f1 f7       	brne	.-4      	; 0x44d6 <LCD_displayCharacter+0x10e>
    44da:	fe 01       	movw	r30, r28
    44dc:	e9 5a       	subi	r30, 0xA9	; 169
    44de:	ff 4f       	sbci	r31, 0xFF	; 255
    44e0:	91 83       	std	Z+1, r25	; 0x01
    44e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44e4:	de 01       	movw	r26, r28
    44e6:	a7 5a       	subi	r26, 0xA7	; 167
    44e8:	bf 4f       	sbci	r27, 0xFF	; 255
    44ea:	fe 01       	movw	r30, r28
    44ec:	e7 5a       	subi	r30, 0xA7	; 167
    44ee:	ff 4f       	sbci	r31, 0xFF	; 255
    44f0:	80 81       	ld	r24, Z
    44f2:	91 81       	ldd	r25, Z+1	; 0x01
    44f4:	01 97       	sbiw	r24, 0x01	; 1
    44f6:	11 96       	adiw	r26, 0x01	; 1
    44f8:	9c 93       	st	X, r25
    44fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44fc:	fe 01       	movw	r30, r28
    44fe:	e7 5a       	subi	r30, 0xA7	; 167
    4500:	ff 4f       	sbci	r31, 0xFF	; 255
    4502:	80 81       	ld	r24, Z
    4504:	91 81       	ldd	r25, Z+1	; 0x01
    4506:	00 97       	sbiw	r24, 0x00	; 0
    4508:	d1 f6       	brne	.-76     	; 0x44be <LCD_displayCharacter+0xf6>
    450a:	27 c0       	rjmp	.+78     	; 0x455a <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    450c:	8e 01       	movw	r16, r28
    450e:	07 5a       	subi	r16, 0xA7	; 167
    4510:	1f 4f       	sbci	r17, 0xFF	; 255
    4512:	fe 01       	movw	r30, r28
    4514:	e5 5a       	subi	r30, 0xA5	; 165
    4516:	ff 4f       	sbci	r31, 0xFF	; 255
    4518:	60 81       	ld	r22, Z
    451a:	71 81       	ldd	r23, Z+1	; 0x01
    451c:	82 81       	ldd	r24, Z+2	; 0x02
    451e:	93 81       	ldd	r25, Z+3	; 0x03
    4520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4524:	dc 01       	movw	r26, r24
    4526:	cb 01       	movw	r24, r22
    4528:	f8 01       	movw	r30, r16
    452a:	91 83       	std	Z+1, r25	; 0x01
    452c:	80 83       	st	Z, r24
    452e:	de 01       	movw	r26, r28
    4530:	ab 5a       	subi	r26, 0xAB	; 171
    4532:	bf 4f       	sbci	r27, 0xFF	; 255
    4534:	fe 01       	movw	r30, r28
    4536:	e7 5a       	subi	r30, 0xA7	; 167
    4538:	ff 4f       	sbci	r31, 0xFF	; 255
    453a:	80 81       	ld	r24, Z
    453c:	91 81       	ldd	r25, Z+1	; 0x01
    453e:	8d 93       	st	X+, r24
    4540:	9c 93       	st	X, r25
    4542:	fe 01       	movw	r30, r28
    4544:	eb 5a       	subi	r30, 0xAB	; 171
    4546:	ff 4f       	sbci	r31, 0xFF	; 255
    4548:	80 81       	ld	r24, Z
    454a:	91 81       	ldd	r25, Z+1	; 0x01
    454c:	01 97       	sbiw	r24, 0x01	; 1
    454e:	f1 f7       	brne	.-4      	; 0x454c <LCD_displayCharacter+0x184>
    4550:	fe 01       	movw	r30, r28
    4552:	eb 5a       	subi	r30, 0xAB	; 171
    4554:	ff 4f       	sbci	r31, 0xFF	; 255
    4556:	91 83       	std	Z+1, r25	; 0x01
    4558:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    455a:	81 e0       	ldi	r24, 0x01	; 1
    455c:	63 e0       	ldi	r22, 0x03	; 3
    455e:	41 e0       	ldi	r20, 0x01	; 1
    4560:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
    4564:	fe 01       	movw	r30, r28
    4566:	ef 5a       	subi	r30, 0xAF	; 175
    4568:	ff 4f       	sbci	r31, 0xFF	; 255
    456a:	80 e0       	ldi	r24, 0x00	; 0
    456c:	90 e0       	ldi	r25, 0x00	; 0
    456e:	a0 e8       	ldi	r26, 0x80	; 128
    4570:	bf e3       	ldi	r27, 0x3F	; 63
    4572:	80 83       	st	Z, r24
    4574:	91 83       	std	Z+1, r25	; 0x01
    4576:	a2 83       	std	Z+2, r26	; 0x02
    4578:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    457a:	8e 01       	movw	r16, r28
    457c:	03 5b       	subi	r16, 0xB3	; 179
    457e:	1f 4f       	sbci	r17, 0xFF	; 255
    4580:	fe 01       	movw	r30, r28
    4582:	ef 5a       	subi	r30, 0xAF	; 175
    4584:	ff 4f       	sbci	r31, 0xFF	; 255
    4586:	60 81       	ld	r22, Z
    4588:	71 81       	ldd	r23, Z+1	; 0x01
    458a:	82 81       	ldd	r24, Z+2	; 0x02
    458c:	93 81       	ldd	r25, Z+3	; 0x03
    458e:	20 e0       	ldi	r18, 0x00	; 0
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	4a e7       	ldi	r20, 0x7A	; 122
    4594:	53 e4       	ldi	r21, 0x43	; 67
    4596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    459a:	dc 01       	movw	r26, r24
    459c:	cb 01       	movw	r24, r22
    459e:	f8 01       	movw	r30, r16
    45a0:	80 83       	st	Z, r24
    45a2:	91 83       	std	Z+1, r25	; 0x01
    45a4:	a2 83       	std	Z+2, r26	; 0x02
    45a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45a8:	fe 01       	movw	r30, r28
    45aa:	e3 5b       	subi	r30, 0xB3	; 179
    45ac:	ff 4f       	sbci	r31, 0xFF	; 255
    45ae:	60 81       	ld	r22, Z
    45b0:	71 81       	ldd	r23, Z+1	; 0x01
    45b2:	82 81       	ldd	r24, Z+2	; 0x02
    45b4:	93 81       	ldd	r25, Z+3	; 0x03
    45b6:	20 e0       	ldi	r18, 0x00	; 0
    45b8:	30 e0       	ldi	r19, 0x00	; 0
    45ba:	40 e8       	ldi	r20, 0x80	; 128
    45bc:	5f e3       	ldi	r21, 0x3F	; 63
    45be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    45c2:	88 23       	and	r24, r24
    45c4:	44 f4       	brge	.+16     	; 0x45d6 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    45c6:	fe 01       	movw	r30, r28
    45c8:	e5 5b       	subi	r30, 0xB5	; 181
    45ca:	ff 4f       	sbci	r31, 0xFF	; 255
    45cc:	81 e0       	ldi	r24, 0x01	; 1
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	91 83       	std	Z+1, r25	; 0x01
    45d2:	80 83       	st	Z, r24
    45d4:	64 c0       	rjmp	.+200    	; 0x469e <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    45d6:	fe 01       	movw	r30, r28
    45d8:	e3 5b       	subi	r30, 0xB3	; 179
    45da:	ff 4f       	sbci	r31, 0xFF	; 255
    45dc:	60 81       	ld	r22, Z
    45de:	71 81       	ldd	r23, Z+1	; 0x01
    45e0:	82 81       	ldd	r24, Z+2	; 0x02
    45e2:	93 81       	ldd	r25, Z+3	; 0x03
    45e4:	20 e0       	ldi	r18, 0x00	; 0
    45e6:	3f ef       	ldi	r19, 0xFF	; 255
    45e8:	4f e7       	ldi	r20, 0x7F	; 127
    45ea:	57 e4       	ldi	r21, 0x47	; 71
    45ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    45f0:	18 16       	cp	r1, r24
    45f2:	0c f0       	brlt	.+2      	; 0x45f6 <LCD_displayCharacter+0x22e>
    45f4:	43 c0       	rjmp	.+134    	; 0x467c <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45f6:	fe 01       	movw	r30, r28
    45f8:	ef 5a       	subi	r30, 0xAF	; 175
    45fa:	ff 4f       	sbci	r31, 0xFF	; 255
    45fc:	60 81       	ld	r22, Z
    45fe:	71 81       	ldd	r23, Z+1	; 0x01
    4600:	82 81       	ldd	r24, Z+2	; 0x02
    4602:	93 81       	ldd	r25, Z+3	; 0x03
    4604:	20 e0       	ldi	r18, 0x00	; 0
    4606:	30 e0       	ldi	r19, 0x00	; 0
    4608:	40 e2       	ldi	r20, 0x20	; 32
    460a:	51 e4       	ldi	r21, 0x41	; 65
    460c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4610:	dc 01       	movw	r26, r24
    4612:	cb 01       	movw	r24, r22
    4614:	8e 01       	movw	r16, r28
    4616:	05 5b       	subi	r16, 0xB5	; 181
    4618:	1f 4f       	sbci	r17, 0xFF	; 255
    461a:	bc 01       	movw	r22, r24
    461c:	cd 01       	movw	r24, r26
    461e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4622:	dc 01       	movw	r26, r24
    4624:	cb 01       	movw	r24, r22
    4626:	f8 01       	movw	r30, r16
    4628:	91 83       	std	Z+1, r25	; 0x01
    462a:	80 83       	st	Z, r24
    462c:	1f c0       	rjmp	.+62     	; 0x466c <LCD_displayCharacter+0x2a4>
    462e:	fe 01       	movw	r30, r28
    4630:	e7 5b       	subi	r30, 0xB7	; 183
    4632:	ff 4f       	sbci	r31, 0xFF	; 255
    4634:	89 e1       	ldi	r24, 0x19	; 25
    4636:	90 e0       	ldi	r25, 0x00	; 0
    4638:	91 83       	std	Z+1, r25	; 0x01
    463a:	80 83       	st	Z, r24
    463c:	fe 01       	movw	r30, r28
    463e:	e7 5b       	subi	r30, 0xB7	; 183
    4640:	ff 4f       	sbci	r31, 0xFF	; 255
    4642:	80 81       	ld	r24, Z
    4644:	91 81       	ldd	r25, Z+1	; 0x01
    4646:	01 97       	sbiw	r24, 0x01	; 1
    4648:	f1 f7       	brne	.-4      	; 0x4646 <LCD_displayCharacter+0x27e>
    464a:	fe 01       	movw	r30, r28
    464c:	e7 5b       	subi	r30, 0xB7	; 183
    464e:	ff 4f       	sbci	r31, 0xFF	; 255
    4650:	91 83       	std	Z+1, r25	; 0x01
    4652:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4654:	de 01       	movw	r26, r28
    4656:	a5 5b       	subi	r26, 0xB5	; 181
    4658:	bf 4f       	sbci	r27, 0xFF	; 255
    465a:	fe 01       	movw	r30, r28
    465c:	e5 5b       	subi	r30, 0xB5	; 181
    465e:	ff 4f       	sbci	r31, 0xFF	; 255
    4660:	80 81       	ld	r24, Z
    4662:	91 81       	ldd	r25, Z+1	; 0x01
    4664:	01 97       	sbiw	r24, 0x01	; 1
    4666:	11 96       	adiw	r26, 0x01	; 1
    4668:	9c 93       	st	X, r25
    466a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    466c:	fe 01       	movw	r30, r28
    466e:	e5 5b       	subi	r30, 0xB5	; 181
    4670:	ff 4f       	sbci	r31, 0xFF	; 255
    4672:	80 81       	ld	r24, Z
    4674:	91 81       	ldd	r25, Z+1	; 0x01
    4676:	00 97       	sbiw	r24, 0x00	; 0
    4678:	d1 f6       	brne	.-76     	; 0x462e <LCD_displayCharacter+0x266>
    467a:	27 c0       	rjmp	.+78     	; 0x46ca <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    467c:	8e 01       	movw	r16, r28
    467e:	05 5b       	subi	r16, 0xB5	; 181
    4680:	1f 4f       	sbci	r17, 0xFF	; 255
    4682:	fe 01       	movw	r30, r28
    4684:	e3 5b       	subi	r30, 0xB3	; 179
    4686:	ff 4f       	sbci	r31, 0xFF	; 255
    4688:	60 81       	ld	r22, Z
    468a:	71 81       	ldd	r23, Z+1	; 0x01
    468c:	82 81       	ldd	r24, Z+2	; 0x02
    468e:	93 81       	ldd	r25, Z+3	; 0x03
    4690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4694:	dc 01       	movw	r26, r24
    4696:	cb 01       	movw	r24, r22
    4698:	f8 01       	movw	r30, r16
    469a:	91 83       	std	Z+1, r25	; 0x01
    469c:	80 83       	st	Z, r24
    469e:	de 01       	movw	r26, r28
    46a0:	a9 5b       	subi	r26, 0xB9	; 185
    46a2:	bf 4f       	sbci	r27, 0xFF	; 255
    46a4:	fe 01       	movw	r30, r28
    46a6:	e5 5b       	subi	r30, 0xB5	; 181
    46a8:	ff 4f       	sbci	r31, 0xFF	; 255
    46aa:	80 81       	ld	r24, Z
    46ac:	91 81       	ldd	r25, Z+1	; 0x01
    46ae:	8d 93       	st	X+, r24
    46b0:	9c 93       	st	X, r25
    46b2:	fe 01       	movw	r30, r28
    46b4:	e9 5b       	subi	r30, 0xB9	; 185
    46b6:	ff 4f       	sbci	r31, 0xFF	; 255
    46b8:	80 81       	ld	r24, Z
    46ba:	91 81       	ldd	r25, Z+1	; 0x01
    46bc:	01 97       	sbiw	r24, 0x01	; 1
    46be:	f1 f7       	brne	.-4      	; 0x46bc <LCD_displayCharacter+0x2f4>
    46c0:	fe 01       	movw	r30, r28
    46c2:	e9 5b       	subi	r30, 0xB9	; 185
    46c4:	ff 4f       	sbci	r31, 0xFF	; 255
    46c6:	91 83       	std	Z+1, r25	; 0x01
    46c8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    46ca:	fe 01       	movw	r30, r28
    46cc:	ed 59       	subi	r30, 0x9D	; 157
    46ce:	ff 4f       	sbci	r31, 0xFF	; 255
    46d0:	80 81       	ld	r24, Z
    46d2:	88 2f       	mov	r24, r24
    46d4:	90 e0       	ldi	r25, 0x00	; 0
    46d6:	80 71       	andi	r24, 0x10	; 16
    46d8:	90 70       	andi	r25, 0x00	; 0
    46da:	95 95       	asr	r25
    46dc:	87 95       	ror	r24
    46de:	95 95       	asr	r25
    46e0:	87 95       	ror	r24
    46e2:	95 95       	asr	r25
    46e4:	87 95       	ror	r24
    46e6:	95 95       	asr	r25
    46e8:	87 95       	ror	r24
    46ea:	98 2f       	mov	r25, r24
    46ec:	81 e0       	ldi	r24, 0x01	; 1
    46ee:	64 e0       	ldi	r22, 0x04	; 4
    46f0:	49 2f       	mov	r20, r25
    46f2:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    46f6:	fe 01       	movw	r30, r28
    46f8:	ed 59       	subi	r30, 0x9D	; 157
    46fa:	ff 4f       	sbci	r31, 0xFF	; 255
    46fc:	80 81       	ld	r24, Z
    46fe:	88 2f       	mov	r24, r24
    4700:	90 e0       	ldi	r25, 0x00	; 0
    4702:	80 72       	andi	r24, 0x20	; 32
    4704:	90 70       	andi	r25, 0x00	; 0
    4706:	95 95       	asr	r25
    4708:	87 95       	ror	r24
    470a:	95 95       	asr	r25
    470c:	87 95       	ror	r24
    470e:	95 95       	asr	r25
    4710:	87 95       	ror	r24
    4712:	95 95       	asr	r25
    4714:	87 95       	ror	r24
    4716:	95 95       	asr	r25
    4718:	87 95       	ror	r24
    471a:	98 2f       	mov	r25, r24
    471c:	81 e0       	ldi	r24, 0x01	; 1
    471e:	65 e0       	ldi	r22, 0x05	; 5
    4720:	49 2f       	mov	r20, r25
    4722:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    4726:	fe 01       	movw	r30, r28
    4728:	ed 59       	subi	r30, 0x9D	; 157
    472a:	ff 4f       	sbci	r31, 0xFF	; 255
    472c:	80 81       	ld	r24, Z
    472e:	88 2f       	mov	r24, r24
    4730:	90 e0       	ldi	r25, 0x00	; 0
    4732:	80 74       	andi	r24, 0x40	; 64
    4734:	90 70       	andi	r25, 0x00	; 0
    4736:	08 2e       	mov	r0, r24
    4738:	89 2f       	mov	r24, r25
    473a:	00 0c       	add	r0, r0
    473c:	88 1f       	adc	r24, r24
    473e:	99 0b       	sbc	r25, r25
    4740:	00 0c       	add	r0, r0
    4742:	88 1f       	adc	r24, r24
    4744:	99 1f       	adc	r25, r25
    4746:	98 2f       	mov	r25, r24
    4748:	81 e0       	ldi	r24, 0x01	; 1
    474a:	66 e0       	ldi	r22, 0x06	; 6
    474c:	49 2f       	mov	r20, r25
    474e:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    4752:	fe 01       	movw	r30, r28
    4754:	ed 59       	subi	r30, 0x9D	; 157
    4756:	ff 4f       	sbci	r31, 0xFF	; 255
    4758:	80 81       	ld	r24, Z
    475a:	98 2f       	mov	r25, r24
    475c:	99 1f       	adc	r25, r25
    475e:	99 27       	eor	r25, r25
    4760:	99 1f       	adc	r25, r25
    4762:	81 e0       	ldi	r24, 0x01	; 1
    4764:	67 e0       	ldi	r22, 0x07	; 7
    4766:	49 2f       	mov	r20, r25
    4768:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
    476c:	fe 01       	movw	r30, r28
    476e:	ed 5b       	subi	r30, 0xBD	; 189
    4770:	ff 4f       	sbci	r31, 0xFF	; 255
    4772:	80 e0       	ldi	r24, 0x00	; 0
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	a0 e8       	ldi	r26, 0x80	; 128
    4778:	bf e3       	ldi	r27, 0x3F	; 63
    477a:	80 83       	st	Z, r24
    477c:	91 83       	std	Z+1, r25	; 0x01
    477e:	a2 83       	std	Z+2, r26	; 0x02
    4780:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4782:	8e 01       	movw	r16, r28
    4784:	01 5c       	subi	r16, 0xC1	; 193
    4786:	1f 4f       	sbci	r17, 0xFF	; 255
    4788:	fe 01       	movw	r30, r28
    478a:	ed 5b       	subi	r30, 0xBD	; 189
    478c:	ff 4f       	sbci	r31, 0xFF	; 255
    478e:	60 81       	ld	r22, Z
    4790:	71 81       	ldd	r23, Z+1	; 0x01
    4792:	82 81       	ldd	r24, Z+2	; 0x02
    4794:	93 81       	ldd	r25, Z+3	; 0x03
    4796:	20 e0       	ldi	r18, 0x00	; 0
    4798:	30 e0       	ldi	r19, 0x00	; 0
    479a:	4a e7       	ldi	r20, 0x7A	; 122
    479c:	53 e4       	ldi	r21, 0x43	; 67
    479e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47a2:	dc 01       	movw	r26, r24
    47a4:	cb 01       	movw	r24, r22
    47a6:	f8 01       	movw	r30, r16
    47a8:	80 83       	st	Z, r24
    47aa:	91 83       	std	Z+1, r25	; 0x01
    47ac:	a2 83       	std	Z+2, r26	; 0x02
    47ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    47b0:	fe 01       	movw	r30, r28
    47b2:	ff 96       	adiw	r30, 0x3f	; 63
    47b4:	60 81       	ld	r22, Z
    47b6:	71 81       	ldd	r23, Z+1	; 0x01
    47b8:	82 81       	ldd	r24, Z+2	; 0x02
    47ba:	93 81       	ldd	r25, Z+3	; 0x03
    47bc:	20 e0       	ldi	r18, 0x00	; 0
    47be:	30 e0       	ldi	r19, 0x00	; 0
    47c0:	40 e8       	ldi	r20, 0x80	; 128
    47c2:	5f e3       	ldi	r21, 0x3F	; 63
    47c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    47c8:	88 23       	and	r24, r24
    47ca:	2c f4       	brge	.+10     	; 0x47d6 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    47cc:	81 e0       	ldi	r24, 0x01	; 1
    47ce:	90 e0       	ldi	r25, 0x00	; 0
    47d0:	9e af       	std	Y+62, r25	; 0x3e
    47d2:	8d af       	std	Y+61, r24	; 0x3d
    47d4:	46 c0       	rjmp	.+140    	; 0x4862 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    47d6:	fe 01       	movw	r30, r28
    47d8:	ff 96       	adiw	r30, 0x3f	; 63
    47da:	60 81       	ld	r22, Z
    47dc:	71 81       	ldd	r23, Z+1	; 0x01
    47de:	82 81       	ldd	r24, Z+2	; 0x02
    47e0:	93 81       	ldd	r25, Z+3	; 0x03
    47e2:	20 e0       	ldi	r18, 0x00	; 0
    47e4:	3f ef       	ldi	r19, 0xFF	; 255
    47e6:	4f e7       	ldi	r20, 0x7F	; 127
    47e8:	57 e4       	ldi	r21, 0x47	; 71
    47ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    47ee:	18 16       	cp	r1, r24
    47f0:	64 f5       	brge	.+88     	; 0x484a <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47f2:	fe 01       	movw	r30, r28
    47f4:	ed 5b       	subi	r30, 0xBD	; 189
    47f6:	ff 4f       	sbci	r31, 0xFF	; 255
    47f8:	60 81       	ld	r22, Z
    47fa:	71 81       	ldd	r23, Z+1	; 0x01
    47fc:	82 81       	ldd	r24, Z+2	; 0x02
    47fe:	93 81       	ldd	r25, Z+3	; 0x03
    4800:	20 e0       	ldi	r18, 0x00	; 0
    4802:	30 e0       	ldi	r19, 0x00	; 0
    4804:	40 e2       	ldi	r20, 0x20	; 32
    4806:	51 e4       	ldi	r21, 0x41	; 65
    4808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    480c:	dc 01       	movw	r26, r24
    480e:	cb 01       	movw	r24, r22
    4810:	bc 01       	movw	r22, r24
    4812:	cd 01       	movw	r24, r26
    4814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4818:	dc 01       	movw	r26, r24
    481a:	cb 01       	movw	r24, r22
    481c:	9e af       	std	Y+62, r25	; 0x3e
    481e:	8d af       	std	Y+61, r24	; 0x3d
    4820:	0f c0       	rjmp	.+30     	; 0x4840 <LCD_displayCharacter+0x478>
    4822:	89 e1       	ldi	r24, 0x19	; 25
    4824:	90 e0       	ldi	r25, 0x00	; 0
    4826:	9c af       	std	Y+60, r25	; 0x3c
    4828:	8b af       	std	Y+59, r24	; 0x3b
    482a:	8b ad       	ldd	r24, Y+59	; 0x3b
    482c:	9c ad       	ldd	r25, Y+60	; 0x3c
    482e:	01 97       	sbiw	r24, 0x01	; 1
    4830:	f1 f7       	brne	.-4      	; 0x482e <LCD_displayCharacter+0x466>
    4832:	9c af       	std	Y+60, r25	; 0x3c
    4834:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4836:	8d ad       	ldd	r24, Y+61	; 0x3d
    4838:	9e ad       	ldd	r25, Y+62	; 0x3e
    483a:	01 97       	sbiw	r24, 0x01	; 1
    483c:	9e af       	std	Y+62, r25	; 0x3e
    483e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4840:	8d ad       	ldd	r24, Y+61	; 0x3d
    4842:	9e ad       	ldd	r25, Y+62	; 0x3e
    4844:	00 97       	sbiw	r24, 0x00	; 0
    4846:	69 f7       	brne	.-38     	; 0x4822 <LCD_displayCharacter+0x45a>
    4848:	16 c0       	rjmp	.+44     	; 0x4876 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    484a:	fe 01       	movw	r30, r28
    484c:	ff 96       	adiw	r30, 0x3f	; 63
    484e:	60 81       	ld	r22, Z
    4850:	71 81       	ldd	r23, Z+1	; 0x01
    4852:	82 81       	ldd	r24, Z+2	; 0x02
    4854:	93 81       	ldd	r25, Z+3	; 0x03
    4856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    485a:	dc 01       	movw	r26, r24
    485c:	cb 01       	movw	r24, r22
    485e:	9e af       	std	Y+62, r25	; 0x3e
    4860:	8d af       	std	Y+61, r24	; 0x3d
    4862:	8d ad       	ldd	r24, Y+61	; 0x3d
    4864:	9e ad       	ldd	r25, Y+62	; 0x3e
    4866:	9a af       	std	Y+58, r25	; 0x3a
    4868:	89 af       	std	Y+57, r24	; 0x39
    486a:	89 ad       	ldd	r24, Y+57	; 0x39
    486c:	9a ad       	ldd	r25, Y+58	; 0x3a
    486e:	01 97       	sbiw	r24, 0x01	; 1
    4870:	f1 f7       	brne	.-4      	; 0x486e <LCD_displayCharacter+0x4a6>
    4872:	9a af       	std	Y+58, r25	; 0x3a
    4874:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    4876:	81 e0       	ldi	r24, 0x01	; 1
    4878:	63 e0       	ldi	r22, 0x03	; 3
    487a:	40 e0       	ldi	r20, 0x00	; 0
    487c:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
    4880:	80 e0       	ldi	r24, 0x00	; 0
    4882:	90 e0       	ldi	r25, 0x00	; 0
    4884:	a0 e8       	ldi	r26, 0x80	; 128
    4886:	bf e3       	ldi	r27, 0x3F	; 63
    4888:	8d ab       	std	Y+53, r24	; 0x35
    488a:	9e ab       	std	Y+54, r25	; 0x36
    488c:	af ab       	std	Y+55, r26	; 0x37
    488e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4890:	6d a9       	ldd	r22, Y+53	; 0x35
    4892:	7e a9       	ldd	r23, Y+54	; 0x36
    4894:	8f a9       	ldd	r24, Y+55	; 0x37
    4896:	98 ad       	ldd	r25, Y+56	; 0x38
    4898:	20 e0       	ldi	r18, 0x00	; 0
    489a:	30 e0       	ldi	r19, 0x00	; 0
    489c:	4a e7       	ldi	r20, 0x7A	; 122
    489e:	53 e4       	ldi	r21, 0x43	; 67
    48a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48a4:	dc 01       	movw	r26, r24
    48a6:	cb 01       	movw	r24, r22
    48a8:	89 ab       	std	Y+49, r24	; 0x31
    48aa:	9a ab       	std	Y+50, r25	; 0x32
    48ac:	ab ab       	std	Y+51, r26	; 0x33
    48ae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    48b0:	69 a9       	ldd	r22, Y+49	; 0x31
    48b2:	7a a9       	ldd	r23, Y+50	; 0x32
    48b4:	8b a9       	ldd	r24, Y+51	; 0x33
    48b6:	9c a9       	ldd	r25, Y+52	; 0x34
    48b8:	20 e0       	ldi	r18, 0x00	; 0
    48ba:	30 e0       	ldi	r19, 0x00	; 0
    48bc:	40 e8       	ldi	r20, 0x80	; 128
    48be:	5f e3       	ldi	r21, 0x3F	; 63
    48c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    48c4:	88 23       	and	r24, r24
    48c6:	2c f4       	brge	.+10     	; 0x48d2 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    48c8:	81 e0       	ldi	r24, 0x01	; 1
    48ca:	90 e0       	ldi	r25, 0x00	; 0
    48cc:	98 ab       	std	Y+48, r25	; 0x30
    48ce:	8f a7       	std	Y+47, r24	; 0x2f
    48d0:	3f c0       	rjmp	.+126    	; 0x4950 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    48d2:	69 a9       	ldd	r22, Y+49	; 0x31
    48d4:	7a a9       	ldd	r23, Y+50	; 0x32
    48d6:	8b a9       	ldd	r24, Y+51	; 0x33
    48d8:	9c a9       	ldd	r25, Y+52	; 0x34
    48da:	20 e0       	ldi	r18, 0x00	; 0
    48dc:	3f ef       	ldi	r19, 0xFF	; 255
    48de:	4f e7       	ldi	r20, 0x7F	; 127
    48e0:	57 e4       	ldi	r21, 0x47	; 71
    48e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    48e6:	18 16       	cp	r1, r24
    48e8:	4c f5       	brge	.+82     	; 0x493c <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48ea:	6d a9       	ldd	r22, Y+53	; 0x35
    48ec:	7e a9       	ldd	r23, Y+54	; 0x36
    48ee:	8f a9       	ldd	r24, Y+55	; 0x37
    48f0:	98 ad       	ldd	r25, Y+56	; 0x38
    48f2:	20 e0       	ldi	r18, 0x00	; 0
    48f4:	30 e0       	ldi	r19, 0x00	; 0
    48f6:	40 e2       	ldi	r20, 0x20	; 32
    48f8:	51 e4       	ldi	r21, 0x41	; 65
    48fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48fe:	dc 01       	movw	r26, r24
    4900:	cb 01       	movw	r24, r22
    4902:	bc 01       	movw	r22, r24
    4904:	cd 01       	movw	r24, r26
    4906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    490a:	dc 01       	movw	r26, r24
    490c:	cb 01       	movw	r24, r22
    490e:	98 ab       	std	Y+48, r25	; 0x30
    4910:	8f a7       	std	Y+47, r24	; 0x2f
    4912:	0f c0       	rjmp	.+30     	; 0x4932 <LCD_displayCharacter+0x56a>
    4914:	89 e1       	ldi	r24, 0x19	; 25
    4916:	90 e0       	ldi	r25, 0x00	; 0
    4918:	9e a7       	std	Y+46, r25	; 0x2e
    491a:	8d a7       	std	Y+45, r24	; 0x2d
    491c:	8d a5       	ldd	r24, Y+45	; 0x2d
    491e:	9e a5       	ldd	r25, Y+46	; 0x2e
    4920:	01 97       	sbiw	r24, 0x01	; 1
    4922:	f1 f7       	brne	.-4      	; 0x4920 <LCD_displayCharacter+0x558>
    4924:	9e a7       	std	Y+46, r25	; 0x2e
    4926:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4928:	8f a5       	ldd	r24, Y+47	; 0x2f
    492a:	98 a9       	ldd	r25, Y+48	; 0x30
    492c:	01 97       	sbiw	r24, 0x01	; 1
    492e:	98 ab       	std	Y+48, r25	; 0x30
    4930:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4932:	8f a5       	ldd	r24, Y+47	; 0x2f
    4934:	98 a9       	ldd	r25, Y+48	; 0x30
    4936:	00 97       	sbiw	r24, 0x00	; 0
    4938:	69 f7       	brne	.-38     	; 0x4914 <LCD_displayCharacter+0x54c>
    493a:	14 c0       	rjmp	.+40     	; 0x4964 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    493c:	69 a9       	ldd	r22, Y+49	; 0x31
    493e:	7a a9       	ldd	r23, Y+50	; 0x32
    4940:	8b a9       	ldd	r24, Y+51	; 0x33
    4942:	9c a9       	ldd	r25, Y+52	; 0x34
    4944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4948:	dc 01       	movw	r26, r24
    494a:	cb 01       	movw	r24, r22
    494c:	98 ab       	std	Y+48, r25	; 0x30
    494e:	8f a7       	std	Y+47, r24	; 0x2f
    4950:	8f a5       	ldd	r24, Y+47	; 0x2f
    4952:	98 a9       	ldd	r25, Y+48	; 0x30
    4954:	9c a7       	std	Y+44, r25	; 0x2c
    4956:	8b a7       	std	Y+43, r24	; 0x2b
    4958:	8b a5       	ldd	r24, Y+43	; 0x2b
    495a:	9c a5       	ldd	r25, Y+44	; 0x2c
    495c:	01 97       	sbiw	r24, 0x01	; 1
    495e:	f1 f7       	brne	.-4      	; 0x495c <LCD_displayCharacter+0x594>
    4960:	9c a7       	std	Y+44, r25	; 0x2c
    4962:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    4964:	81 e0       	ldi	r24, 0x01	; 1
    4966:	63 e0       	ldi	r22, 0x03	; 3
    4968:	41 e0       	ldi	r20, 0x01	; 1
    496a:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
    496e:	80 e0       	ldi	r24, 0x00	; 0
    4970:	90 e0       	ldi	r25, 0x00	; 0
    4972:	a0 e8       	ldi	r26, 0x80	; 128
    4974:	bf e3       	ldi	r27, 0x3F	; 63
    4976:	8f a3       	std	Y+39, r24	; 0x27
    4978:	98 a7       	std	Y+40, r25	; 0x28
    497a:	a9 a7       	std	Y+41, r26	; 0x29
    497c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    497e:	6f a1       	ldd	r22, Y+39	; 0x27
    4980:	78 a5       	ldd	r23, Y+40	; 0x28
    4982:	89 a5       	ldd	r24, Y+41	; 0x29
    4984:	9a a5       	ldd	r25, Y+42	; 0x2a
    4986:	20 e0       	ldi	r18, 0x00	; 0
    4988:	30 e0       	ldi	r19, 0x00	; 0
    498a:	4a e7       	ldi	r20, 0x7A	; 122
    498c:	53 e4       	ldi	r21, 0x43	; 67
    498e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4992:	dc 01       	movw	r26, r24
    4994:	cb 01       	movw	r24, r22
    4996:	8b a3       	std	Y+35, r24	; 0x23
    4998:	9c a3       	std	Y+36, r25	; 0x24
    499a:	ad a3       	std	Y+37, r26	; 0x25
    499c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    499e:	6b a1       	ldd	r22, Y+35	; 0x23
    49a0:	7c a1       	ldd	r23, Y+36	; 0x24
    49a2:	8d a1       	ldd	r24, Y+37	; 0x25
    49a4:	9e a1       	ldd	r25, Y+38	; 0x26
    49a6:	20 e0       	ldi	r18, 0x00	; 0
    49a8:	30 e0       	ldi	r19, 0x00	; 0
    49aa:	40 e8       	ldi	r20, 0x80	; 128
    49ac:	5f e3       	ldi	r21, 0x3F	; 63
    49ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    49b2:	88 23       	and	r24, r24
    49b4:	2c f4       	brge	.+10     	; 0x49c0 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    49b6:	81 e0       	ldi	r24, 0x01	; 1
    49b8:	90 e0       	ldi	r25, 0x00	; 0
    49ba:	9a a3       	std	Y+34, r25	; 0x22
    49bc:	89 a3       	std	Y+33, r24	; 0x21
    49be:	3f c0       	rjmp	.+126    	; 0x4a3e <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    49c0:	6b a1       	ldd	r22, Y+35	; 0x23
    49c2:	7c a1       	ldd	r23, Y+36	; 0x24
    49c4:	8d a1       	ldd	r24, Y+37	; 0x25
    49c6:	9e a1       	ldd	r25, Y+38	; 0x26
    49c8:	20 e0       	ldi	r18, 0x00	; 0
    49ca:	3f ef       	ldi	r19, 0xFF	; 255
    49cc:	4f e7       	ldi	r20, 0x7F	; 127
    49ce:	57 e4       	ldi	r21, 0x47	; 71
    49d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    49d4:	18 16       	cp	r1, r24
    49d6:	4c f5       	brge	.+82     	; 0x4a2a <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49d8:	6f a1       	ldd	r22, Y+39	; 0x27
    49da:	78 a5       	ldd	r23, Y+40	; 0x28
    49dc:	89 a5       	ldd	r24, Y+41	; 0x29
    49de:	9a a5       	ldd	r25, Y+42	; 0x2a
    49e0:	20 e0       	ldi	r18, 0x00	; 0
    49e2:	30 e0       	ldi	r19, 0x00	; 0
    49e4:	40 e2       	ldi	r20, 0x20	; 32
    49e6:	51 e4       	ldi	r21, 0x41	; 65
    49e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49ec:	dc 01       	movw	r26, r24
    49ee:	cb 01       	movw	r24, r22
    49f0:	bc 01       	movw	r22, r24
    49f2:	cd 01       	movw	r24, r26
    49f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49f8:	dc 01       	movw	r26, r24
    49fa:	cb 01       	movw	r24, r22
    49fc:	9a a3       	std	Y+34, r25	; 0x22
    49fe:	89 a3       	std	Y+33, r24	; 0x21
    4a00:	0f c0       	rjmp	.+30     	; 0x4a20 <LCD_displayCharacter+0x658>
    4a02:	89 e1       	ldi	r24, 0x19	; 25
    4a04:	90 e0       	ldi	r25, 0x00	; 0
    4a06:	98 a3       	std	Y+32, r25	; 0x20
    4a08:	8f 8f       	std	Y+31, r24	; 0x1f
    4a0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4a0c:	98 a1       	ldd	r25, Y+32	; 0x20
    4a0e:	01 97       	sbiw	r24, 0x01	; 1
    4a10:	f1 f7       	brne	.-4      	; 0x4a0e <LCD_displayCharacter+0x646>
    4a12:	98 a3       	std	Y+32, r25	; 0x20
    4a14:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a16:	89 a1       	ldd	r24, Y+33	; 0x21
    4a18:	9a a1       	ldd	r25, Y+34	; 0x22
    4a1a:	01 97       	sbiw	r24, 0x01	; 1
    4a1c:	9a a3       	std	Y+34, r25	; 0x22
    4a1e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a20:	89 a1       	ldd	r24, Y+33	; 0x21
    4a22:	9a a1       	ldd	r25, Y+34	; 0x22
    4a24:	00 97       	sbiw	r24, 0x00	; 0
    4a26:	69 f7       	brne	.-38     	; 0x4a02 <LCD_displayCharacter+0x63a>
    4a28:	14 c0       	rjmp	.+40     	; 0x4a52 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a2a:	6b a1       	ldd	r22, Y+35	; 0x23
    4a2c:	7c a1       	ldd	r23, Y+36	; 0x24
    4a2e:	8d a1       	ldd	r24, Y+37	; 0x25
    4a30:	9e a1       	ldd	r25, Y+38	; 0x26
    4a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a36:	dc 01       	movw	r26, r24
    4a38:	cb 01       	movw	r24, r22
    4a3a:	9a a3       	std	Y+34, r25	; 0x22
    4a3c:	89 a3       	std	Y+33, r24	; 0x21
    4a3e:	89 a1       	ldd	r24, Y+33	; 0x21
    4a40:	9a a1       	ldd	r25, Y+34	; 0x22
    4a42:	9e 8f       	std	Y+30, r25	; 0x1e
    4a44:	8d 8f       	std	Y+29, r24	; 0x1d
    4a46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4a48:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4a4a:	01 97       	sbiw	r24, 0x01	; 1
    4a4c:	f1 f7       	brne	.-4      	; 0x4a4a <LCD_displayCharacter+0x682>
    4a4e:	9e 8f       	std	Y+30, r25	; 0x1e
    4a50:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    4a52:	fe 01       	movw	r30, r28
    4a54:	ed 59       	subi	r30, 0x9D	; 157
    4a56:	ff 4f       	sbci	r31, 0xFF	; 255
    4a58:	80 81       	ld	r24, Z
    4a5a:	98 2f       	mov	r25, r24
    4a5c:	91 70       	andi	r25, 0x01	; 1
    4a5e:	81 e0       	ldi	r24, 0x01	; 1
    4a60:	64 e0       	ldi	r22, 0x04	; 4
    4a62:	49 2f       	mov	r20, r25
    4a64:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    4a68:	fe 01       	movw	r30, r28
    4a6a:	ed 59       	subi	r30, 0x9D	; 157
    4a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6e:	80 81       	ld	r24, Z
    4a70:	88 2f       	mov	r24, r24
    4a72:	90 e0       	ldi	r25, 0x00	; 0
    4a74:	82 70       	andi	r24, 0x02	; 2
    4a76:	90 70       	andi	r25, 0x00	; 0
    4a78:	95 95       	asr	r25
    4a7a:	87 95       	ror	r24
    4a7c:	98 2f       	mov	r25, r24
    4a7e:	81 e0       	ldi	r24, 0x01	; 1
    4a80:	65 e0       	ldi	r22, 0x05	; 5
    4a82:	49 2f       	mov	r20, r25
    4a84:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    4a88:	fe 01       	movw	r30, r28
    4a8a:	ed 59       	subi	r30, 0x9D	; 157
    4a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a8e:	80 81       	ld	r24, Z
    4a90:	88 2f       	mov	r24, r24
    4a92:	90 e0       	ldi	r25, 0x00	; 0
    4a94:	84 70       	andi	r24, 0x04	; 4
    4a96:	90 70       	andi	r25, 0x00	; 0
    4a98:	95 95       	asr	r25
    4a9a:	87 95       	ror	r24
    4a9c:	95 95       	asr	r25
    4a9e:	87 95       	ror	r24
    4aa0:	98 2f       	mov	r25, r24
    4aa2:	81 e0       	ldi	r24, 0x01	; 1
    4aa4:	66 e0       	ldi	r22, 0x06	; 6
    4aa6:	49 2f       	mov	r20, r25
    4aa8:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    4aac:	fe 01       	movw	r30, r28
    4aae:	ed 59       	subi	r30, 0x9D	; 157
    4ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab2:	80 81       	ld	r24, Z
    4ab4:	88 2f       	mov	r24, r24
    4ab6:	90 e0       	ldi	r25, 0x00	; 0
    4ab8:	88 70       	andi	r24, 0x08	; 8
    4aba:	90 70       	andi	r25, 0x00	; 0
    4abc:	95 95       	asr	r25
    4abe:	87 95       	ror	r24
    4ac0:	95 95       	asr	r25
    4ac2:	87 95       	ror	r24
    4ac4:	95 95       	asr	r25
    4ac6:	87 95       	ror	r24
    4ac8:	98 2f       	mov	r25, r24
    4aca:	81 e0       	ldi	r24, 0x01	; 1
    4acc:	67 e0       	ldi	r22, 0x07	; 7
    4ace:	49 2f       	mov	r20, r25
    4ad0:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
    4ad4:	80 e0       	ldi	r24, 0x00	; 0
    4ad6:	90 e0       	ldi	r25, 0x00	; 0
    4ad8:	a0 e8       	ldi	r26, 0x80	; 128
    4ada:	bf e3       	ldi	r27, 0x3F	; 63
    4adc:	89 8f       	std	Y+25, r24	; 0x19
    4ade:	9a 8f       	std	Y+26, r25	; 0x1a
    4ae0:	ab 8f       	std	Y+27, r26	; 0x1b
    4ae2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ae4:	69 8d       	ldd	r22, Y+25	; 0x19
    4ae6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ae8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4aea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4aec:	20 e0       	ldi	r18, 0x00	; 0
    4aee:	30 e0       	ldi	r19, 0x00	; 0
    4af0:	4a e7       	ldi	r20, 0x7A	; 122
    4af2:	53 e4       	ldi	r21, 0x43	; 67
    4af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4af8:	dc 01       	movw	r26, r24
    4afa:	cb 01       	movw	r24, r22
    4afc:	8d 8b       	std	Y+21, r24	; 0x15
    4afe:	9e 8b       	std	Y+22, r25	; 0x16
    4b00:	af 8b       	std	Y+23, r26	; 0x17
    4b02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4b04:	6d 89       	ldd	r22, Y+21	; 0x15
    4b06:	7e 89       	ldd	r23, Y+22	; 0x16
    4b08:	8f 89       	ldd	r24, Y+23	; 0x17
    4b0a:	98 8d       	ldd	r25, Y+24	; 0x18
    4b0c:	20 e0       	ldi	r18, 0x00	; 0
    4b0e:	30 e0       	ldi	r19, 0x00	; 0
    4b10:	40 e8       	ldi	r20, 0x80	; 128
    4b12:	5f e3       	ldi	r21, 0x3F	; 63
    4b14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b18:	88 23       	and	r24, r24
    4b1a:	2c f4       	brge	.+10     	; 0x4b26 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    4b1c:	81 e0       	ldi	r24, 0x01	; 1
    4b1e:	90 e0       	ldi	r25, 0x00	; 0
    4b20:	9c 8b       	std	Y+20, r25	; 0x14
    4b22:	8b 8b       	std	Y+19, r24	; 0x13
    4b24:	3f c0       	rjmp	.+126    	; 0x4ba4 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    4b26:	6d 89       	ldd	r22, Y+21	; 0x15
    4b28:	7e 89       	ldd	r23, Y+22	; 0x16
    4b2a:	8f 89       	ldd	r24, Y+23	; 0x17
    4b2c:	98 8d       	ldd	r25, Y+24	; 0x18
    4b2e:	20 e0       	ldi	r18, 0x00	; 0
    4b30:	3f ef       	ldi	r19, 0xFF	; 255
    4b32:	4f e7       	ldi	r20, 0x7F	; 127
    4b34:	57 e4       	ldi	r21, 0x47	; 71
    4b36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b3a:	18 16       	cp	r1, r24
    4b3c:	4c f5       	brge	.+82     	; 0x4b90 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b3e:	69 8d       	ldd	r22, Y+25	; 0x19
    4b40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b46:	20 e0       	ldi	r18, 0x00	; 0
    4b48:	30 e0       	ldi	r19, 0x00	; 0
    4b4a:	40 e2       	ldi	r20, 0x20	; 32
    4b4c:	51 e4       	ldi	r21, 0x41	; 65
    4b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b52:	dc 01       	movw	r26, r24
    4b54:	cb 01       	movw	r24, r22
    4b56:	bc 01       	movw	r22, r24
    4b58:	cd 01       	movw	r24, r26
    4b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b5e:	dc 01       	movw	r26, r24
    4b60:	cb 01       	movw	r24, r22
    4b62:	9c 8b       	std	Y+20, r25	; 0x14
    4b64:	8b 8b       	std	Y+19, r24	; 0x13
    4b66:	0f c0       	rjmp	.+30     	; 0x4b86 <LCD_displayCharacter+0x7be>
    4b68:	89 e1       	ldi	r24, 0x19	; 25
    4b6a:	90 e0       	ldi	r25, 0x00	; 0
    4b6c:	9a 8b       	std	Y+18, r25	; 0x12
    4b6e:	89 8b       	std	Y+17, r24	; 0x11
    4b70:	89 89       	ldd	r24, Y+17	; 0x11
    4b72:	9a 89       	ldd	r25, Y+18	; 0x12
    4b74:	01 97       	sbiw	r24, 0x01	; 1
    4b76:	f1 f7       	brne	.-4      	; 0x4b74 <LCD_displayCharacter+0x7ac>
    4b78:	9a 8b       	std	Y+18, r25	; 0x12
    4b7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b7c:	8b 89       	ldd	r24, Y+19	; 0x13
    4b7e:	9c 89       	ldd	r25, Y+20	; 0x14
    4b80:	01 97       	sbiw	r24, 0x01	; 1
    4b82:	9c 8b       	std	Y+20, r25	; 0x14
    4b84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b86:	8b 89       	ldd	r24, Y+19	; 0x13
    4b88:	9c 89       	ldd	r25, Y+20	; 0x14
    4b8a:	00 97       	sbiw	r24, 0x00	; 0
    4b8c:	69 f7       	brne	.-38     	; 0x4b68 <LCD_displayCharacter+0x7a0>
    4b8e:	14 c0       	rjmp	.+40     	; 0x4bb8 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b90:	6d 89       	ldd	r22, Y+21	; 0x15
    4b92:	7e 89       	ldd	r23, Y+22	; 0x16
    4b94:	8f 89       	ldd	r24, Y+23	; 0x17
    4b96:	98 8d       	ldd	r25, Y+24	; 0x18
    4b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b9c:	dc 01       	movw	r26, r24
    4b9e:	cb 01       	movw	r24, r22
    4ba0:	9c 8b       	std	Y+20, r25	; 0x14
    4ba2:	8b 8b       	std	Y+19, r24	; 0x13
    4ba4:	8b 89       	ldd	r24, Y+19	; 0x13
    4ba6:	9c 89       	ldd	r25, Y+20	; 0x14
    4ba8:	98 8b       	std	Y+16, r25	; 0x10
    4baa:	8f 87       	std	Y+15, r24	; 0x0f
    4bac:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bae:	98 89       	ldd	r25, Y+16	; 0x10
    4bb0:	01 97       	sbiw	r24, 0x01	; 1
    4bb2:	f1 f7       	brne	.-4      	; 0x4bb0 <LCD_displayCharacter+0x7e8>
    4bb4:	98 8b       	std	Y+16, r25	; 0x10
    4bb6:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    4bb8:	81 e0       	ldi	r24, 0x01	; 1
    4bba:	63 e0       	ldi	r22, 0x03	; 3
    4bbc:	40 e0       	ldi	r20, 0x00	; 0
    4bbe:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <GPIO_writePin>
    4bc2:	80 e0       	ldi	r24, 0x00	; 0
    4bc4:	90 e0       	ldi	r25, 0x00	; 0
    4bc6:	a0 e8       	ldi	r26, 0x80	; 128
    4bc8:	bf e3       	ldi	r27, 0x3F	; 63
    4bca:	8b 87       	std	Y+11, r24	; 0x0b
    4bcc:	9c 87       	std	Y+12, r25	; 0x0c
    4bce:	ad 87       	std	Y+13, r26	; 0x0d
    4bd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bda:	20 e0       	ldi	r18, 0x00	; 0
    4bdc:	30 e0       	ldi	r19, 0x00	; 0
    4bde:	4a e7       	ldi	r20, 0x7A	; 122
    4be0:	53 e4       	ldi	r21, 0x43	; 67
    4be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4be6:	dc 01       	movw	r26, r24
    4be8:	cb 01       	movw	r24, r22
    4bea:	8f 83       	std	Y+7, r24	; 0x07
    4bec:	98 87       	std	Y+8, r25	; 0x08
    4bee:	a9 87       	std	Y+9, r26	; 0x09
    4bf0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4bf2:	6f 81       	ldd	r22, Y+7	; 0x07
    4bf4:	78 85       	ldd	r23, Y+8	; 0x08
    4bf6:	89 85       	ldd	r24, Y+9	; 0x09
    4bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bfa:	20 e0       	ldi	r18, 0x00	; 0
    4bfc:	30 e0       	ldi	r19, 0x00	; 0
    4bfe:	40 e8       	ldi	r20, 0x80	; 128
    4c00:	5f e3       	ldi	r21, 0x3F	; 63
    4c02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c06:	88 23       	and	r24, r24
    4c08:	2c f4       	brge	.+10     	; 0x4c14 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    4c0a:	81 e0       	ldi	r24, 0x01	; 1
    4c0c:	90 e0       	ldi	r25, 0x00	; 0
    4c0e:	9e 83       	std	Y+6, r25	; 0x06
    4c10:	8d 83       	std	Y+5, r24	; 0x05
    4c12:	3f c0       	rjmp	.+126    	; 0x4c92 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    4c14:	6f 81       	ldd	r22, Y+7	; 0x07
    4c16:	78 85       	ldd	r23, Y+8	; 0x08
    4c18:	89 85       	ldd	r24, Y+9	; 0x09
    4c1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c1c:	20 e0       	ldi	r18, 0x00	; 0
    4c1e:	3f ef       	ldi	r19, 0xFF	; 255
    4c20:	4f e7       	ldi	r20, 0x7F	; 127
    4c22:	57 e4       	ldi	r21, 0x47	; 71
    4c24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c28:	18 16       	cp	r1, r24
    4c2a:	4c f5       	brge	.+82     	; 0x4c7e <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c30:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c32:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c34:	20 e0       	ldi	r18, 0x00	; 0
    4c36:	30 e0       	ldi	r19, 0x00	; 0
    4c38:	40 e2       	ldi	r20, 0x20	; 32
    4c3a:	51 e4       	ldi	r21, 0x41	; 65
    4c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c40:	dc 01       	movw	r26, r24
    4c42:	cb 01       	movw	r24, r22
    4c44:	bc 01       	movw	r22, r24
    4c46:	cd 01       	movw	r24, r26
    4c48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c4c:	dc 01       	movw	r26, r24
    4c4e:	cb 01       	movw	r24, r22
    4c50:	9e 83       	std	Y+6, r25	; 0x06
    4c52:	8d 83       	std	Y+5, r24	; 0x05
    4c54:	0f c0       	rjmp	.+30     	; 0x4c74 <LCD_displayCharacter+0x8ac>
    4c56:	89 e1       	ldi	r24, 0x19	; 25
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	9c 83       	std	Y+4, r25	; 0x04
    4c5c:	8b 83       	std	Y+3, r24	; 0x03
    4c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    4c60:	9c 81       	ldd	r25, Y+4	; 0x04
    4c62:	01 97       	sbiw	r24, 0x01	; 1
    4c64:	f1 f7       	brne	.-4      	; 0x4c62 <LCD_displayCharacter+0x89a>
    4c66:	9c 83       	std	Y+4, r25	; 0x04
    4c68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c6c:	9e 81       	ldd	r25, Y+6	; 0x06
    4c6e:	01 97       	sbiw	r24, 0x01	; 1
    4c70:	9e 83       	std	Y+6, r25	; 0x06
    4c72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c74:	8d 81       	ldd	r24, Y+5	; 0x05
    4c76:	9e 81       	ldd	r25, Y+6	; 0x06
    4c78:	00 97       	sbiw	r24, 0x00	; 0
    4c7a:	69 f7       	brne	.-38     	; 0x4c56 <LCD_displayCharacter+0x88e>
    4c7c:	14 c0       	rjmp	.+40     	; 0x4ca6 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c7e:	6f 81       	ldd	r22, Y+7	; 0x07
    4c80:	78 85       	ldd	r23, Y+8	; 0x08
    4c82:	89 85       	ldd	r24, Y+9	; 0x09
    4c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c8a:	dc 01       	movw	r26, r24
    4c8c:	cb 01       	movw	r24, r22
    4c8e:	9e 83       	std	Y+6, r25	; 0x06
    4c90:	8d 83       	std	Y+5, r24	; 0x05
    4c92:	8d 81       	ldd	r24, Y+5	; 0x05
    4c94:	9e 81       	ldd	r25, Y+6	; 0x06
    4c96:	9a 83       	std	Y+2, r25	; 0x02
    4c98:	89 83       	std	Y+1, r24	; 0x01
    4c9a:	89 81       	ldd	r24, Y+1	; 0x01
    4c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c9e:	01 97       	sbiw	r24, 0x01	; 1
    4ca0:	f1 f7       	brne	.-4      	; 0x4c9e <LCD_displayCharacter+0x8d6>
    4ca2:	9a 83       	std	Y+2, r25	; 0x02
    4ca4:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    4ca6:	cd 59       	subi	r28, 0x9D	; 157
    4ca8:	df 4f       	sbci	r29, 0xFF	; 255
    4caa:	0f b6       	in	r0, 0x3f	; 63
    4cac:	f8 94       	cli
    4cae:	de bf       	out	0x3e, r29	; 62
    4cb0:	0f be       	out	0x3f, r0	; 63
    4cb2:	cd bf       	out	0x3d, r28	; 61
    4cb4:	cf 91       	pop	r28
    4cb6:	df 91       	pop	r29
    4cb8:	1f 91       	pop	r17
    4cba:	0f 91       	pop	r16
    4cbc:	08 95       	ret

00004cbe <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    4cbe:	df 93       	push	r29
    4cc0:	cf 93       	push	r28
    4cc2:	00 d0       	rcall	.+0      	; 0x4cc4 <LCD_displayString+0x6>
    4cc4:	0f 92       	push	r0
    4cc6:	cd b7       	in	r28, 0x3d	; 61
    4cc8:	de b7       	in	r29, 0x3e	; 62
    4cca:	9b 83       	std	Y+3, r25	; 0x03
    4ccc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    4cce:	19 82       	std	Y+1, r1	; 0x01
    4cd0:	0e c0       	rjmp	.+28     	; 0x4cee <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    4cd2:	89 81       	ldd	r24, Y+1	; 0x01
    4cd4:	28 2f       	mov	r18, r24
    4cd6:	30 e0       	ldi	r19, 0x00	; 0
    4cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    4cda:	9b 81       	ldd	r25, Y+3	; 0x03
    4cdc:	fc 01       	movw	r30, r24
    4cde:	e2 0f       	add	r30, r18
    4ce0:	f3 1f       	adc	r31, r19
    4ce2:	80 81       	ld	r24, Z
    4ce4:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <LCD_displayCharacter>
		i++;
    4ce8:	89 81       	ldd	r24, Y+1	; 0x01
    4cea:	8f 5f       	subi	r24, 0xFF	; 255
    4cec:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    4cee:	89 81       	ldd	r24, Y+1	; 0x01
    4cf0:	28 2f       	mov	r18, r24
    4cf2:	30 e0       	ldi	r19, 0x00	; 0
    4cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    4cf6:	9b 81       	ldd	r25, Y+3	; 0x03
    4cf8:	fc 01       	movw	r30, r24
    4cfa:	e2 0f       	add	r30, r18
    4cfc:	f3 1f       	adc	r31, r19
    4cfe:	80 81       	ld	r24, Z
    4d00:	88 23       	and	r24, r24
    4d02:	39 f7       	brne	.-50     	; 0x4cd2 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    4d04:	0f 90       	pop	r0
    4d06:	0f 90       	pop	r0
    4d08:	0f 90       	pop	r0
    4d0a:	cf 91       	pop	r28
    4d0c:	df 91       	pop	r29
    4d0e:	08 95       	ret

00004d10 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    4d10:	df 93       	push	r29
    4d12:	cf 93       	push	r28
    4d14:	00 d0       	rcall	.+0      	; 0x4d16 <LCD_moveCursor+0x6>
    4d16:	00 d0       	rcall	.+0      	; 0x4d18 <LCD_moveCursor+0x8>
    4d18:	0f 92       	push	r0
    4d1a:	cd b7       	in	r28, 0x3d	; 61
    4d1c:	de b7       	in	r29, 0x3e	; 62
    4d1e:	8a 83       	std	Y+2, r24	; 0x02
    4d20:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    4d22:	8a 81       	ldd	r24, Y+2	; 0x02
    4d24:	28 2f       	mov	r18, r24
    4d26:	30 e0       	ldi	r19, 0x00	; 0
    4d28:	3d 83       	std	Y+5, r19	; 0x05
    4d2a:	2c 83       	std	Y+4, r18	; 0x04
    4d2c:	8c 81       	ldd	r24, Y+4	; 0x04
    4d2e:	9d 81       	ldd	r25, Y+5	; 0x05
    4d30:	81 30       	cpi	r24, 0x01	; 1
    4d32:	91 05       	cpc	r25, r1
    4d34:	c1 f0       	breq	.+48     	; 0x4d66 <LCD_moveCursor+0x56>
    4d36:	2c 81       	ldd	r18, Y+4	; 0x04
    4d38:	3d 81       	ldd	r19, Y+5	; 0x05
    4d3a:	22 30       	cpi	r18, 0x02	; 2
    4d3c:	31 05       	cpc	r19, r1
    4d3e:	2c f4       	brge	.+10     	; 0x4d4a <LCD_moveCursor+0x3a>
    4d40:	8c 81       	ldd	r24, Y+4	; 0x04
    4d42:	9d 81       	ldd	r25, Y+5	; 0x05
    4d44:	00 97       	sbiw	r24, 0x00	; 0
    4d46:	61 f0       	breq	.+24     	; 0x4d60 <LCD_moveCursor+0x50>
    4d48:	19 c0       	rjmp	.+50     	; 0x4d7c <LCD_moveCursor+0x6c>
    4d4a:	2c 81       	ldd	r18, Y+4	; 0x04
    4d4c:	3d 81       	ldd	r19, Y+5	; 0x05
    4d4e:	22 30       	cpi	r18, 0x02	; 2
    4d50:	31 05       	cpc	r19, r1
    4d52:	69 f0       	breq	.+26     	; 0x4d6e <LCD_moveCursor+0x5e>
    4d54:	8c 81       	ldd	r24, Y+4	; 0x04
    4d56:	9d 81       	ldd	r25, Y+5	; 0x05
    4d58:	83 30       	cpi	r24, 0x03	; 3
    4d5a:	91 05       	cpc	r25, r1
    4d5c:	61 f0       	breq	.+24     	; 0x4d76 <LCD_moveCursor+0x66>
    4d5e:	0e c0       	rjmp	.+28     	; 0x4d7c <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    4d60:	8b 81       	ldd	r24, Y+3	; 0x03
    4d62:	89 83       	std	Y+1, r24	; 0x01
    4d64:	0b c0       	rjmp	.+22     	; 0x4d7c <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    4d66:	8b 81       	ldd	r24, Y+3	; 0x03
    4d68:	80 5c       	subi	r24, 0xC0	; 192
    4d6a:	89 83       	std	Y+1, r24	; 0x01
    4d6c:	07 c0       	rjmp	.+14     	; 0x4d7c <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    4d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d70:	80 5f       	subi	r24, 0xF0	; 240
    4d72:	89 83       	std	Y+1, r24	; 0x01
    4d74:	03 c0       	rjmp	.+6      	; 0x4d7c <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    4d76:	8b 81       	ldd	r24, Y+3	; 0x03
    4d78:	80 5b       	subi	r24, 0xB0	; 176
    4d7a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    4d7c:	89 81       	ldd	r24, Y+1	; 0x01
    4d7e:	80 68       	ori	r24, 0x80	; 128
    4d80:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <LCD_sendCommand>
}
    4d84:	0f 90       	pop	r0
    4d86:	0f 90       	pop	r0
    4d88:	0f 90       	pop	r0
    4d8a:	0f 90       	pop	r0
    4d8c:	0f 90       	pop	r0
    4d8e:	cf 91       	pop	r28
    4d90:	df 91       	pop	r29
    4d92:	08 95       	ret

00004d94 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    4d94:	df 93       	push	r29
    4d96:	cf 93       	push	r28
    4d98:	00 d0       	rcall	.+0      	; 0x4d9a <LCD_displayStringRowColumn+0x6>
    4d9a:	00 d0       	rcall	.+0      	; 0x4d9c <LCD_displayStringRowColumn+0x8>
    4d9c:	cd b7       	in	r28, 0x3d	; 61
    4d9e:	de b7       	in	r29, 0x3e	; 62
    4da0:	89 83       	std	Y+1, r24	; 0x01
    4da2:	6a 83       	std	Y+2, r22	; 0x02
    4da4:	5c 83       	std	Y+4, r21	; 0x04
    4da6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    4da8:	89 81       	ldd	r24, Y+1	; 0x01
    4daa:	6a 81       	ldd	r22, Y+2	; 0x02
    4dac:	0e 94 88 26 	call	0x4d10	; 0x4d10 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    4db0:	8b 81       	ldd	r24, Y+3	; 0x03
    4db2:	9c 81       	ldd	r25, Y+4	; 0x04
    4db4:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <LCD_displayString>
}
    4db8:	0f 90       	pop	r0
    4dba:	0f 90       	pop	r0
    4dbc:	0f 90       	pop	r0
    4dbe:	0f 90       	pop	r0
    4dc0:	cf 91       	pop	r28
    4dc2:	df 91       	pop	r29
    4dc4:	08 95       	ret

00004dc6 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    4dc6:	df 93       	push	r29
    4dc8:	cf 93       	push	r28
    4dca:	cd b7       	in	r28, 0x3d	; 61
    4dcc:	de b7       	in	r29, 0x3e	; 62
    4dce:	62 97       	sbiw	r28, 0x12	; 18
    4dd0:	0f b6       	in	r0, 0x3f	; 63
    4dd2:	f8 94       	cli
    4dd4:	de bf       	out	0x3e, r29	; 62
    4dd6:	0f be       	out	0x3f, r0	; 63
    4dd8:	cd bf       	out	0x3d, r28	; 61
    4dda:	9a 8b       	std	Y+18, r25	; 0x12
    4ddc:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    4dde:	89 89       	ldd	r24, Y+17	; 0x11
    4de0:	9a 89       	ldd	r25, Y+18	; 0x12
    4de2:	9e 01       	movw	r18, r28
    4de4:	2f 5f       	subi	r18, 0xFF	; 255
    4de6:	3f 4f       	sbci	r19, 0xFF	; 255
    4de8:	b9 01       	movw	r22, r18
    4dea:	4a e0       	ldi	r20, 0x0A	; 10
    4dec:	50 e0       	ldi	r21, 0x00	; 0
    4dee:	0e 94 cc 29 	call	0x5398	; 0x5398 <itoa>
   LCD_displayString(buff); /* Display the string */
    4df2:	ce 01       	movw	r24, r28
    4df4:	01 96       	adiw	r24, 0x01	; 1
    4df6:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <LCD_displayString>
}
    4dfa:	62 96       	adiw	r28, 0x12	; 18
    4dfc:	0f b6       	in	r0, 0x3f	; 63
    4dfe:	f8 94       	cli
    4e00:	de bf       	out	0x3e, r29	; 62
    4e02:	0f be       	out	0x3f, r0	; 63
    4e04:	cd bf       	out	0x3d, r28	; 61
    4e06:	cf 91       	pop	r28
    4e08:	df 91       	pop	r29
    4e0a:	08 95       	ret

00004e0c <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    4e0c:	df 93       	push	r29
    4e0e:	cf 93       	push	r28
    4e10:	cd b7       	in	r28, 0x3d	; 61
    4e12:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    4e14:	81 e0       	ldi	r24, 0x01	; 1
    4e16:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <LCD_sendCommand>
}
    4e1a:	cf 91       	pop	r28
    4e1c:	df 91       	pop	r29
    4e1e:	08 95       	ret

00004e20 <__vector_9>:

static volatile void (*g_CallBackPtr)(void) = NULL_PTR;	//global pointer to function to be used for the cb


ISR(TIMER1_OVF_vect)
{
    4e20:	1f 92       	push	r1
    4e22:	0f 92       	push	r0
    4e24:	0f b6       	in	r0, 0x3f	; 63
    4e26:	0f 92       	push	r0
    4e28:	11 24       	eor	r1, r1
    4e2a:	2f 93       	push	r18
    4e2c:	3f 93       	push	r19
    4e2e:	4f 93       	push	r20
    4e30:	5f 93       	push	r21
    4e32:	6f 93       	push	r22
    4e34:	7f 93       	push	r23
    4e36:	8f 93       	push	r24
    4e38:	9f 93       	push	r25
    4e3a:	af 93       	push	r26
    4e3c:	bf 93       	push	r27
    4e3e:	ef 93       	push	r30
    4e40:	ff 93       	push	r31
    4e42:	df 93       	push	r29
    4e44:	cf 93       	push	r28
    4e46:	cd b7       	in	r28, 0x3d	; 61
    4e48:	de b7       	in	r29, 0x3e	; 62
	g_CallBackPtr();
    4e4a:	e0 91 86 01 	lds	r30, 0x0186
    4e4e:	f0 91 87 01 	lds	r31, 0x0187
    4e52:	09 95       	icall
}
    4e54:	cf 91       	pop	r28
    4e56:	df 91       	pop	r29
    4e58:	ff 91       	pop	r31
    4e5a:	ef 91       	pop	r30
    4e5c:	bf 91       	pop	r27
    4e5e:	af 91       	pop	r26
    4e60:	9f 91       	pop	r25
    4e62:	8f 91       	pop	r24
    4e64:	7f 91       	pop	r23
    4e66:	6f 91       	pop	r22
    4e68:	5f 91       	pop	r21
    4e6a:	4f 91       	pop	r20
    4e6c:	3f 91       	pop	r19
    4e6e:	2f 91       	pop	r18
    4e70:	0f 90       	pop	r0
    4e72:	0f be       	out	0x3f, r0	; 63
    4e74:	0f 90       	pop	r0
    4e76:	1f 90       	pop	r1
    4e78:	18 95       	reti

00004e7a <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    4e7a:	1f 92       	push	r1
    4e7c:	0f 92       	push	r0
    4e7e:	0f b6       	in	r0, 0x3f	; 63
    4e80:	0f 92       	push	r0
    4e82:	11 24       	eor	r1, r1
    4e84:	2f 93       	push	r18
    4e86:	3f 93       	push	r19
    4e88:	4f 93       	push	r20
    4e8a:	5f 93       	push	r21
    4e8c:	6f 93       	push	r22
    4e8e:	7f 93       	push	r23
    4e90:	8f 93       	push	r24
    4e92:	9f 93       	push	r25
    4e94:	af 93       	push	r26
    4e96:	bf 93       	push	r27
    4e98:	ef 93       	push	r30
    4e9a:	ff 93       	push	r31
    4e9c:	df 93       	push	r29
    4e9e:	cf 93       	push	r28
    4ea0:	cd b7       	in	r28, 0x3d	; 61
    4ea2:	de b7       	in	r29, 0x3e	; 62
	g_CallBackPtr();
    4ea4:	e0 91 86 01 	lds	r30, 0x0186
    4ea8:	f0 91 87 01 	lds	r31, 0x0187
    4eac:	09 95       	icall
}
    4eae:	cf 91       	pop	r28
    4eb0:	df 91       	pop	r29
    4eb2:	ff 91       	pop	r31
    4eb4:	ef 91       	pop	r30
    4eb6:	bf 91       	pop	r27
    4eb8:	af 91       	pop	r26
    4eba:	9f 91       	pop	r25
    4ebc:	8f 91       	pop	r24
    4ebe:	7f 91       	pop	r23
    4ec0:	6f 91       	pop	r22
    4ec2:	5f 91       	pop	r21
    4ec4:	4f 91       	pop	r20
    4ec6:	3f 91       	pop	r19
    4ec8:	2f 91       	pop	r18
    4eca:	0f 90       	pop	r0
    4ecc:	0f be       	out	0x3f, r0	; 63
    4ece:	0f 90       	pop	r0
    4ed0:	1f 90       	pop	r1
    4ed2:	18 95       	reti

00004ed4 <Timer_1_init>:

/*
 * Description : Initialize timer1 based on a given config structure
 *
 */
void Timer_1_init(const Timer1_ConfigType * Config_Ptr){
    4ed4:	df 93       	push	r29
    4ed6:	cf 93       	push	r28
    4ed8:	00 d0       	rcall	.+0      	; 0x4eda <Timer_1_init+0x6>
    4eda:	cd b7       	in	r28, 0x3d	; 61
    4edc:	de b7       	in	r29, 0x3e	; 62
    4ede:	9a 83       	std	Y+2, r25	; 0x02
    4ee0:	89 83       	std	Y+1, r24	; 0x01

	//in normal mode WGM10 WGM11 WGM12 WGM13 are all 0 so we can set them all to 0 by default
	CLEAR_BIT(TCCR1A,WGM10);
    4ee2:	af e4       	ldi	r26, 0x4F	; 79
    4ee4:	b0 e0       	ldi	r27, 0x00	; 0
    4ee6:	ef e4       	ldi	r30, 0x4F	; 79
    4ee8:	f0 e0       	ldi	r31, 0x00	; 0
    4eea:	80 81       	ld	r24, Z
    4eec:	8e 7f       	andi	r24, 0xFE	; 254
    4eee:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    4ef0:	af e4       	ldi	r26, 0x4F	; 79
    4ef2:	b0 e0       	ldi	r27, 0x00	; 0
    4ef4:	ef e4       	ldi	r30, 0x4F	; 79
    4ef6:	f0 e0       	ldi	r31, 0x00	; 0
    4ef8:	80 81       	ld	r24, Z
    4efa:	8d 7f       	andi	r24, 0xFD	; 253
    4efc:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM12);
    4efe:	ae e4       	ldi	r26, 0x4E	; 78
    4f00:	b0 e0       	ldi	r27, 0x00	; 0
    4f02:	ee e4       	ldi	r30, 0x4E	; 78
    4f04:	f0 e0       	ldi	r31, 0x00	; 0
    4f06:	80 81       	ld	r24, Z
    4f08:	87 7f       	andi	r24, 0xF7	; 247
    4f0a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM13);
    4f0c:	ae e4       	ldi	r26, 0x4E	; 78
    4f0e:	b0 e0       	ldi	r27, 0x00	; 0
    4f10:	ee e4       	ldi	r30, 0x4E	; 78
    4f12:	f0 e0       	ldi	r31, 0x00	; 0
    4f14:	80 81       	ld	r24, Z
    4f16:	8f 7e       	andi	r24, 0xEF	; 239
    4f18:	8c 93       	st	X, r24


	if(Config_Ptr->mode == CTC_OCR){		//CTC mode was selected
    4f1a:	e9 81       	ldd	r30, Y+1	; 0x01
    4f1c:	fa 81       	ldd	r31, Y+2	; 0x02
    4f1e:	85 81       	ldd	r24, Z+5	; 0x05
    4f20:	84 30       	cpi	r24, 0x04	; 4
    4f22:	c1 f4       	brne	.+48     	; 0x4f54 <Timer_1_init+0x80>

		//in CTC mode only WGM12 is 1
		SET_BIT(TCCR1B,WGM12);
    4f24:	ae e4       	ldi	r26, 0x4E	; 78
    4f26:	b0 e0       	ldi	r27, 0x00	; 0
    4f28:	ee e4       	ldi	r30, 0x4E	; 78
    4f2a:	f0 e0       	ldi	r31, 0x00	; 0
    4f2c:	80 81       	ld	r24, Z
    4f2e:	88 60       	ori	r24, 0x08	; 8
    4f30:	8c 93       	st	X, r24

		//assign the compare value to OCR1A
		OCR1A = Config_Ptr->compare_value;
    4f32:	aa e4       	ldi	r26, 0x4A	; 74
    4f34:	b0 e0       	ldi	r27, 0x00	; 0
    4f36:	e9 81       	ldd	r30, Y+1	; 0x01
    4f38:	fa 81       	ldd	r31, Y+2	; 0x02
    4f3a:	82 81       	ldd	r24, Z+2	; 0x02
    4f3c:	93 81       	ldd	r25, Z+3	; 0x03
    4f3e:	11 96       	adiw	r26, 0x01	; 1
    4f40:	9c 93       	st	X, r25
    4f42:	8e 93       	st	-X, r24

		//enable interrupt for OCIE1A
		SET_BIT(TIMSK,OCIE1A);
    4f44:	a9 e5       	ldi	r26, 0x59	; 89
    4f46:	b0 e0       	ldi	r27, 0x00	; 0
    4f48:	e9 e5       	ldi	r30, 0x59	; 89
    4f4a:	f0 e0       	ldi	r31, 0x00	; 0
    4f4c:	80 81       	ld	r24, Z
    4f4e:	80 61       	ori	r24, 0x10	; 16
    4f50:	8c 93       	st	X, r24
    4f52:	0c c0       	rjmp	.+24     	; 0x4f6c <Timer_1_init+0x98>

	}else if(Config_Ptr->mode == NORMAL){	//Normal mode was selected
    4f54:	e9 81       	ldd	r30, Y+1	; 0x01
    4f56:	fa 81       	ldd	r31, Y+2	; 0x02
    4f58:	85 81       	ldd	r24, Z+5	; 0x05
    4f5a:	88 23       	and	r24, r24
    4f5c:	39 f4       	brne	.+14     	; 0x4f6c <Timer_1_init+0x98>

		//enable interrupt for TOIE1
		SET_BIT(TIMSK,TOIE1);
    4f5e:	a9 e5       	ldi	r26, 0x59	; 89
    4f60:	b0 e0       	ldi	r27, 0x00	; 0
    4f62:	e9 e5       	ldi	r30, 0x59	; 89
    4f64:	f0 e0       	ldi	r31, 0x00	; 0
    4f66:	80 81       	ld	r24, Z
    4f68:	84 60       	ori	r24, 0x04	; 4
    4f6a:	8c 93       	st	X, r24

	}

	//only active when using non-PWM mode
	SET_BIT(TCCR1A,FOC1A);
    4f6c:	af e4       	ldi	r26, 0x4F	; 79
    4f6e:	b0 e0       	ldi	r27, 0x00	; 0
    4f70:	ef e4       	ldi	r30, 0x4F	; 79
    4f72:	f0 e0       	ldi	r31, 0x00	; 0
    4f74:	80 81       	ld	r24, Z
    4f76:	88 60       	ori	r24, 0x08	; 8
    4f78:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1B);
    4f7a:	af e4       	ldi	r26, 0x4F	; 79
    4f7c:	b0 e0       	ldi	r27, 0x00	; 0
    4f7e:	ef e4       	ldi	r30, 0x4F	; 79
    4f80:	f0 e0       	ldi	r31, 0x00	; 0
    4f82:	80 81       	ld	r24, Z
    4f84:	84 60       	ori	r24, 0x04	; 4
    4f86:	8c 93       	st	X, r24

	//assign initial value
	TCNT1 = Config_Ptr->initial_value;
    4f88:	ac e4       	ldi	r26, 0x4C	; 76
    4f8a:	b0 e0       	ldi	r27, 0x00	; 0
    4f8c:	e9 81       	ldd	r30, Y+1	; 0x01
    4f8e:	fa 81       	ldd	r31, Y+2	; 0x02
    4f90:	80 81       	ld	r24, Z
    4f92:	91 81       	ldd	r25, Z+1	; 0x01
    4f94:	11 96       	adiw	r26, 0x01	; 1
    4f96:	9c 93       	st	X, r25
    4f98:	8e 93       	st	-X, r24


//	TCCR1B 0 to 2 clock select
//	clock bits are 0 1 2    0000 0111 = f7
//							1111 1000 = ~f7
	TCCR1B = (TCCR1B & ~0xf7) | ( ( (Config_Ptr->prescaler) <<0) & 0xf7 );
    4f9a:	ae e4       	ldi	r26, 0x4E	; 78
    4f9c:	b0 e0       	ldi	r27, 0x00	; 0
    4f9e:	ee e4       	ldi	r30, 0x4E	; 78
    4fa0:	f0 e0       	ldi	r31, 0x00	; 0
    4fa2:	80 81       	ld	r24, Z
    4fa4:	98 2f       	mov	r25, r24
    4fa6:	98 70       	andi	r25, 0x08	; 8
    4fa8:	e9 81       	ldd	r30, Y+1	; 0x01
    4faa:	fa 81       	ldd	r31, Y+2	; 0x02
    4fac:	84 81       	ldd	r24, Z+4	; 0x04
    4fae:	87 7f       	andi	r24, 0xF7	; 247
    4fb0:	89 2b       	or	r24, r25
    4fb2:	8c 93       	st	X, r24


}
    4fb4:	0f 90       	pop	r0
    4fb6:	0f 90       	pop	r0
    4fb8:	cf 91       	pop	r28
    4fba:	df 91       	pop	r29
    4fbc:	08 95       	ret

00004fbe <Timer_1_deInit>:

/*
 * Description : Deinitialize timer1
 *
 */
void Timer_1_deInit(void){
    4fbe:	df 93       	push	r29
    4fc0:	cf 93       	push	r28
    4fc2:	cd b7       	in	r28, 0x3d	; 61
    4fc4:	de b7       	in	r29, 0x3e	; 62
	g_CallBackPtr = NULL_PTR;
    4fc6:	10 92 87 01 	sts	0x0187, r1
    4fca:	10 92 86 01 	sts	0x0186, r1
	TCCR1A = 0;
    4fce:	ef e4       	ldi	r30, 0x4F	; 79
    4fd0:	f0 e0       	ldi	r31, 0x00	; 0
    4fd2:	10 82       	st	Z, r1
	TCCR1B = 0;
    4fd4:	ee e4       	ldi	r30, 0x4E	; 78
    4fd6:	f0 e0       	ldi	r31, 0x00	; 0
    4fd8:	10 82       	st	Z, r1
	TCNT1 = 0;
    4fda:	ec e4       	ldi	r30, 0x4C	; 76
    4fdc:	f0 e0       	ldi	r31, 0x00	; 0
    4fde:	11 82       	std	Z+1, r1	; 0x01
    4fe0:	10 82       	st	Z, r1
	OCR1A = 0;
    4fe2:	ea e4       	ldi	r30, 0x4A	; 74
    4fe4:	f0 e0       	ldi	r31, 0x00	; 0
    4fe6:	11 82       	std	Z+1, r1	; 0x01
    4fe8:	10 82       	st	Z, r1
	TIMSK &= 0x3c;
    4fea:	a9 e5       	ldi	r26, 0x59	; 89
    4fec:	b0 e0       	ldi	r27, 0x00	; 0
    4fee:	e9 e5       	ldi	r30, 0x59	; 89
    4ff0:	f0 e0       	ldi	r31, 0x00	; 0
    4ff2:	80 81       	ld	r24, Z
    4ff4:	8c 73       	andi	r24, 0x3C	; 60
    4ff6:	8c 93       	st	X, r24
}
    4ff8:	cf 91       	pop	r28
    4ffa:	df 91       	pop	r29
    4ffc:	08 95       	ret

00004ffe <Timer_1_setCallBack>:

/*
 * Description : Set the callback function for timer1
 *
 */
void Timer_1_setCallBack(void(*a_ptr)(void)){
    4ffe:	df 93       	push	r29
    5000:	cf 93       	push	r28
    5002:	00 d0       	rcall	.+0      	; 0x5004 <Timer_1_setCallBack+0x6>
    5004:	cd b7       	in	r28, 0x3d	; 61
    5006:	de b7       	in	r29, 0x3e	; 62
    5008:	9a 83       	std	Y+2, r25	; 0x02
    500a:	89 83       	std	Y+1, r24	; 0x01
	g_CallBackPtr=a_ptr;
    500c:	89 81       	ldd	r24, Y+1	; 0x01
    500e:	9a 81       	ldd	r25, Y+2	; 0x02
    5010:	90 93 87 01 	sts	0x0187, r25
    5014:	80 93 86 01 	sts	0x0186, r24
}
    5018:	0f 90       	pop	r0
    501a:	0f 90       	pop	r0
    501c:	cf 91       	pop	r28
    501e:	df 91       	pop	r29
    5020:	08 95       	ret

00005022 <UART_init>:
#include "uart.h"
#include "std_types.h"
#include "common_macros.h"
#include "avr/io.h"

void UART_init(UART_config * config){
    5022:	df 93       	push	r29
    5024:	cf 93       	push	r28
    5026:	00 d0       	rcall	.+0      	; 0x5028 <UART_init+0x6>
    5028:	00 d0       	rcall	.+0      	; 0x502a <UART_init+0x8>
    502a:	cd b7       	in	r28, 0x3d	; 61
    502c:	de b7       	in	r29, 0x3e	; 62
    502e:	9c 83       	std	Y+4, r25	; 0x04
    5030:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    5032:	1a 82       	std	Y+2, r1	; 0x02
    5034:	19 82       	std	Y+1, r1	; 0x01
	ubrr_value = (uint16)(((F_CPU / (config->baud_rate * 8UL))) - 1);
    5036:	eb 81       	ldd	r30, Y+3	; 0x03
    5038:	fc 81       	ldd	r31, Y+4	; 0x04
    503a:	83 81       	ldd	r24, Z+3	; 0x03
    503c:	94 81       	ldd	r25, Z+4	; 0x04
    503e:	a5 81       	ldd	r26, Z+5	; 0x05
    5040:	b6 81       	ldd	r27, Z+6	; 0x06
    5042:	88 0f       	add	r24, r24
    5044:	99 1f       	adc	r25, r25
    5046:	aa 1f       	adc	r26, r26
    5048:	bb 1f       	adc	r27, r27
    504a:	88 0f       	add	r24, r24
    504c:	99 1f       	adc	r25, r25
    504e:	aa 1f       	adc	r26, r26
    5050:	bb 1f       	adc	r27, r27
    5052:	88 0f       	add	r24, r24
    5054:	99 1f       	adc	r25, r25
    5056:	aa 1f       	adc	r26, r26
    5058:	bb 1f       	adc	r27, r27
    505a:	9c 01       	movw	r18, r24
    505c:	ad 01       	movw	r20, r26
    505e:	80 e4       	ldi	r24, 0x40	; 64
    5060:	92 e4       	ldi	r25, 0x42	; 66
    5062:	af e0       	ldi	r26, 0x0F	; 15
    5064:	b0 e0       	ldi	r27, 0x00	; 0
    5066:	bc 01       	movw	r22, r24
    5068:	cd 01       	movw	r24, r26
    506a:	0e 94 73 29 	call	0x52e6	; 0x52e6 <__udivmodsi4>
    506e:	da 01       	movw	r26, r20
    5070:	c9 01       	movw	r24, r18
    5072:	01 97       	sbiw	r24, 0x01	; 1
    5074:	9a 83       	std	Y+2, r25	; 0x02
    5076:	89 83       	std	Y+1, r24	; 0x01
	UCSRA =(1<<U2X);
    5078:	eb e2       	ldi	r30, 0x2B	; 43
    507a:	f0 e0       	ldi	r31, 0x00	; 0
    507c:	82 e0       	ldi	r24, 0x02	; 2
    507e:	80 83       	st	Z, r24
	UCSRB=(1<<TXEN)|(1<<RXEN);
    5080:	ea e2       	ldi	r30, 0x2A	; 42
    5082:	f0 e0       	ldi	r31, 0x00	; 0
    5084:	88 e1       	ldi	r24, 0x18	; 24
    5086:	80 83       	st	Z, r24
	UCSRC=(1<<URSEL)|((config->no_of_bit_data)<<1)|((config->stopbit)<<3)|((config->parity)<<4);
    5088:	a0 e4       	ldi	r26, 0x40	; 64
    508a:	b0 e0       	ldi	r27, 0x00	; 0
    508c:	eb 81       	ldd	r30, Y+3	; 0x03
    508e:	fc 81       	ldd	r31, Y+4	; 0x04
    5090:	80 81       	ld	r24, Z
    5092:	88 2f       	mov	r24, r24
    5094:	90 e0       	ldi	r25, 0x00	; 0
    5096:	88 0f       	add	r24, r24
    5098:	99 1f       	adc	r25, r25
    509a:	28 2f       	mov	r18, r24
    509c:	20 68       	ori	r18, 0x80	; 128
    509e:	eb 81       	ldd	r30, Y+3	; 0x03
    50a0:	fc 81       	ldd	r31, Y+4	; 0x04
    50a2:	82 81       	ldd	r24, Z+2	; 0x02
    50a4:	88 2f       	mov	r24, r24
    50a6:	90 e0       	ldi	r25, 0x00	; 0
    50a8:	88 0f       	add	r24, r24
    50aa:	99 1f       	adc	r25, r25
    50ac:	88 0f       	add	r24, r24
    50ae:	99 1f       	adc	r25, r25
    50b0:	88 0f       	add	r24, r24
    50b2:	99 1f       	adc	r25, r25
    50b4:	28 2b       	or	r18, r24
    50b6:	eb 81       	ldd	r30, Y+3	; 0x03
    50b8:	fc 81       	ldd	r31, Y+4	; 0x04
    50ba:	81 81       	ldd	r24, Z+1	; 0x01
    50bc:	88 2f       	mov	r24, r24
    50be:	90 e0       	ldi	r25, 0x00	; 0
    50c0:	82 95       	swap	r24
    50c2:	92 95       	swap	r25
    50c4:	90 7f       	andi	r25, 0xF0	; 240
    50c6:	98 27       	eor	r25, r24
    50c8:	80 7f       	andi	r24, 0xF0	; 240
    50ca:	98 27       	eor	r25, r24
    50cc:	82 2b       	or	r24, r18
    50ce:	8c 93       	st	X, r24
	UBRRH=(ubrr_value>>8);
    50d0:	e0 e4       	ldi	r30, 0x40	; 64
    50d2:	f0 e0       	ldi	r31, 0x00	; 0
    50d4:	89 81       	ldd	r24, Y+1	; 0x01
    50d6:	9a 81       	ldd	r25, Y+2	; 0x02
    50d8:	89 2f       	mov	r24, r25
    50da:	99 27       	eor	r25, r25
    50dc:	80 83       	st	Z, r24
	UBRRL=(ubrr_value);
    50de:	e9 e2       	ldi	r30, 0x29	; 41
    50e0:	f0 e0       	ldi	r31, 0x00	; 0
    50e2:	89 81       	ldd	r24, Y+1	; 0x01
    50e4:	80 83       	st	Z, r24

}
    50e6:	0f 90       	pop	r0
    50e8:	0f 90       	pop	r0
    50ea:	0f 90       	pop	r0
    50ec:	0f 90       	pop	r0
    50ee:	cf 91       	pop	r28
    50f0:	df 91       	pop	r29
    50f2:	08 95       	ret

000050f4 <UART_send_byte>:


void UART_send_byte(uint8 byte){
    50f4:	df 93       	push	r29
    50f6:	cf 93       	push	r28
    50f8:	0f 92       	push	r0
    50fa:	cd b7       	in	r28, 0x3d	; 61
    50fc:	de b7       	in	r29, 0x3e	; 62
    50fe:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    5100:	eb e2       	ldi	r30, 0x2B	; 43
    5102:	f0 e0       	ldi	r31, 0x00	; 0
    5104:	80 81       	ld	r24, Z
    5106:	88 2f       	mov	r24, r24
    5108:	90 e0       	ldi	r25, 0x00	; 0
    510a:	80 72       	andi	r24, 0x20	; 32
    510c:	90 70       	andi	r25, 0x00	; 0
    510e:	00 97       	sbiw	r24, 0x00	; 0
    5110:	b9 f3       	breq	.-18     	; 0x5100 <UART_send_byte+0xc>
	UDR=byte;
    5112:	ec e2       	ldi	r30, 0x2C	; 44
    5114:	f0 e0       	ldi	r31, 0x00	; 0
    5116:	89 81       	ldd	r24, Y+1	; 0x01
    5118:	80 83       	st	Z, r24
}
    511a:	0f 90       	pop	r0
    511c:	cf 91       	pop	r28
    511e:	df 91       	pop	r29
    5120:	08 95       	ret

00005122 <UART_receive_byte>:

uint8 UART_receive_byte(){
    5122:	df 93       	push	r29
    5124:	cf 93       	push	r28
    5126:	cd b7       	in	r28, 0x3d	; 61
    5128:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    512a:	eb e2       	ldi	r30, 0x2B	; 43
    512c:	f0 e0       	ldi	r31, 0x00	; 0
    512e:	80 81       	ld	r24, Z
    5130:	88 23       	and	r24, r24
    5132:	dc f7       	brge	.-10     	; 0x512a <UART_receive_byte+0x8>
	return UDR;
    5134:	ec e2       	ldi	r30, 0x2C	; 44
    5136:	f0 e0       	ldi	r31, 0x00	; 0
    5138:	80 81       	ld	r24, Z
}
    513a:	cf 91       	pop	r28
    513c:	df 91       	pop	r29
    513e:	08 95       	ret

00005140 <UART_send_string>:

void UART_send_string(uint8 *str)
{
    5140:	df 93       	push	r29
    5142:	cf 93       	push	r28
    5144:	00 d0       	rcall	.+0      	; 0x5146 <UART_send_string+0x6>
    5146:	00 d0       	rcall	.+0      	; 0x5148 <UART_send_string+0x8>
    5148:	cd b7       	in	r28, 0x3d	; 61
    514a:	de b7       	in	r29, 0x3e	; 62
    514c:	9c 83       	std	Y+4, r25	; 0x04
    514e:	8b 83       	std	Y+3, r24	; 0x03

	for(int i=0;str[i]!='\0';i++)
    5150:	1a 82       	std	Y+2, r1	; 0x02
    5152:	19 82       	std	Y+1, r1	; 0x01
    5154:	0f c0       	rjmp	.+30     	; 0x5174 <UART_send_string+0x34>
	{
		UART_send_byte(str[i]);
    5156:	29 81       	ldd	r18, Y+1	; 0x01
    5158:	3a 81       	ldd	r19, Y+2	; 0x02
    515a:	8b 81       	ldd	r24, Y+3	; 0x03
    515c:	9c 81       	ldd	r25, Y+4	; 0x04
    515e:	fc 01       	movw	r30, r24
    5160:	e2 0f       	add	r30, r18
    5162:	f3 1f       	adc	r31, r19
    5164:	80 81       	ld	r24, Z
    5166:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <UART_send_byte>
}

void UART_send_string(uint8 *str)
{

	for(int i=0;str[i]!='\0';i++)
    516a:	89 81       	ldd	r24, Y+1	; 0x01
    516c:	9a 81       	ldd	r25, Y+2	; 0x02
    516e:	01 96       	adiw	r24, 0x01	; 1
    5170:	9a 83       	std	Y+2, r25	; 0x02
    5172:	89 83       	std	Y+1, r24	; 0x01
    5174:	29 81       	ldd	r18, Y+1	; 0x01
    5176:	3a 81       	ldd	r19, Y+2	; 0x02
    5178:	8b 81       	ldd	r24, Y+3	; 0x03
    517a:	9c 81       	ldd	r25, Y+4	; 0x04
    517c:	fc 01       	movw	r30, r24
    517e:	e2 0f       	add	r30, r18
    5180:	f3 1f       	adc	r31, r19
    5182:	80 81       	ld	r24, Z
    5184:	88 23       	and	r24, r24
    5186:	39 f7       	brne	.-50     	; 0x5156 <UART_send_string+0x16>
	{
		UART_send_byte(str[i]);
	}

}
    5188:	0f 90       	pop	r0
    518a:	0f 90       	pop	r0
    518c:	0f 90       	pop	r0
    518e:	0f 90       	pop	r0
    5190:	cf 91       	pop	r28
    5192:	df 91       	pop	r29
    5194:	08 95       	ret

00005196 <UART_send_array>:

void UART_send_array(uint8 *arr)
{
    5196:	df 93       	push	r29
    5198:	cf 93       	push	r28
    519a:	00 d0       	rcall	.+0      	; 0x519c <UART_send_array+0x6>
    519c:	00 d0       	rcall	.+0      	; 0x519e <UART_send_array+0x8>
    519e:	cd b7       	in	r28, 0x3d	; 61
    51a0:	de b7       	in	r29, 0x3e	; 62
    51a2:	9c 83       	std	Y+4, r25	; 0x04
    51a4:	8b 83       	std	Y+3, r24	; 0x03

	for(int i=0;arr[i]!='*';i++)
    51a6:	1a 82       	std	Y+2, r1	; 0x02
    51a8:	19 82       	std	Y+1, r1	; 0x01
    51aa:	0f c0       	rjmp	.+30     	; 0x51ca <UART_send_array+0x34>
	{
		UART_send_byte(arr[i]);
    51ac:	29 81       	ldd	r18, Y+1	; 0x01
    51ae:	3a 81       	ldd	r19, Y+2	; 0x02
    51b0:	8b 81       	ldd	r24, Y+3	; 0x03
    51b2:	9c 81       	ldd	r25, Y+4	; 0x04
    51b4:	fc 01       	movw	r30, r24
    51b6:	e2 0f       	add	r30, r18
    51b8:	f3 1f       	adc	r31, r19
    51ba:	80 81       	ld	r24, Z
    51bc:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <UART_send_byte>
}

void UART_send_array(uint8 *arr)
{

	for(int i=0;arr[i]!='*';i++)
    51c0:	89 81       	ldd	r24, Y+1	; 0x01
    51c2:	9a 81       	ldd	r25, Y+2	; 0x02
    51c4:	01 96       	adiw	r24, 0x01	; 1
    51c6:	9a 83       	std	Y+2, r25	; 0x02
    51c8:	89 83       	std	Y+1, r24	; 0x01
    51ca:	29 81       	ldd	r18, Y+1	; 0x01
    51cc:	3a 81       	ldd	r19, Y+2	; 0x02
    51ce:	8b 81       	ldd	r24, Y+3	; 0x03
    51d0:	9c 81       	ldd	r25, Y+4	; 0x04
    51d2:	fc 01       	movw	r30, r24
    51d4:	e2 0f       	add	r30, r18
    51d6:	f3 1f       	adc	r31, r19
    51d8:	80 81       	ld	r24, Z
    51da:	8a 32       	cpi	r24, 0x2A	; 42
    51dc:	39 f7       	brne	.-50     	; 0x51ac <UART_send_array+0x16>
	{
		UART_send_byte(arr[i]);
	}

}
    51de:	0f 90       	pop	r0
    51e0:	0f 90       	pop	r0
    51e2:	0f 90       	pop	r0
    51e4:	0f 90       	pop	r0
    51e6:	cf 91       	pop	r28
    51e8:	df 91       	pop	r29
    51ea:	08 95       	ret

000051ec <UART_receiveString>:


void UART_receiveString(uint8 *Str)
	{
    51ec:	0f 93       	push	r16
    51ee:	1f 93       	push	r17
    51f0:	df 93       	push	r29
    51f2:	cf 93       	push	r28
    51f4:	00 d0       	rcall	.+0      	; 0x51f6 <UART_receiveString+0xa>
    51f6:	0f 92       	push	r0
    51f8:	cd b7       	in	r28, 0x3d	; 61
    51fa:	de b7       	in	r29, 0x3e	; 62
    51fc:	9b 83       	std	Y+3, r25	; 0x03
    51fe:	8a 83       	std	Y+2, r24	; 0x02
		uint8 i = 0;
    5200:	19 82       	std	Y+1, r1	; 0x01

		/* Receive the first byte */
		Str[i] = UART_receive_byte();
    5202:	89 81       	ldd	r24, Y+1	; 0x01
    5204:	28 2f       	mov	r18, r24
    5206:	30 e0       	ldi	r19, 0x00	; 0
    5208:	8a 81       	ldd	r24, Y+2	; 0x02
    520a:	9b 81       	ldd	r25, Y+3	; 0x03
    520c:	8c 01       	movw	r16, r24
    520e:	02 0f       	add	r16, r18
    5210:	13 1f       	adc	r17, r19
    5212:	0e 94 91 28 	call	0x5122	; 0x5122 <UART_receive_byte>
    5216:	f8 01       	movw	r30, r16
    5218:	80 83       	st	Z, r24
    521a:	0f c0       	rjmp	.+30     	; 0x523a <UART_receiveString+0x4e>

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
		{
			i++;
    521c:	89 81       	ldd	r24, Y+1	; 0x01
    521e:	8f 5f       	subi	r24, 0xFF	; 255
    5220:	89 83       	std	Y+1, r24	; 0x01
			Str[i] = UART_receive_byte();
    5222:	89 81       	ldd	r24, Y+1	; 0x01
    5224:	28 2f       	mov	r18, r24
    5226:	30 e0       	ldi	r19, 0x00	; 0
    5228:	8a 81       	ldd	r24, Y+2	; 0x02
    522a:	9b 81       	ldd	r25, Y+3	; 0x03
    522c:	8c 01       	movw	r16, r24
    522e:	02 0f       	add	r16, r18
    5230:	13 1f       	adc	r17, r19
    5232:	0e 94 91 28 	call	0x5122	; 0x5122 <UART_receive_byte>
    5236:	f8 01       	movw	r30, r16
    5238:	80 83       	st	Z, r24

		/* Receive the first byte */
		Str[i] = UART_receive_byte();

		/* Receive the whole string until the '#' */
		while(Str[i] != '#')
    523a:	89 81       	ldd	r24, Y+1	; 0x01
    523c:	28 2f       	mov	r18, r24
    523e:	30 e0       	ldi	r19, 0x00	; 0
    5240:	8a 81       	ldd	r24, Y+2	; 0x02
    5242:	9b 81       	ldd	r25, Y+3	; 0x03
    5244:	fc 01       	movw	r30, r24
    5246:	e2 0f       	add	r30, r18
    5248:	f3 1f       	adc	r31, r19
    524a:	80 81       	ld	r24, Z
    524c:	83 32       	cpi	r24, 0x23	; 35
    524e:	31 f7       	brne	.-52     	; 0x521c <UART_receiveString+0x30>
			i++;
			Str[i] = UART_receive_byte();
		}

		/* After receiving the whole string plus the '#', replace the '#' with '\0' */
		Str[i] = '\0';
    5250:	89 81       	ldd	r24, Y+1	; 0x01
    5252:	28 2f       	mov	r18, r24
    5254:	30 e0       	ldi	r19, 0x00	; 0
    5256:	8a 81       	ldd	r24, Y+2	; 0x02
    5258:	9b 81       	ldd	r25, Y+3	; 0x03
    525a:	fc 01       	movw	r30, r24
    525c:	e2 0f       	add	r30, r18
    525e:	f3 1f       	adc	r31, r19
    5260:	10 82       	st	Z, r1
	}
    5262:	0f 90       	pop	r0
    5264:	0f 90       	pop	r0
    5266:	0f 90       	pop	r0
    5268:	cf 91       	pop	r28
    526a:	df 91       	pop	r29
    526c:	1f 91       	pop	r17
    526e:	0f 91       	pop	r16
    5270:	08 95       	ret

00005272 <UART_receivearry>:


void UART_receivearry(uint8 *arr)
	{
    5272:	0f 93       	push	r16
    5274:	1f 93       	push	r17
    5276:	df 93       	push	r29
    5278:	cf 93       	push	r28
    527a:	00 d0       	rcall	.+0      	; 0x527c <UART_receivearry+0xa>
    527c:	0f 92       	push	r0
    527e:	cd b7       	in	r28, 0x3d	; 61
    5280:	de b7       	in	r29, 0x3e	; 62
    5282:	9b 83       	std	Y+3, r25	; 0x03
    5284:	8a 83       	std	Y+2, r24	; 0x02
		uint8 i = 0;
    5286:	19 82       	std	Y+1, r1	; 0x01

		/* Receive the first byte */
		arr[i] = UART_receive_byte();
    5288:	89 81       	ldd	r24, Y+1	; 0x01
    528a:	28 2f       	mov	r18, r24
    528c:	30 e0       	ldi	r19, 0x00	; 0
    528e:	8a 81       	ldd	r24, Y+2	; 0x02
    5290:	9b 81       	ldd	r25, Y+3	; 0x03
    5292:	8c 01       	movw	r16, r24
    5294:	02 0f       	add	r16, r18
    5296:	13 1f       	adc	r17, r19
    5298:	0e 94 91 28 	call	0x5122	; 0x5122 <UART_receive_byte>
    529c:	f8 01       	movw	r30, r16
    529e:	80 83       	st	Z, r24
    52a0:	0f c0       	rjmp	.+30     	; 0x52c0 <UART_receivearry+0x4e>

		/* Receive the whole array until the '*' */
		while(arr[i] != '*')
		{
			i++;
    52a2:	89 81       	ldd	r24, Y+1	; 0x01
    52a4:	8f 5f       	subi	r24, 0xFF	; 255
    52a6:	89 83       	std	Y+1, r24	; 0x01
			arr[i] = UART_receive_byte();
    52a8:	89 81       	ldd	r24, Y+1	; 0x01
    52aa:	28 2f       	mov	r18, r24
    52ac:	30 e0       	ldi	r19, 0x00	; 0
    52ae:	8a 81       	ldd	r24, Y+2	; 0x02
    52b0:	9b 81       	ldd	r25, Y+3	; 0x03
    52b2:	8c 01       	movw	r16, r24
    52b4:	02 0f       	add	r16, r18
    52b6:	13 1f       	adc	r17, r19
    52b8:	0e 94 91 28 	call	0x5122	; 0x5122 <UART_receive_byte>
    52bc:	f8 01       	movw	r30, r16
    52be:	80 83       	st	Z, r24

		/* Receive the first byte */
		arr[i] = UART_receive_byte();

		/* Receive the whole array until the '*' */
		while(arr[i] != '*')
    52c0:	89 81       	ldd	r24, Y+1	; 0x01
    52c2:	28 2f       	mov	r18, r24
    52c4:	30 e0       	ldi	r19, 0x00	; 0
    52c6:	8a 81       	ldd	r24, Y+2	; 0x02
    52c8:	9b 81       	ldd	r25, Y+3	; 0x03
    52ca:	fc 01       	movw	r30, r24
    52cc:	e2 0f       	add	r30, r18
    52ce:	f3 1f       	adc	r31, r19
    52d0:	80 81       	ld	r24, Z
    52d2:	8a 32       	cpi	r24, 0x2A	; 42
    52d4:	31 f7       	brne	.-52     	; 0x52a2 <UART_receivearry+0x30>
			arr[i] = UART_receive_byte();
		}

		/* After receiving the whole string plus the '#', replace the '#' with '\0' */
		//arr[i] = '*';
	}
    52d6:	0f 90       	pop	r0
    52d8:	0f 90       	pop	r0
    52da:	0f 90       	pop	r0
    52dc:	cf 91       	pop	r28
    52de:	df 91       	pop	r29
    52e0:	1f 91       	pop	r17
    52e2:	0f 91       	pop	r16
    52e4:	08 95       	ret

000052e6 <__udivmodsi4>:
    52e6:	a1 e2       	ldi	r26, 0x21	; 33
    52e8:	1a 2e       	mov	r1, r26
    52ea:	aa 1b       	sub	r26, r26
    52ec:	bb 1b       	sub	r27, r27
    52ee:	fd 01       	movw	r30, r26
    52f0:	0d c0       	rjmp	.+26     	; 0x530c <__udivmodsi4_ep>

000052f2 <__udivmodsi4_loop>:
    52f2:	aa 1f       	adc	r26, r26
    52f4:	bb 1f       	adc	r27, r27
    52f6:	ee 1f       	adc	r30, r30
    52f8:	ff 1f       	adc	r31, r31
    52fa:	a2 17       	cp	r26, r18
    52fc:	b3 07       	cpc	r27, r19
    52fe:	e4 07       	cpc	r30, r20
    5300:	f5 07       	cpc	r31, r21
    5302:	20 f0       	brcs	.+8      	; 0x530c <__udivmodsi4_ep>
    5304:	a2 1b       	sub	r26, r18
    5306:	b3 0b       	sbc	r27, r19
    5308:	e4 0b       	sbc	r30, r20
    530a:	f5 0b       	sbc	r31, r21

0000530c <__udivmodsi4_ep>:
    530c:	66 1f       	adc	r22, r22
    530e:	77 1f       	adc	r23, r23
    5310:	88 1f       	adc	r24, r24
    5312:	99 1f       	adc	r25, r25
    5314:	1a 94       	dec	r1
    5316:	69 f7       	brne	.-38     	; 0x52f2 <__udivmodsi4_loop>
    5318:	60 95       	com	r22
    531a:	70 95       	com	r23
    531c:	80 95       	com	r24
    531e:	90 95       	com	r25
    5320:	9b 01       	movw	r18, r22
    5322:	ac 01       	movw	r20, r24
    5324:	bd 01       	movw	r22, r26
    5326:	cf 01       	movw	r24, r30
    5328:	08 95       	ret

0000532a <__prologue_saves__>:
    532a:	2f 92       	push	r2
    532c:	3f 92       	push	r3
    532e:	4f 92       	push	r4
    5330:	5f 92       	push	r5
    5332:	6f 92       	push	r6
    5334:	7f 92       	push	r7
    5336:	8f 92       	push	r8
    5338:	9f 92       	push	r9
    533a:	af 92       	push	r10
    533c:	bf 92       	push	r11
    533e:	cf 92       	push	r12
    5340:	df 92       	push	r13
    5342:	ef 92       	push	r14
    5344:	ff 92       	push	r15
    5346:	0f 93       	push	r16
    5348:	1f 93       	push	r17
    534a:	cf 93       	push	r28
    534c:	df 93       	push	r29
    534e:	cd b7       	in	r28, 0x3d	; 61
    5350:	de b7       	in	r29, 0x3e	; 62
    5352:	ca 1b       	sub	r28, r26
    5354:	db 0b       	sbc	r29, r27
    5356:	0f b6       	in	r0, 0x3f	; 63
    5358:	f8 94       	cli
    535a:	de bf       	out	0x3e, r29	; 62
    535c:	0f be       	out	0x3f, r0	; 63
    535e:	cd bf       	out	0x3d, r28	; 61
    5360:	09 94       	ijmp

00005362 <__epilogue_restores__>:
    5362:	2a 88       	ldd	r2, Y+18	; 0x12
    5364:	39 88       	ldd	r3, Y+17	; 0x11
    5366:	48 88       	ldd	r4, Y+16	; 0x10
    5368:	5f 84       	ldd	r5, Y+15	; 0x0f
    536a:	6e 84       	ldd	r6, Y+14	; 0x0e
    536c:	7d 84       	ldd	r7, Y+13	; 0x0d
    536e:	8c 84       	ldd	r8, Y+12	; 0x0c
    5370:	9b 84       	ldd	r9, Y+11	; 0x0b
    5372:	aa 84       	ldd	r10, Y+10	; 0x0a
    5374:	b9 84       	ldd	r11, Y+9	; 0x09
    5376:	c8 84       	ldd	r12, Y+8	; 0x08
    5378:	df 80       	ldd	r13, Y+7	; 0x07
    537a:	ee 80       	ldd	r14, Y+6	; 0x06
    537c:	fd 80       	ldd	r15, Y+5	; 0x05
    537e:	0c 81       	ldd	r16, Y+4	; 0x04
    5380:	1b 81       	ldd	r17, Y+3	; 0x03
    5382:	aa 81       	ldd	r26, Y+2	; 0x02
    5384:	b9 81       	ldd	r27, Y+1	; 0x01
    5386:	ce 0f       	add	r28, r30
    5388:	d1 1d       	adc	r29, r1
    538a:	0f b6       	in	r0, 0x3f	; 63
    538c:	f8 94       	cli
    538e:	de bf       	out	0x3e, r29	; 62
    5390:	0f be       	out	0x3f, r0	; 63
    5392:	cd bf       	out	0x3d, r28	; 61
    5394:	ed 01       	movw	r28, r26
    5396:	08 95       	ret

00005398 <itoa>:
    5398:	fb 01       	movw	r30, r22
    539a:	9f 01       	movw	r18, r30
    539c:	e8 94       	clt
    539e:	42 30       	cpi	r20, 0x02	; 2
    53a0:	c4 f0       	brlt	.+48     	; 0x53d2 <itoa+0x3a>
    53a2:	45 32       	cpi	r20, 0x25	; 37
    53a4:	b4 f4       	brge	.+44     	; 0x53d2 <itoa+0x3a>
    53a6:	4a 30       	cpi	r20, 0x0A	; 10
    53a8:	29 f4       	brne	.+10     	; 0x53b4 <itoa+0x1c>
    53aa:	97 fb       	bst	r25, 7
    53ac:	1e f4       	brtc	.+6      	; 0x53b4 <itoa+0x1c>
    53ae:	90 95       	com	r25
    53b0:	81 95       	neg	r24
    53b2:	9f 4f       	sbci	r25, 0xFF	; 255
    53b4:	64 2f       	mov	r22, r20
    53b6:	77 27       	eor	r23, r23
    53b8:	0e 94 fd 29 	call	0x53fa	; 0x53fa <__udivmodhi4>
    53bc:	80 5d       	subi	r24, 0xD0	; 208
    53be:	8a 33       	cpi	r24, 0x3A	; 58
    53c0:	0c f0       	brlt	.+2      	; 0x53c4 <itoa+0x2c>
    53c2:	89 5d       	subi	r24, 0xD9	; 217
    53c4:	81 93       	st	Z+, r24
    53c6:	cb 01       	movw	r24, r22
    53c8:	00 97       	sbiw	r24, 0x00	; 0
    53ca:	a1 f7       	brne	.-24     	; 0x53b4 <itoa+0x1c>
    53cc:	16 f4       	brtc	.+4      	; 0x53d2 <itoa+0x3a>
    53ce:	5d e2       	ldi	r21, 0x2D	; 45
    53d0:	51 93       	st	Z+, r21
    53d2:	10 82       	st	Z, r1
    53d4:	c9 01       	movw	r24, r18
    53d6:	0c 94 ed 29 	jmp	0x53da	; 0x53da <strrev>

000053da <strrev>:
    53da:	dc 01       	movw	r26, r24
    53dc:	fc 01       	movw	r30, r24
    53de:	67 2f       	mov	r22, r23
    53e0:	71 91       	ld	r23, Z+
    53e2:	77 23       	and	r23, r23
    53e4:	e1 f7       	brne	.-8      	; 0x53de <strrev+0x4>
    53e6:	32 97       	sbiw	r30, 0x02	; 2
    53e8:	04 c0       	rjmp	.+8      	; 0x53f2 <strrev+0x18>
    53ea:	7c 91       	ld	r23, X
    53ec:	6d 93       	st	X+, r22
    53ee:	70 83       	st	Z, r23
    53f0:	62 91       	ld	r22, -Z
    53f2:	ae 17       	cp	r26, r30
    53f4:	bf 07       	cpc	r27, r31
    53f6:	c8 f3       	brcs	.-14     	; 0x53ea <strrev+0x10>
    53f8:	08 95       	ret

000053fa <__udivmodhi4>:
    53fa:	aa 1b       	sub	r26, r26
    53fc:	bb 1b       	sub	r27, r27
    53fe:	51 e1       	ldi	r21, 0x11	; 17
    5400:	07 c0       	rjmp	.+14     	; 0x5410 <__udivmodhi4_ep>

00005402 <__udivmodhi4_loop>:
    5402:	aa 1f       	adc	r26, r26
    5404:	bb 1f       	adc	r27, r27
    5406:	a6 17       	cp	r26, r22
    5408:	b7 07       	cpc	r27, r23
    540a:	10 f0       	brcs	.+4      	; 0x5410 <__udivmodhi4_ep>
    540c:	a6 1b       	sub	r26, r22
    540e:	b7 0b       	sbc	r27, r23

00005410 <__udivmodhi4_ep>:
    5410:	88 1f       	adc	r24, r24
    5412:	99 1f       	adc	r25, r25
    5414:	5a 95       	dec	r21
    5416:	a9 f7       	brne	.-22     	; 0x5402 <__udivmodhi4_loop>
    5418:	80 95       	com	r24
    541a:	90 95       	com	r25
    541c:	bc 01       	movw	r22, r24
    541e:	cd 01       	movw	r24, r26
    5420:	08 95       	ret

00005422 <_exit>:
    5422:	f8 94       	cli

00005424 <__stop_program>:
    5424:	ff cf       	rjmp	.-2      	; 0x5424 <__stop_program>
